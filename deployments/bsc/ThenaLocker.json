{
  "address": "0x7d1f70Bf5BE86e14185f742a202332DD3C8F4589",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftManager_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FEE_DENOMINATOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "acceptLock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "lpFee_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "collectFee_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lockFee_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "lockFeeToken_",
          "type": "address"
        }
      ],
      "name": "addOrUpdateFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "addSupportedNftManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "adminRefundERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "name": "adminRefundEth",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "name": "collect",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount0",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount1",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fee0",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fee1",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "customFeeSigner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "sig",
          "type": "bytes"
        }
      ],
      "name": "disableSig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "sig",
          "type": "bytes"
        }
      ],
      "name": "disabledSigs",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeReceiver",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "nameHash",
          "type": "bytes32"
        }
      ],
      "name": "fees",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "lpFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "collectFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lockFee",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "lockFeeToken",
              "type": "address"
            }
          ],
          "internalType": "struct IGoPlusLocker.FeeStruct",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        }
      ],
      "name": "getFee",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "lpFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "collectFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lockFee",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "lockFeeToken",
              "type": "address"
            }
          ],
          "internalType": "struct IGoPlusLocker.FeeStruct",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserLocks",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        }
      ],
      "name": "isSupportedFeeName",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftManager_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "nftId_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "collector_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "endTime_",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "lock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "lockId",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftManager_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "nftId_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "collector_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "endTime_",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "signature_",
          "type": "bytes"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "lpFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "collectFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lockFee",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "lockFeeToken",
              "type": "address"
            }
          ],
          "internalType": "struct IGoPlusLocker.FeeStruct",
          "name": "feeObj_",
          "type": "tuple"
        }
      ],
      "name": "lockWithCustomFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "lockId",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "lockId",
          "type": "uint256"
        }
      ],
      "name": "locks",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "lockId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "nftPositionManager",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "pendingOwner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "collector",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "pool",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "collectFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nftId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "startTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endTime",
              "type": "uint256"
            }
          ],
          "internalType": "struct IGoPlusLocker.LockInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextLockId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "relock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        }
      ],
      "name": "removeFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "setCollectAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftManager_",
          "type": "address"
        }
      ],
      "name": "supportedNftManager",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "transferLock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "unlock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "feeReceiver_",
          "type": "address"
        }
      ],
      "name": "updateFeeReceiver",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "updateFeeSigner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd49688edf839de2f66bfe579c8e28bec4ab64e6e5402c0623e32471f85b18223",
  "receipt": {
    "to": null,
    "from": "0x1F09Ec21d7fd0A21879b919bf0f9C46e6b85CA8b",
    "contractAddress": "0x7d1f70Bf5BE86e14185f742a202332DD3C8F4589",
    "transactionIndex": 138,
    "gasUsed": "1102628",
    "logsBloom": "0x
    "blockHash": "0x732480350979012010119501f4ed62f414a3599e6ef29bfd91ea8a4dd91ff027",
    "transactionHash": "0xd49688edf839de2f66bfe579c8e28bec4ab64e6e5402c0623e32471f85b18223",
    "logs": [],
    "blockNumber": 48757830,
    "cumulativeGasUsed": "12871942",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xa51ADb08Cbe6Ae398046A23bec013979816B77Ab"
  ],
  "numDeployments": 1,
  "solcInputHash": "9326df4f4c0627ea5e7f6f63ba84ba86",
  "metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftManager_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FEE_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"acceptLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"lpFee_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collectFee_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockFee_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"lockFeeToken_\",\"type\":\"address\"}],\"name\":\"addOrUpdateFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addSupportedNftManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"adminRefundERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"adminRefundEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"name\":\"collect\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee1\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"customFeeSigner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"name\":\"disableSig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"name\":\"disabledSigs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"nameHash\",\"type\":\"bytes32\"}],\"name\":\"fees\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"lpFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collectFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"lockFeeToken\",\"type\":\"address\"}],\"internalType\":\"struct IGoPlusLocker.FeeStruct\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"}],\"name\":\"getFee\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"lpFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collectFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"lockFeeToken\",\"type\":\"address\"}],\"internalType\":\"struct IGoPlusLocker.FeeStruct\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserLocks\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"}],\"name\":\"isSupportedFeeName\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftManager_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftId_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collector_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"endTime_\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"lock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftManager_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftId_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collector_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"endTime_\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature_\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"lpFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collectFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"lockFeeToken\",\"type\":\"address\"}],\"internalType\":\"struct IGoPlusLocker.FeeStruct\",\"name\":\"feeObj_\",\"type\":\"tuple\"}],\"name\":\"lockWithCustomFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"}],\"name\":\"locks\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"nftPositionManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pendingOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collector\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"collectFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"internalType\":\"struct IGoPlusLocker.LockInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextLockId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"relock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"}],\"name\":\"removeFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"setCollectAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftManager_\",\"type\":\"address\"}],\"name\":\"supportedNftManager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"transferLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeReceiver_\",\"type\":\"address\"}],\"name\":\"updateFeeReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"updateFeeSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/launchpad/clmm/locker/ThenaLocker.sol\":\"ThenaLocker\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC1363.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC1363.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @title IERC1363\\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\\n *\\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\\n */\\ninterface IERC1363 is IERC20, IERC165 {\\n    /*\\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\\n     * 0xb0202a11 ===\\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\\n     */\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @param data Additional data with no specified format, sent in call to `spender`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9b6b3e7803bc5f2f8cd7ad57db8ac1def61a9930a5a3107df4882e028a9605d7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0xce41876e78d1badc0512229b4d14e4daf83bc1003d7f83978d18e0e56f965b9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC1363} from \\\"../../../interfaces/IERC1363.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    /**\\n     * @dev An operation with an ERC-20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     *\\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\\n     * only sets the \\\"standard\\\" allowance. Any temporary allowance will remain active, in addition to the value being\\n     * set here.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            safeTransfer(token, to, value);\\n        } else if (!token.transferAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferFromAndCallRelaxed(\\n        IERC1363 token,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length == 0) {\\n            safeTransferFrom(token, from, to, value);\\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\\n     * once without retrying, and relies on the returned value to be true.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            forceApprove(token, to, value);\\n        } else if (!token.approveAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            // bubble errors\\n            if iszero(success) {\\n                let ptr := mload(0x40)\\n                returndatacopy(ptr, 0, returndatasize())\\n                revert(ptr, returndatasize())\\n            }\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n\\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\\n    }\\n}\\n\",\"keccak256\":\"0x4ea01544758fd2c7045961904686bfe232d2220a04ecaa2d6b08dac17827febf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC-721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC-721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC-721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5dc63d1c6a12fe1b17793e1745877b2fcbe1964c3edfd0a482fac21ca8f18261\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\"},\"contracts/interfaces/IGoPlusLocker.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\n// \\u2588\\u2588\\u2588\\u2557   \\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2557  \\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\n// \\u2588\\u2588\\u2554\\u2588\\u2588\\u2588\\u2588\\u2554\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2551 \\u255a\\u2550\\u255d \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\n// \\u255a\\u2550\\u255d     \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\n\\n// Website: https://wagmie.com\\n// Telegram: https://t.me/mahaxyz\\n// Twitter: https://twitter.com/mahaxyz_\\n\\npragma solidity ^0.8.0;\\n\\ninterface IGoPlusLocker {\\n  struct FeeStruct {\\n    string name; // name by which the fee is accessed\\n    uint256 lpFee; // 100 = 1%, 10,000 = 100%\\n    uint256 collectFee; // 100 = 1%, 10,000 = 100%\\n    uint256 lockFee; // in amount tokens\\n    address lockFeeToken; // address(0) = ETH otherwise ERC20 address expected\\n  }\\n\\n  struct LockInfo {\\n    uint256 lockId;\\n    address nftPositionManager;\\n    address pendingOwner;\\n    address owner;\\n    address collector;\\n    address pool;\\n    uint256 collectFee;\\n    uint256 nftId;\\n    uint256 startTime;\\n    uint256 endTime;\\n  }\\n\\n  function fees(bytes32 nameHash) external view returns (FeeStruct memory);\\n  function feeReceiver() external view returns (address);\\n  function customFeeSigner() external view returns (address);\\n  function FEE_DENOMINATOR() external view returns (uint256);\\n  function nextLockId() external view returns (uint256);\\n  function locks(uint256 lockId) external view returns (LockInfo memory);\\n  function disabledSigs(bytes memory sig) external view returns (bool);\\n\\n  function addOrUpdateFee(\\n    string memory name_,\\n    uint256 lpFee_,\\n    uint256 collectFee_,\\n    uint256 lockFee_,\\n    address lockFeeToken_\\n  ) external;\\n\\n  function removeFee(string memory name_) external;\\n  function updateFeeReceiver(address feeReceiver_) external;\\n  function updateFeeSigner(address feeSigner_) external;\\n  function addSupportedNftManager(address nftManager_) external;\\n  function disableSig(bytes memory sig) external;\\n  function supportedNftManager(address nftManager_) external view returns (bool);\\n  function isSupportedFeeName(string memory name_) external view returns (bool);\\n  function getFee(string memory name_) external view returns (FeeStruct memory);\\n\\n  function lock(\\n    address nftManager_,\\n    uint256 nftId_,\\n    address owner_,\\n    address collector_,\\n    uint256 endTime_,\\n    string memory feeName_\\n  ) external payable returns (uint256 lockId);\\n\\n  function lockWithCustomFee(\\n    address nftManager_,\\n    uint256 nftId_,\\n    address owner_,\\n    address collector_,\\n    uint256 endTime_,\\n    bytes memory signature_,\\n    FeeStruct memory feeObj_\\n  ) external payable returns (uint256 lockId);\\n\\n  function transferLock(uint256 lockId_, address newOwner_) external;\\n  function acceptLock(uint256 lockId_) external;\\n  function unlock(uint256 lockId_) external;\\n  function relock(uint256 lockId_, uint256 endTime_) external;\\n  function collect(uint256 lockId_, address recipient_, uint128 amount0Max_, uint128 amount1Max_)\\n    external\\n    returns (uint256 amount0, uint256 amount1, uint256 fee0, uint256 fee1);\\n  function setCollectAddress(uint256 lockId_, address collector_) external;\\n  function adminRefundEth(uint256 amount_, address payable receiver_) external;\\n  function adminRefundERC20(address token_, address receiver_, uint256 amount_) external;\\n  function getUserLocks(address user) external view returns (uint256[] memory lockIds);\\n}\\n\",\"keccak256\":\"0x854aa3e52e8aa5f5dc83be5b648fe025aa803415cf94b4273c9f249634a7a9d1\",\"license\":\"BUSL-1.1\"},\"contracts/launchpad/clmm/locker/ThenaLocker.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\n// \\u2588\\u2588\\u2588\\u2557   \\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2557  \\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\n// \\u2588\\u2588\\u2554\\u2588\\u2588\\u2588\\u2588\\u2554\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2551 \\u255a\\u2550\\u255d \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\n// \\u255a\\u2550\\u255d     \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\n\\n// Website: https://wagmie.com\\n// Telegram: https://t.me/mahaxyz\\n// Twitter: https://twitter.com/mahaxyz_\\n\\npragma solidity ^0.8.0;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport {IGoPlusLocker} from \\\"contracts/interfaces/IGoPlusLocker.sol\\\";\\n\\ncontract ThenaLocker is IGoPlusLocker {\\n  using SafeERC20 for IERC20;\\n\\n  // Constants\\n  uint256 public constant override FEE_DENOMINATOR = 10_000;\\n\\n  // State variables\\n  mapping(bytes32 => FeeStruct) private _fees;\\n  address private _feeReceiver;\\n  address private _customFeeSigner;\\n  uint256 private _nextLockId;\\n  mapping(uint256 => LockInfo) private _locks;\\n  mapping(bytes => bool) private _disabledSigs;\\n  mapping(address => bool) private _supportedNftManagers;\\n  mapping(address => uint256[]) private _userLocks;\\n\\n  constructor(address nftManager_) {\\n    _supportedNftManagers[nftManager_] = true;\\n  }\\n\\n  // View functions\\n  function fees(bytes32 nameHash) external view override returns (FeeStruct memory) {\\n    return _fees[nameHash];\\n  }\\n\\n  function feeReceiver() external view override returns (address) {\\n    return _feeReceiver;\\n  }\\n\\n  function customFeeSigner() external view override returns (address) {\\n    return _customFeeSigner;\\n  }\\n\\n  function nextLockId() external view override returns (uint256) {\\n    return _nextLockId;\\n  }\\n\\n  function locks(uint256 lockId) external view override returns (LockInfo memory) {\\n    return _locks[lockId];\\n  }\\n\\n  function disabledSigs(bytes memory sig) external view override returns (bool) {\\n    return _disabledSigs[sig];\\n  }\\n\\n  function supportedNftManager(address nftManager_) external view override returns (bool) {\\n    return _supportedNftManagers[nftManager_];\\n  }\\n\\n  function isSupportedFeeName(string memory name_) external view override returns (bool) {\\n    bytes32 nameHash = keccak256(bytes(name_));\\n    return _fees[nameHash].lpFee != 0;\\n  }\\n\\n  function getFee(string memory name_) external view override returns (FeeStruct memory) {\\n    bytes32 nameHash = keccak256(bytes(name_));\\n    return _fees[nameHash];\\n  }\\n\\n  function getUserLocks(address user) external view override returns (uint256[] memory) {\\n    return _userLocks[user];\\n  }\\n\\n  // Admin functions\\n  function addOrUpdateFee(\\n    string memory name_,\\n    uint256 lpFee_,\\n    uint256 collectFee_,\\n    uint256 lockFee_,\\n    address lockFeeToken_\\n  ) external override {\\n    // do nothing\\n  }\\n\\n  function removeFee(string memory name_) external override {\\n    // do nothing\\n  }\\n\\n  function updateFeeReceiver(address feeReceiver_) external override {\\n    // do nothing\\n  }\\n\\n  function updateFeeSigner(address) external override {\\n    // do nothing\\n  }\\n\\n  function addSupportedNftManager(address) external override {\\n    // do nothing\\n  }\\n\\n  function disableSig(bytes memory sig) external override {\\n    // do nothing\\n  }\\n\\n  // Core functions\\n  function lock(\\n    address nftManager_,\\n    uint256 nftId_,\\n    address owner_,\\n    address collector_,\\n    uint256 endTime_,\\n    string memory\\n  ) external payable override returns (uint256 lockId) {\\n    require(_supportedNftManagers[nftManager_], \\\"Unsupported NFT manager\\\");\\n\\n    IERC721(nftManager_).transferFrom(msg.sender, address(this), nftId_);\\n\\n    lockId = _nextLockId++;\\n    _locks[lockId] = LockInfo({\\n      lockId: lockId,\\n      nftPositionManager: nftManager_,\\n      pendingOwner: address(0),\\n      owner: owner_,\\n      collector: collector_,\\n      pool: address(0), // This would need to be set based on the NFT position\\n      collectFee: 0,\\n      nftId: nftId_,\\n      startTime: block.timestamp,\\n      endTime: endTime_\\n    });\\n\\n    _userLocks[owner_].push(lockId);\\n  }\\n\\n  function lockWithCustomFee(\\n    address nftManager_,\\n    uint256 nftId_,\\n    address owner_,\\n    address collector_,\\n    uint256 endTime_,\\n    bytes memory signature_,\\n    FeeStruct memory feeObj_\\n  ) external payable override returns (uint256 lockId) {\\n    // do nothing\\n  }\\n\\n  function transferLock(uint256, address) external override {\\n    // do nothing\\n  }\\n\\n  function acceptLock(uint256) external override {\\n    // do nothing\\n  }\\n\\n  function unlock(uint256) external override {\\n    // do nothing\\n  }\\n\\n  function relock(uint256, uint256) external override {\\n    // do nothing\\n  }\\n\\n  function collect(uint256, address, uint128, uint128)\\n    external\\n    pure\\n    override\\n    returns (uint256 amount0, uint256 amount1, uint256 fee0, uint256 fee1)\\n  {\\n    // do nothing\\n    return (0, 0, 0, 0);\\n  }\\n\\n  function setCollectAddress(uint256, address) external override {\\n    // do nothing\\n  }\\n\\n  function adminRefundEth(uint256, address payable) external override {\\n    // do nothing\\n  }\\n\\n  function adminRefundERC20(address, address, uint256) external override {\\n    // do nothing\\n  }\\n}\\n\",\"keccak256\":\"0x1666d7efd265fed78fcad3bba0aa342c08e1957022ea091aff4d5d2456363d28\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x6080604052348015600f57600080fd5b5060405161131d38038061131d833981016040819052602c916052565b6001600160a01b03166000908152600660205260409020805460ff191660011790556080565b600060208284031215606357600080fd5b81516001600160a01b0381168114607957600080fd5b9392505050565b61128e8061008f6000396000f3fe6080604052600436106101ac5760003560e01c806387d8de3d116100ec578063c69bebe41161008a578063d73792a911610064578063d73792a914610432578063ed1eee6814610448578063f0582e1414610468578063f4dadc61146104a157600080fd5b8063c69bebe4146101b1578063cdb5661f14610405578063d5fdb7321461036457600080fd5b8063b2fb30cb116100c6578063b2fb30cb146103cc578063b3f00674146103e7578063b48dd3be146103ad578063b707a288146103ad57600080fd5b806387d8de3d1461039a578063ab9ae180146103ad578063b0834893146101b157600080fd5b80632473a6b2116101595780636198e339116101335780636198e339146101d15780636518a0b3146103455780636850cb24146103645780636ec3af851461037f57600080fd5b80632473a6b2146102bb578063260e12b0146102db578063280f38671461032557600080fd5b8063100fc9431161018a578063100fc9431461022357806317d616a01461024557806323a35de91461028e57600080fd5b806306f9b07a146101b1578063093cf391146101d15780630d120331146101ec575b600080fd5b3480156101bd57600080fd5b506101cf6101cc366004610bb8565b50565b005b3480156101dd57600080fd5b506101cf6101cc366004610bdc565b3480156101f857600080fd5b506002546001600160a01b03165b6040516001600160a01b0390911681526020015b60405180910390f35b34801561022f57600080fd5b506101cf61023e366004610cca565b5050505050565b34801561025157600080fd5b5061027e610260366004610d39565b80516020918201206000908152908190526040902060010154151590565b604051901515815260200161021a565b34801561029a57600080fd5b506102ae6102a9366004610bb8565b6105ad565b60405161021a9190610d76565b3480156102c757600080fd5b5061027e6102d6366004610d39565b610619565b3480156102e757600080fd5b506103056102f6366004610dde565b50600093849350839250829150565b60408051948552602085019390935291830152606082015260800161021a565b34801561033157600080fd5b506101cf610340366004610e2d565b505050565b34801561035157600080fd5b506003545b60405190815260200161021a565b34801561037057600080fd5b506101cf6101cc366004610d39565b61035661038d366004610e6e565b6000979650505050505050565b6103566103a8366004610f8c565b610644565b3480156103b957600080fd5b506101cf6103c8366004611013565b5050565b3480156103d857600080fd5b506101cf6103c8366004611043565b3480156103f357600080fd5b506001546001600160a01b0316610206565b34801561041157600080fd5b50610425610420366004610bdc565b610957565b60405161021a9190611089565b34801561043e57600080fd5b5061035661271081565b34801561045457600080fd5b50610425610463366004610d39565b610a74565b34801561047457600080fd5b5061027e610483366004610bb8565b6001600160a01b031660009081526006602052604090205460ff1690565b3480156104ad57600080fd5b506105a06104bc366004610bdc565b6040805161014081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e081018290526101008101829052610120810191909152506000908152600460208181526040928390208351610140810185528154815260018201546001600160a01b03908116938201939093526002820154831694810194909452600381015482166060850152918201548116608084015260058201541660a0830152600681015460c0830152600781015460e083015260088101546101008301526009015461012082015290565b60405161021a91906110f9565b6001600160a01b03811660009081526007602090815260409182902080548351818402810184019094528084526060939283018282801561060d57602002820191906000526020600020905b8154815260200190600101908083116105f9575b50505050509050919050565b600060058260405161062b91906111bc565b9081526040519081900360200190205460ff1692915050565b6001600160a01b03861660009081526006602052604081205460ff166106ca576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f556e737570706f72746564204e4654206d616e61676572000000000000000000604482015260640160405180910390fd5b6040517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018790526001600160a01b038816906323b872dd90606401600060405180830381600087803b15801561073157600080fd5b505af1158015610745573d6000803e3d6000fd5b50506003805492509050600061075a836111d8565b919050559050604051806101400160405280828152602001886001600160a01b0316815260200160006001600160a01b03168152602001866001600160a01b03168152602001856001600160a01b0316815260200160006001600160a01b031681526020016000815260200187815260200142815260200184815250600460008381526020019081526020016000206000820151816000015560208201518160010160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060408201518160020160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060608201518160030160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060808201518160040160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060a08201518160050160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060c0820151816006015560e082015181600701556101008201518160080155610120820151816009015590505060076000866001600160a01b03166001600160a01b031681526020019081526020016000208190806001815401808255809150506001900390600052602060002001600090919091909150559695505050505050565b6109926040518060a001604052806060815260200160008152602001600081526020016000815260200160006001600160a01b031681525090565b60008281526020819052604090819020815160a081019092528054829082906109ba9061121e565b80601f01602080910402602001604051908101604052809291908181526020018280546109e69061121e565b8015610a335780601f10610a0857610100808354040283529160200191610a33565b820191906000526020600020905b815481529060010190602001808311610a1657829003601f168201915b50505091835250506001820154602082015260028201546040820152600382015460608201526004909101546001600160a01b031660809091015292915050565b610aaf6040518060a001604052806060815260200160008152602001600081526020016000815260200160006001600160a01b031681525090565b6000828051906020012090506000808281526020019081526020016000206040518060a0016040529081600082018054610ae89061121e565b80601f0160208091040260200160405190810160405280929190818152602001828054610b149061121e565b8015610b615780601f10610b3657610100808354040283529160200191610b61565b820191906000526020600020905b815481529060010190602001808311610b4457829003601f168201915b50505091835250506001820154602082015260028201546040820152600382015460608201526004909101546001600160a01b03166080909101529392505050565b6001600160a01b03811681146101cc57600080fd5b600060208284031215610bca57600080fd5b8135610bd581610ba3565b9392505050565b600060208284031215610bee57600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b60405160a0810167ffffffffffffffff81118282101715610c2e57610c2e610bf5565b60405290565b600082601f830112610c4557600080fd5b81356020830160008067ffffffffffffffff841115610c6657610c66610bf5565b50604051601f19601f85018116603f0116810181811067ffffffffffffffff82111715610c9557610c95610bf5565b604052838152905080828401871015610cad57600080fd5b838360208301376000602085830101528094505050505092915050565b600080600080600060a08688031215610ce257600080fd5b853567ffffffffffffffff811115610cf957600080fd5b610d0588828901610c34565b9550506020860135935060408601359250606086013591506080860135610d2b81610ba3565b809150509295509295909350565b600060208284031215610d4b57600080fd5b813567ffffffffffffffff811115610d6257600080fd5b610d6e84828501610c34565b949350505050565b602080825282518282018190526000918401906040840190835b81811015610dae578351835260209384019390920191600101610d90565b509095945050505050565b80356fffffffffffffffffffffffffffffffff81168114610dd957600080fd5b919050565b60008060008060808587031215610df457600080fd5b843593506020850135610e0681610ba3565b9250610e1460408601610db9565b9150610e2260608601610db9565b905092959194509250565b600080600060608486031215610e4257600080fd5b8335610e4d81610ba3565b92506020840135610e5d81610ba3565b929592945050506040919091013590565b600080600080600080600060e0888a031215610e8957600080fd5b8735610e9481610ba3565b9650602088013595506040880135610eab81610ba3565b94506060880135610ebb81610ba3565b93506080880135925060a088013567ffffffffffffffff811115610ede57600080fd5b610eea8a828b01610c34565b92505060c088013567ffffffffffffffff811115610f0757600080fd5b880160a0818b031215610f1957600080fd5b610f21610c0b565b813567ffffffffffffffff811115610f3857600080fd5b610f448c828501610c34565b82525060208281013590820152604080830135908201526060808301359082015260809091013590610f7582610ba3565b816080820152809250505092959891949750929550565b60008060008060008060c08789031215610fa557600080fd5b8635610fb081610ba3565b9550602087013594506040870135610fc781610ba3565b93506060870135610fd781610ba3565b92506080870135915060a087013567ffffffffffffffff811115610ffa57600080fd5b61100689828a01610c34565b9150509295509295509295565b6000806040838503121561102657600080fd5b82359150602083013561103881610ba3565b809150509250929050565b6000806040838503121561105657600080fd5b50508035926020909101359150565b60005b83811015611080578181015183820152602001611068565b50506000910152565b602081526000825160a0602084015280518060c08501526110b18160e0860160208501611065565b6020850151604085015260408501516060850152606085015160808501526001600160a01b0360808601511660a085015260e0601f19601f8301168501019250505092915050565b8151815260208083015161014083019161111d908401826001600160a01b03169052565b50604083015161113860408401826001600160a01b03169052565b50606083015161115360608401826001600160a01b03169052565b50608083015161116e60808401826001600160a01b03169052565b5060a083015161118960a08401826001600160a01b03169052565b5060c083015160c083015260e083015160e083015261010083015161010083015261012083015161012083015292915050565b600082516111ce818460208701611065565b9190910192915050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361121757634e487b7160e01b600052601160045260246000fd5b5060010190565b600181811c9082168061123257607f821691505b60208210810361125257634e487b7160e01b600052602260045260246000fd5b5091905056fea2646970667358221220a25bc4b674bd225ede3803dd6bf635370dac548f8171871752bd95ca4cb51c8564736f6c634300081c0033",
  "deployedBytecode": "0x6080604052600436106101ac5760003560e01c806387d8de3d116100ec578063c69bebe41161008a578063d73792a911610064578063d73792a914610432578063ed1eee6814610448578063f0582e1414610468578063f4dadc61146104a157600080fd5b8063c69bebe4146101b1578063cdb5661f14610405578063d5fdb7321461036457600080fd5b8063b2fb30cb116100c6578063b2fb30cb146103cc578063b3f00674146103e7578063b48dd3be146103ad578063b707a288146103ad57600080fd5b806387d8de3d1461039a578063ab9ae180146103ad578063b0834893146101b157600080fd5b80632473a6b2116101595780636198e339116101335780636198e339146101d15780636518a0b3146103455780636850cb24146103645780636ec3af851461037f57600080fd5b80632473a6b2146102bb578063260e12b0146102db578063280f38671461032557600080fd5b8063100fc9431161018a578063100fc9431461022357806317d616a01461024557806323a35de91461028e57600080fd5b806306f9b07a146101b1578063093cf391146101d15780630d120331146101ec575b600080fd5b3480156101bd57600080fd5b506101cf6101cc366004610bb8565b50565b005b3480156101dd57600080fd5b506101cf6101cc366004610bdc565b3480156101f857600080fd5b506002546001600160a01b03165b6040516001600160a01b0390911681526020015b60405180910390f35b34801561022f57600080fd5b506101cf61023e366004610cca565b5050505050565b34801561025157600080fd5b5061027e610260366004610d39565b80516020918201206000908152908190526040902060010154151590565b604051901515815260200161021a565b34801561029a57600080fd5b506102ae6102a9366004610bb8565b6105ad565b60405161021a9190610d76565b3480156102c757600080fd5b5061027e6102d6366004610d39565b610619565b3480156102e757600080fd5b506103056102f6366004610dde565b50600093849350839250829150565b60408051948552602085019390935291830152606082015260800161021a565b34801561033157600080fd5b506101cf610340366004610e2d565b505050565b34801561035157600080fd5b506003545b60405190815260200161021a565b34801561037057600080fd5b506101cf6101cc366004610d39565b61035661038d366004610e6e565b6000979650505050505050565b6103566103a8366004610f8c565b610644565b3480156103b957600080fd5b506101cf6103c8366004611013565b5050565b3480156103d857600080fd5b506101cf6103c8366004611043565b3480156103f357600080fd5b506001546001600160a01b0316610206565b34801561041157600080fd5b50610425610420366004610bdc565b610957565b60405161021a9190611089565b34801561043e57600080fd5b5061035661271081565b34801561045457600080fd5b50610425610463366004610d39565b610a74565b34801561047457600080fd5b5061027e610483366004610bb8565b6001600160a01b031660009081526006602052604090205460ff1690565b3480156104ad57600080fd5b506105a06104bc366004610bdc565b6040805161014081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e081018290526101008101829052610120810191909152506000908152600460208181526040928390208351610140810185528154815260018201546001600160a01b03908116938201939093526002820154831694810194909452600381015482166060850152918201548116608084015260058201541660a0830152600681015460c0830152600781015460e083015260088101546101008301526009015461012082015290565b60405161021a91906110f9565b6001600160a01b03811660009081526007602090815260409182902080548351818402810184019094528084526060939283018282801561060d57602002820191906000526020600020905b8154815260200190600101908083116105f9575b50505050509050919050565b600060058260405161062b91906111bc565b9081526040519081900360200190205460ff1692915050565b6001600160a01b03861660009081526006602052604081205460ff166106ca576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f556e737570706f72746564204e4654206d616e61676572000000000000000000604482015260640160405180910390fd5b6040517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018790526001600160a01b038816906323b872dd90606401600060405180830381600087803b15801561073157600080fd5b505af1158015610745573d6000803e3d6000fd5b50506003805492509050600061075a836111d8565b919050559050604051806101400160405280828152602001886001600160a01b0316815260200160006001600160a01b03168152602001866001600160a01b03168152602001856001600160a01b0316815260200160006001600160a01b031681526020016000815260200187815260200142815260200184815250600460008381526020019081526020016000206000820151816000015560208201518160010160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060408201518160020160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060608201518160030160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060808201518160040160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060a08201518160050160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060c0820151816006015560e082015181600701556101008201518160080155610120820151816009015590505060076000866001600160a01b03166001600160a01b031681526020019081526020016000208190806001815401808255809150506001900390600052602060002001600090919091909150559695505050505050565b6109926040518060a001604052806060815260200160008152602001600081526020016000815260200160006001600160a01b031681525090565b60008281526020819052604090819020815160a081019092528054829082906109ba9061121e565b80601f01602080910402602001604051908101604052809291908181526020018280546109e69061121e565b8015610a335780601f10610a0857610100808354040283529160200191610a33565b820191906000526020600020905b815481529060010190602001808311610a1657829003601f168201915b50505091835250506001820154602082015260028201546040820152600382015460608201526004909101546001600160a01b031660809091015292915050565b610aaf6040518060a001604052806060815260200160008152602001600081526020016000815260200160006001600160a01b031681525090565b6000828051906020012090506000808281526020019081526020016000206040518060a0016040529081600082018054610ae89061121e565b80601f0160208091040260200160405190810160405280929190818152602001828054610b149061121e565b8015610b615780601f10610b3657610100808354040283529160200191610b61565b820191906000526020600020905b815481529060010190602001808311610b4457829003601f168201915b50505091835250506001820154602082015260028201546040820152600382015460608201526004909101546001600160a01b03166080909101529392505050565b6001600160a01b03811681146101cc57600080fd5b600060208284031215610bca57600080fd5b8135610bd581610ba3565b9392505050565b600060208284031215610bee57600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b60405160a0810167ffffffffffffffff81118282101715610c2e57610c2e610bf5565b60405290565b600082601f830112610c4557600080fd5b81356020830160008067ffffffffffffffff841115610c6657610c66610bf5565b50604051601f19601f85018116603f0116810181811067ffffffffffffffff82111715610c9557610c95610bf5565b604052838152905080828401871015610cad57600080fd5b838360208301376000602085830101528094505050505092915050565b600080600080600060a08688031215610ce257600080fd5b853567ffffffffffffffff811115610cf957600080fd5b610d0588828901610c34565b9550506020860135935060408601359250606086013591506080860135610d2b81610ba3565b809150509295509295909350565b600060208284031215610d4b57600080fd5b813567ffffffffffffffff811115610d6257600080fd5b610d6e84828501610c34565b949350505050565b602080825282518282018190526000918401906040840190835b81811015610dae578351835260209384019390920191600101610d90565b509095945050505050565b80356fffffffffffffffffffffffffffffffff81168114610dd957600080fd5b919050565b60008060008060808587031215610df457600080fd5b843593506020850135610e0681610ba3565b9250610e1460408601610db9565b9150610e2260608601610db9565b905092959194509250565b600080600060608486031215610e4257600080fd5b8335610e4d81610ba3565b92506020840135610e5d81610ba3565b929592945050506040919091013590565b600080600080600080600060e0888a031215610e8957600080fd5b8735610e9481610ba3565b9650602088013595506040880135610eab81610ba3565b94506060880135610ebb81610ba3565b93506080880135925060a088013567ffffffffffffffff811115610ede57600080fd5b610eea8a828b01610c34565b92505060c088013567ffffffffffffffff811115610f0757600080fd5b880160a0818b031215610f1957600080fd5b610f21610c0b565b813567ffffffffffffffff811115610f3857600080fd5b610f448c828501610c34565b82525060208281013590820152604080830135908201526060808301359082015260809091013590610f7582610ba3565b816080820152809250505092959891949750929550565b60008060008060008060c08789031215610fa557600080fd5b8635610fb081610ba3565b9550602087013594506040870135610fc781610ba3565b93506060870135610fd781610ba3565b92506080870135915060a087013567ffffffffffffffff811115610ffa57600080fd5b61100689828a01610c34565b9150509295509295509295565b6000806040838503121561102657600080fd5b82359150602083013561103881610ba3565b809150509250929050565b6000806040838503121561105657600080fd5b50508035926020909101359150565b60005b83811015611080578181015183820152602001611068565b50506000910152565b602081526000825160a0602084015280518060c08501526110b18160e0860160208501611065565b6020850151604085015260408501516060850152606085015160808501526001600160a01b0360808601511660a085015260e0601f19601f8301168501019250505092915050565b8151815260208083015161014083019161111d908401826001600160a01b03169052565b50604083015161113860408401826001600160a01b03169052565b50606083015161115360608401826001600160a01b03169052565b50608083015161116e60808401826001600160a01b03169052565b5060a083015161118960a08401826001600160a01b03169052565b5060c083015160c083015260e083015160e083015261010083015161010083015261012083015161012083015292915050565b600082516111ce818460208701611065565b9190910192915050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361121757634e487b7160e01b600052601160045260246000fd5b5060010190565b600181811c9082168061123257607f821691505b60208210810361125257634e487b7160e01b600052602260045260246000fd5b5091905056fea2646970667358221220a25bc4b674bd225ede3803dd6bf635370dac548f8171871752bd95ca4cb51c8564736f6c634300081c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 21742,
        "contract": "contracts/launchpad/clmm/locker/ThenaLocker.sol:ThenaLocker",
        "label": "_fees",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(FeeStruct)16052_storage)"
      },
      {
        "astId": 21744,
        "contract": "contracts/launchpad/clmm/locker/ThenaLocker.sol:ThenaLocker",
        "label": "_feeReceiver",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 21746,
        "contract": "contracts/launchpad/clmm/locker/ThenaLocker.sol:ThenaLocker",
        "label": "_customFeeSigner",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 21748,
        "contract": "contracts/launchpad/clmm/locker/ThenaLocker.sol:ThenaLocker",
        "label": "_nextLockId",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 21753,
        "contract": "contracts/launchpad/clmm/locker/ThenaLocker.sol:ThenaLocker",
        "label": "_locks",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_struct(LockInfo)16073_storage)"
      },
      {
        "astId": 21757,
        "contract": "contracts/launchpad/clmm/locker/ThenaLocker.sol:ThenaLocker",
        "label": "_disabledSigs",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_bytes_memory_ptr,t_bool)"
      },
      {
        "astId": 21761,
        "contract": "contracts/launchpad/clmm/locker/ThenaLocker.sol:ThenaLocker",
        "label": "_supportedNftManagers",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 21766,
        "contract": "contracts/launchpad/clmm/locker/ThenaLocker.sol:ThenaLocker",
        "label": "_userLocks",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_memory_ptr": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(FeeStruct)16052_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct IGoPlusLocker.FeeStruct)",
        "numberOfBytes": "32",
        "value": "t_struct(FeeStruct)16052_storage"
      },
      "t_mapping(t_bytes_memory_ptr,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes_memory_ptr",
        "label": "mapping(bytes => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_struct(LockInfo)16073_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IGoPlusLocker.LockInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(LockInfo)16073_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(FeeStruct)16052_storage": {
        "encoding": "inplace",
        "label": "struct IGoPlusLocker.FeeStruct",
        "members": [
          {
            "astId": 16043,
            "contract": "contracts/launchpad/clmm/locker/ThenaLocker.sol:ThenaLocker",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 16045,
            "contract": "contracts/launchpad/clmm/locker/ThenaLocker.sol:ThenaLocker",
            "label": "lpFee",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 16047,
            "contract": "contracts/launchpad/clmm/locker/ThenaLocker.sol:ThenaLocker",
            "label": "collectFee",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 16049,
            "contract": "contracts/launchpad/clmm/locker/ThenaLocker.sol:ThenaLocker",
            "label": "lockFee",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 16051,
            "contract": "contracts/launchpad/clmm/locker/ThenaLocker.sol:ThenaLocker",
            "label": "lockFeeToken",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(LockInfo)16073_storage": {
        "encoding": "inplace",
        "label": "struct IGoPlusLocker.LockInfo",
        "members": [
          {
            "astId": 16054,
            "contract": "contracts/launchpad/clmm/locker/ThenaLocker.sol:ThenaLocker",
            "label": "lockId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 16056,
            "contract": "contracts/launchpad/clmm/locker/ThenaLocker.sol:ThenaLocker",
            "label": "nftPositionManager",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 16058,
            "contract": "contracts/launchpad/clmm/locker/ThenaLocker.sol:ThenaLocker",
            "label": "pendingOwner",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 16060,
            "contract": "contracts/launchpad/clmm/locker/ThenaLocker.sol:ThenaLocker",
            "label": "owner",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 16062,
            "contract": "contracts/launchpad/clmm/locker/ThenaLocker.sol:ThenaLocker",
            "label": "collector",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 16064,
            "contract": "contracts/launchpad/clmm/locker/ThenaLocker.sol:ThenaLocker",
            "label": "pool",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          },
          {
            "astId": 16066,
            "contract": "contracts/launchpad/clmm/locker/ThenaLocker.sol:ThenaLocker",
            "label": "collectFee",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 16068,
            "contract": "contracts/launchpad/clmm/locker/ThenaLocker.sol:ThenaLocker",
            "label": "nftId",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 16070,
            "contract": "contracts/launchpad/clmm/locker/ThenaLocker.sol:ThenaLocker",
            "label": "startTime",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 16072,
            "contract": "contracts/launchpad/clmm/locker/ThenaLocker.sol:ThenaLocker",
            "label": "endTime",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}