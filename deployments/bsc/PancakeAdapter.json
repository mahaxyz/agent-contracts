{
  "address": "0x3aFBD987b75a78e8f9D7aEFe37f0CB256Bbe8091",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_launchpad",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_poolFactory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_swapRouter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_WETH9",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_locker",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_nftPositionManager",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WETH9",
      "outputs": [
        {
          "internalType": "contract IWETH9",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "contract IERC20",
              "name": "tokenBase",
              "type": "address"
            },
            {
              "internalType": "contract IERC20",
              "name": "tokenQuote",
              "type": "address"
            },
            {
              "internalType": "int24",
              "name": "tick0",
              "type": "int24"
            },
            {
              "internalType": "int24",
              "name": "tick1",
              "type": "int24"
            },
            {
              "internalType": "int24",
              "name": "tick2",
              "type": "int24"
            },
            {
              "internalType": "uint24",
              "name": "fee",
              "type": "uint24"
            },
            {
              "internalType": "int24",
              "name": "tickSpacing",
              "type": "int24"
            },
            {
              "internalType": "uint256",
              "name": "totalAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "graduationAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct ICLMMAdapter.AddLiquidityParams",
          "name": "_params",
          "type": "tuple"
        }
      ],
      "name": "addSingleSidedLiquidity",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "clPoolFactory",
      "outputs": [
        {
          "internalType": "contract IClPoolFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "claimFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "fee0",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fee1",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "launchpad",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "locker",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nftPositionManager",
      "outputs": [
        {
          "internalType": "contract IERC721",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapRouter",
      "outputs": [
        {
          "internalType": "contract ICLSwapRouter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_tokenIn",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minAmountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint24",
          "name": "_fee",
          "type": "uint24"
        }
      ],
      "name": "swapWithExactInput",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_tokenIn",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxAmountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint24",
          "name": "_fee",
          "type": "uint24"
        }
      ],
      "name": "swapWithExactOutput",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenToLockId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "lockId",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x04152d4af02bf9e0063207957b966aaa27107ccdffedf967527e7d241ba1f3c1",
  "receipt": {
    "to": null,
    "from": "0x1F09Ec21d7fd0A21879b919bf0f9C46e6b85CA8b",
    "contractAddress": "0x3aFBD987b75a78e8f9D7aEFe37f0CB256Bbe8091",
    "transactionIndex": 58,
    "gasUsed": "1562448",
    "logsBloom": "0x
    "blockHash": "0xa1f0368d4b94233dfdc72df24fee7c285fdf1f46db81f7d36571faf6d2bd1d60",
    "transactionHash": "0x04152d4af02bf9e0063207957b966aaa27107ccdffedf967527e7d241ba1f3c1",
    "logs": [
      {
        "transactionIndex": 58,
        "blockNumber": 48955477,
        "transactionHash": "0x04152d4af02bf9e0063207957b966aaa27107ccdffedf967527e7d241ba1f3c1",
        "address": "0x46A15B0b27311cedF172AB29E4f4766fbE7F4364",
        "topics": [
          "0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31",
          "0x0000000000000000000000003afbd987b75a78e8f9d7aefe37f0cb256bbe8091",
          "0x00000000000000000000000025c9c4b56e820e0dea438b145284f02d9ca9bd52"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 608,
        "blockHash": "0xa1f0368d4b94233dfdc72df24fee7c285fdf1f46db81f7d36571faf6d2bd1d60"
      }
    ],
    "blockNumber": 48955477,
    "cumulativeGasUsed": "20396555",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xc6A671a7f5ed641c2f7aB7E2d2F587d671a5A637",
    "0x0BFbCF9fa4f9C56B0F40a671Ad40E0805A091865",
    "0x1b81D678ffb9C0263b24A97847620C99d213eB14",
    "0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c",
    "0x25c9C4B56E820e0DEA438b145284F02D9Ca9Bd52",
    "0x46A15B0b27311cedF172AB29E4f4766fbE7F4364"
  ],
  "numDeployments": 1,
  "solcInputHash": "ca01714a7490eb550412d5b46b9ffc17",
  "metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_launchpad\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_poolFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_swapRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_WETH9\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_locker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nftPositionManager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WETH9\",\"outputs\":[{\"internalType\":\"contract IWETH9\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenBase\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"tokenQuote\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"tick0\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tick1\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tick2\",\"type\":\"int24\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"int24\",\"name\":\"tickSpacing\",\"type\":\"int24\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"graduationAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct ICLMMAdapter.AddLiquidityParams\",\"name\":\"_params\",\"type\":\"tuple\"}],\"name\":\"addSingleSidedLiquidity\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clPoolFactory\",\"outputs\":[{\"internalType\":\"contract IClPoolFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"claimFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fee0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchpad\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"locker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftPositionManager\",\"outputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapRouter\",\"outputs\":[{\"internalType\":\"contract ICLSwapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint24\",\"name\":\"_fee\",\"type\":\"uint24\"}],\"name\":\"swapWithExactInput\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint24\",\"name\":\"_fee\",\"type\":\"uint24\"}],\"name\":\"swapWithExactOutput\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenToLockId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"errors\":{\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC-20 token failed.\"}]},\"kind\":\"dev\",\"methods\":{\"addSingleSidedLiquidity((address,address,int24,int24,int24,uint24,int24,uint256,uint256))\":{\"details\":\"Provides liquidity across three ticks with different amounts\",\"returns\":{\"_0\":\"The address of the pool\"}},\"claimFees(address)\":{\"params\":{\"_token\":\"The token address to claim fees for\"},\"returns\":{\"fee0\":\"The amount of token0 fees to claim\",\"fee1\":\"The amount of token1 fees to claim\"}},\"swapWithExactInput(address,address,uint256,uint256,uint24)\":{\"params\":{\"_amountIn\":\"The amount of tokens to swap\",\"_minAmountOut\":\"The minimum amount of tokens to receive\",\"_tokenIn\":\"The token to swap\",\"_tokenOut\":\"The token to receive\"},\"returns\":{\"amountOut\":\"The amount of tokens received\"}},\"swapWithExactOutput(address,address,uint256,uint256,uint24)\":{\"params\":{\"_amountOut\":\"The amount of tokens to swap\",\"_maxAmountIn\":\"The maximum amount of tokens to receive\",\"_tokenIn\":\"The token to swap\",\"_tokenOut\":\"The token to receive\"},\"returns\":{\"amountIn\":\"The amount of tokens received\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addSingleSidedLiquidity((address,address,int24,int24,int24,uint24,int24,uint256,uint256))\":{\"notice\":\"Add single-sided liquidity to a concentrated pool\"},\"claimFees(address)\":{\"notice\":\"Claim accumulated fees from the pool\"},\"launchpad()\":{\"notice\":\"Returns the address of the Launchpad contract\"},\"swapWithExactInput(address,address,uint256,uint256,uint24)\":{\"notice\":\"Swap a token with exact input\"},\"swapWithExactOutput(address,address,uint256,uint256,uint24)\":{\"notice\":\"Swap a token with exact output\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/launchpad/clmm/adapters/PancakeAdapter.sol\":\"PancakeAdapter\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC1363.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC1363.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @title IERC1363\\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\\n *\\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\\n */\\ninterface IERC1363 is IERC20, IERC165 {\\n    /*\\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\\n     * 0xb0202a11 ===\\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\\n     */\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @param data Additional data with no specified format, sent in call to `spender`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9b6b3e7803bc5f2f8cd7ad57db8ac1def61a9930a5a3107df4882e028a9605d7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0xce41876e78d1badc0512229b4d14e4daf83bc1003d7f83978d18e0e56f965b9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC-20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x70f2f713b13b7ce4610bcd0ac9fec0f3cc43693b043abcb8dc40a42a726eb330\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC1363} from \\\"../../../interfaces/IERC1363.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    /**\\n     * @dev An operation with an ERC-20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     *\\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\\n     * only sets the \\\"standard\\\" allowance. Any temporary allowance will remain active, in addition to the value being\\n     * set here.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            safeTransfer(token, to, value);\\n        } else if (!token.transferAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferFromAndCallRelaxed(\\n        IERC1363 token,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length == 0) {\\n            safeTransferFrom(token, from, to, value);\\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\\n     * once without retrying, and relies on the returned value to be true.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            forceApprove(token, to, value);\\n        } else if (!token.approveAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            // bubble errors\\n            if iszero(success) {\\n                let ptr := mload(0x40)\\n                returndatacopy(ptr, 0, returndatasize())\\n                revert(ptr, returndatasize())\\n            }\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n\\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\\n    }\\n}\\n\",\"keccak256\":\"0x4ea01544758fd2c7045961904686bfe232d2220a04ecaa2d6b08dac17827febf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC-721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC-721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC-721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5dc63d1c6a12fe1b17793e1745877b2fcbe1964c3edfd0a482fac21ca8f18261\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\"},\"@uniswap/v4-core/src/interfaces/IExtsload.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @notice Interface for functions to access any storage slot in a contract\\ninterface IExtsload {\\n    /// @notice Called by external contracts to access granular pool state\\n    /// @param slot Key of slot to sload\\n    /// @return value The value of the slot as bytes32\\n    function extsload(bytes32 slot) external view returns (bytes32 value);\\n\\n    /// @notice Called by external contracts to access granular pool state\\n    /// @param startSlot Key of slot to start sloading from\\n    /// @param nSlots Number of slots to load into return value\\n    /// @return values List of loaded values.\\n    function extsload(bytes32 startSlot, uint256 nSlots) external view returns (bytes32[] memory values);\\n\\n    /// @notice Called by external contracts to access sparse pool state\\n    /// @param slots List of slots to SLOAD from.\\n    /// @return values List of loaded values.\\n    function extsload(bytes32[] calldata slots) external view returns (bytes32[] memory values);\\n}\\n\",\"keccak256\":\"0x80b53ca4907d6f0088c3b931f2b72cad1dc4615a95094d96bd0fb8dff8d5ba43\",\"license\":\"MIT\"},\"@uniswap/v4-core/src/interfaces/IExttload.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @notice Interface for functions to access any transient storage slot in a contract\\ninterface IExttload {\\n    /// @notice Called by external contracts to access transient storage of the contract\\n    /// @param slot Key of slot to tload\\n    /// @return value The value of the slot as bytes32\\n    function exttload(bytes32 slot) external view returns (bytes32 value);\\n\\n    /// @notice Called by external contracts to access sparse transient pool state\\n    /// @param slots List of slots to tload\\n    /// @return values List of loaded values\\n    function exttload(bytes32[] calldata slots) external view returns (bytes32[] memory values);\\n}\\n\",\"keccak256\":\"0xc6b68283ebd8d1c789df536756726eed51c589134bb20821b236a0d22a135937\",\"license\":\"MIT\"},\"@uniswap/v4-core/src/interfaces/IHooks.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {PoolKey} from \\\"../types/PoolKey.sol\\\";\\nimport {BalanceDelta} from \\\"../types/BalanceDelta.sol\\\";\\nimport {IPoolManager} from \\\"./IPoolManager.sol\\\";\\nimport {BeforeSwapDelta} from \\\"../types/BeforeSwapDelta.sol\\\";\\n\\n/// @notice V4 decides whether to invoke specific hooks by inspecting the least significant bits\\n/// of the address that the hooks contract is deployed to.\\n/// For example, a hooks contract deployed to address: 0x0000000000000000000000000000000000002400\\n/// has the lowest bits '10 0100 0000 0000' which would cause the 'before initialize' and 'after add liquidity' hooks to be used.\\n/// See the Hooks library for the full spec.\\n/// @dev Should only be callable by the v4 PoolManager.\\ninterface IHooks {\\n    /// @notice The hook called before the state of a pool is initialized\\n    /// @param sender The initial msg.sender for the initialize call\\n    /// @param key The key for the pool being initialized\\n    /// @param sqrtPriceX96 The sqrt(price) of the pool as a Q64.96\\n    /// @return bytes4 The function selector for the hook\\n    function beforeInitialize(address sender, PoolKey calldata key, uint160 sqrtPriceX96) external returns (bytes4);\\n\\n    /// @notice The hook called after the state of a pool is initialized\\n    /// @param sender The initial msg.sender for the initialize call\\n    /// @param key The key for the pool being initialized\\n    /// @param sqrtPriceX96 The sqrt(price) of the pool as a Q64.96\\n    /// @param tick The current tick after the state of a pool is initialized\\n    /// @return bytes4 The function selector for the hook\\n    function afterInitialize(address sender, PoolKey calldata key, uint160 sqrtPriceX96, int24 tick)\\n        external\\n        returns (bytes4);\\n\\n    /// @notice The hook called before liquidity is added\\n    /// @param sender The initial msg.sender for the add liquidity call\\n    /// @param key The key for the pool\\n    /// @param params The parameters for adding liquidity\\n    /// @param hookData Arbitrary data handed into the PoolManager by the liquidity provider to be passed on to the hook\\n    /// @return bytes4 The function selector for the hook\\n    function beforeAddLiquidity(\\n        address sender,\\n        PoolKey calldata key,\\n        IPoolManager.ModifyLiquidityParams calldata params,\\n        bytes calldata hookData\\n    ) external returns (bytes4);\\n\\n    /// @notice The hook called after liquidity is added\\n    /// @param sender The initial msg.sender for the add liquidity call\\n    /// @param key The key for the pool\\n    /// @param params The parameters for adding liquidity\\n    /// @param delta The caller's balance delta after adding liquidity; the sum of principal delta, fees accrued, and hook delta\\n    /// @param feesAccrued The fees accrued since the last time fees were collected from this position\\n    /// @param hookData Arbitrary data handed into the PoolManager by the liquidity provider to be passed on to the hook\\n    /// @return bytes4 The function selector for the hook\\n    /// @return BalanceDelta The hook's delta in token0 and token1. Positive: the hook is owed/took currency, negative: the hook owes/sent currency\\n    function afterAddLiquidity(\\n        address sender,\\n        PoolKey calldata key,\\n        IPoolManager.ModifyLiquidityParams calldata params,\\n        BalanceDelta delta,\\n        BalanceDelta feesAccrued,\\n        bytes calldata hookData\\n    ) external returns (bytes4, BalanceDelta);\\n\\n    /// @notice The hook called before liquidity is removed\\n    /// @param sender The initial msg.sender for the remove liquidity call\\n    /// @param key The key for the pool\\n    /// @param params The parameters for removing liquidity\\n    /// @param hookData Arbitrary data handed into the PoolManager by the liquidity provider to be be passed on to the hook\\n    /// @return bytes4 The function selector for the hook\\n    function beforeRemoveLiquidity(\\n        address sender,\\n        PoolKey calldata key,\\n        IPoolManager.ModifyLiquidityParams calldata params,\\n        bytes calldata hookData\\n    ) external returns (bytes4);\\n\\n    /// @notice The hook called after liquidity is removed\\n    /// @param sender The initial msg.sender for the remove liquidity call\\n    /// @param key The key for the pool\\n    /// @param params The parameters for removing liquidity\\n    /// @param delta The caller's balance delta after removing liquidity; the sum of principal delta, fees accrued, and hook delta\\n    /// @param feesAccrued The fees accrued since the last time fees were collected from this position\\n    /// @param hookData Arbitrary data handed into the PoolManager by the liquidity provider to be be passed on to the hook\\n    /// @return bytes4 The function selector for the hook\\n    /// @return BalanceDelta The hook's delta in token0 and token1. Positive: the hook is owed/took currency, negative: the hook owes/sent currency\\n    function afterRemoveLiquidity(\\n        address sender,\\n        PoolKey calldata key,\\n        IPoolManager.ModifyLiquidityParams calldata params,\\n        BalanceDelta delta,\\n        BalanceDelta feesAccrued,\\n        bytes calldata hookData\\n    ) external returns (bytes4, BalanceDelta);\\n\\n    /// @notice The hook called before a swap\\n    /// @param sender The initial msg.sender for the swap call\\n    /// @param key The key for the pool\\n    /// @param params The parameters for the swap\\n    /// @param hookData Arbitrary data handed into the PoolManager by the swapper to be be passed on to the hook\\n    /// @return bytes4 The function selector for the hook\\n    /// @return BeforeSwapDelta The hook's delta in specified and unspecified currencies. Positive: the hook is owed/took currency, negative: the hook owes/sent currency\\n    /// @return uint24 Optionally override the lp fee, only used if three conditions are met: 1. the Pool has a dynamic fee, 2. the value's 2nd highest bit is set (23rd bit, 0x400000), and 3. the value is less than or equal to the maximum fee (1 million)\\n    function beforeSwap(\\n        address sender,\\n        PoolKey calldata key,\\n        IPoolManager.SwapParams calldata params,\\n        bytes calldata hookData\\n    ) external returns (bytes4, BeforeSwapDelta, uint24);\\n\\n    /// @notice The hook called after a swap\\n    /// @param sender The initial msg.sender for the swap call\\n    /// @param key The key for the pool\\n    /// @param params The parameters for the swap\\n    /// @param delta The amount owed to the caller (positive) or owed to the pool (negative)\\n    /// @param hookData Arbitrary data handed into the PoolManager by the swapper to be be passed on to the hook\\n    /// @return bytes4 The function selector for the hook\\n    /// @return int128 The hook's delta in unspecified currency. Positive: the hook is owed/took currency, negative: the hook owes/sent currency\\n    function afterSwap(\\n        address sender,\\n        PoolKey calldata key,\\n        IPoolManager.SwapParams calldata params,\\n        BalanceDelta delta,\\n        bytes calldata hookData\\n    ) external returns (bytes4, int128);\\n\\n    /// @notice The hook called before donate\\n    /// @param sender The initial msg.sender for the donate call\\n    /// @param key The key for the pool\\n    /// @param amount0 The amount of token0 being donated\\n    /// @param amount1 The amount of token1 being donated\\n    /// @param hookData Arbitrary data handed into the PoolManager by the donor to be be passed on to the hook\\n    /// @return bytes4 The function selector for the hook\\n    function beforeDonate(\\n        address sender,\\n        PoolKey calldata key,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bytes calldata hookData\\n    ) external returns (bytes4);\\n\\n    /// @notice The hook called after donate\\n    /// @param sender The initial msg.sender for the donate call\\n    /// @param key The key for the pool\\n    /// @param amount0 The amount of token0 being donated\\n    /// @param amount1 The amount of token1 being donated\\n    /// @param hookData Arbitrary data handed into the PoolManager by the donor to be be passed on to the hook\\n    /// @return bytes4 The function selector for the hook\\n    function afterDonate(\\n        address sender,\\n        PoolKey calldata key,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bytes calldata hookData\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x4c9571aed0c2b6ef11832545554fc11ffdb03746daaf5c73683c00600bfc7ec0\",\"license\":\"MIT\"},\"@uniswap/v4-core/src/interfaces/IPoolManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {Currency} from \\\"../types/Currency.sol\\\";\\nimport {PoolKey} from \\\"../types/PoolKey.sol\\\";\\nimport {IHooks} from \\\"./IHooks.sol\\\";\\nimport {IERC6909Claims} from \\\"./external/IERC6909Claims.sol\\\";\\nimport {IProtocolFees} from \\\"./IProtocolFees.sol\\\";\\nimport {BalanceDelta} from \\\"../types/BalanceDelta.sol\\\";\\nimport {PoolId} from \\\"../types/PoolId.sol\\\";\\nimport {IExtsload} from \\\"./IExtsload.sol\\\";\\nimport {IExttload} from \\\"./IExttload.sol\\\";\\n\\n/// @notice Interface for the PoolManager\\ninterface IPoolManager is IProtocolFees, IERC6909Claims, IExtsload, IExttload {\\n    /// @notice Thrown when a currency is not netted out after the contract is unlocked\\n    error CurrencyNotSettled();\\n\\n    /// @notice Thrown when trying to interact with a non-initialized pool\\n    error PoolNotInitialized();\\n\\n    /// @notice Thrown when unlock is called, but the contract is already unlocked\\n    error AlreadyUnlocked();\\n\\n    /// @notice Thrown when a function is called that requires the contract to be unlocked, but it is not\\n    error ManagerLocked();\\n\\n    /// @notice Pools are limited to type(int16).max tickSpacing in #initialize, to prevent overflow\\n    error TickSpacingTooLarge(int24 tickSpacing);\\n\\n    /// @notice Pools must have a positive non-zero tickSpacing passed to #initialize\\n    error TickSpacingTooSmall(int24 tickSpacing);\\n\\n    /// @notice PoolKey must have currencies where address(currency0) < address(currency1)\\n    error CurrenciesOutOfOrderOrEqual(address currency0, address currency1);\\n\\n    /// @notice Thrown when a call to updateDynamicLPFee is made by an address that is not the hook,\\n    /// or on a pool that does not have a dynamic swap fee.\\n    error UnauthorizedDynamicLPFeeUpdate();\\n\\n    /// @notice Thrown when trying to swap amount of 0\\n    error SwapAmountCannotBeZero();\\n\\n    ///@notice Thrown when native currency is passed to a non native settlement\\n    error NonzeroNativeValue();\\n\\n    /// @notice Thrown when `clear` is called with an amount that is not exactly equal to the open currency delta.\\n    error MustClearExactPositiveDelta();\\n\\n    /// @notice Emitted when a new pool is initialized\\n    /// @param id The abi encoded hash of the pool key struct for the new pool\\n    /// @param currency0 The first currency of the pool by address sort order\\n    /// @param currency1 The second currency of the pool by address sort order\\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\\n    /// @param tickSpacing The minimum number of ticks between initialized ticks\\n    /// @param hooks The hooks contract address for the pool, or address(0) if none\\n    /// @param sqrtPriceX96 The price of the pool on initialization\\n    /// @param tick The initial tick of the pool corresponding to the initialized price\\n    event Initialize(\\n        PoolId indexed id,\\n        Currency indexed currency0,\\n        Currency indexed currency1,\\n        uint24 fee,\\n        int24 tickSpacing,\\n        IHooks hooks,\\n        uint160 sqrtPriceX96,\\n        int24 tick\\n    );\\n\\n    /// @notice Emitted when a liquidity position is modified\\n    /// @param id The abi encoded hash of the pool key struct for the pool that was modified\\n    /// @param sender The address that modified the pool\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param liquidityDelta The amount of liquidity that was added or removed\\n    /// @param salt The extra data to make positions unique\\n    event ModifyLiquidity(\\n        PoolId indexed id, address indexed sender, int24 tickLower, int24 tickUpper, int256 liquidityDelta, bytes32 salt\\n    );\\n\\n    /// @notice Emitted for swaps between currency0 and currency1\\n    /// @param id The abi encoded hash of the pool key struct for the pool that was modified\\n    /// @param sender The address that initiated the swap call, and that received the callback\\n    /// @param amount0 The delta of the currency0 balance of the pool\\n    /// @param amount1 The delta of the currency1 balance of the pool\\n    /// @param sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96\\n    /// @param liquidity The liquidity of the pool after the swap\\n    /// @param tick The log base 1.0001 of the price of the pool after the swap\\n    /// @param fee The swap fee in hundredths of a bip\\n    event Swap(\\n        PoolId indexed id,\\n        address indexed sender,\\n        int128 amount0,\\n        int128 amount1,\\n        uint160 sqrtPriceX96,\\n        uint128 liquidity,\\n        int24 tick,\\n        uint24 fee\\n    );\\n\\n    /// @notice Emitted for donations\\n    /// @param id The abi encoded hash of the pool key struct for the pool that was donated to\\n    /// @param sender The address that initiated the donate call\\n    /// @param amount0 The amount donated in currency0\\n    /// @param amount1 The amount donated in currency1\\n    event Donate(PoolId indexed id, address indexed sender, uint256 amount0, uint256 amount1);\\n\\n    /// @notice All interactions on the contract that account deltas require unlocking. A caller that calls `unlock` must implement\\n    /// `IUnlockCallback(msg.sender).unlockCallback(data)`, where they interact with the remaining functions on this contract.\\n    /// @dev The only functions callable without an unlocking are `initialize` and `updateDynamicLPFee`\\n    /// @param data Any data to pass to the callback, via `IUnlockCallback(msg.sender).unlockCallback(data)`\\n    /// @return The data returned by the call to `IUnlockCallback(msg.sender).unlockCallback(data)`\\n    function unlock(bytes calldata data) external returns (bytes memory);\\n\\n    /// @notice Initialize the state for a given pool ID\\n    /// @dev A swap fee totaling MAX_SWAP_FEE (100%) makes exact output swaps impossible since the input is entirely consumed by the fee\\n    /// @param key The pool key for the pool to initialize\\n    /// @param sqrtPriceX96 The initial square root price\\n    /// @return tick The initial tick of the pool\\n    function initialize(PoolKey memory key, uint160 sqrtPriceX96) external returns (int24 tick);\\n\\n    struct ModifyLiquidityParams {\\n        // the lower and upper tick of the position\\n        int24 tickLower;\\n        int24 tickUpper;\\n        // how to modify the liquidity\\n        int256 liquidityDelta;\\n        // a value to set if you want unique liquidity positions at the same range\\n        bytes32 salt;\\n    }\\n\\n    /// @notice Modify the liquidity for the given pool\\n    /// @dev Poke by calling with a zero liquidityDelta\\n    /// @param key The pool to modify liquidity in\\n    /// @param params The parameters for modifying the liquidity\\n    /// @param hookData The data to pass through to the add/removeLiquidity hooks\\n    /// @return callerDelta The balance delta of the caller of modifyLiquidity. This is the total of both principal, fee deltas, and hook deltas if applicable\\n    /// @return feesAccrued The balance delta of the fees generated in the liquidity range. Returned for informational purposes\\n    /// @dev Note that feesAccrued can be artificially inflated by a malicious actor and integrators should be careful using the value\\n    /// For pools with a single liquidity position, actors can donate to themselves to inflate feeGrowthGlobal (and consequently feesAccrued)\\n    /// atomically donating and collecting fees in the same unlockCallback may make the inflated value more extreme\\n    function modifyLiquidity(PoolKey memory key, ModifyLiquidityParams memory params, bytes calldata hookData)\\n        external\\n        returns (BalanceDelta callerDelta, BalanceDelta feesAccrued);\\n\\n    struct SwapParams {\\n        /// Whether to swap token0 for token1 or vice versa\\n        bool zeroForOne;\\n        /// The desired input amount if negative (exactIn), or the desired output amount if positive (exactOut)\\n        int256 amountSpecified;\\n        /// The sqrt price at which, if reached, the swap will stop executing\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swap against the given pool\\n    /// @param key The pool to swap in\\n    /// @param params The parameters for swapping\\n    /// @param hookData The data to pass through to the swap hooks\\n    /// @return swapDelta The balance delta of the address swapping\\n    /// @dev Swapping on low liquidity pools may cause unexpected swap amounts when liquidity available is less than amountSpecified.\\n    /// Additionally note that if interacting with hooks that have the BEFORE_SWAP_RETURNS_DELTA_FLAG or AFTER_SWAP_RETURNS_DELTA_FLAG\\n    /// the hook may alter the swap input/output. Integrators should perform checks on the returned swapDelta.\\n    function swap(PoolKey memory key, SwapParams memory params, bytes calldata hookData)\\n        external\\n        returns (BalanceDelta swapDelta);\\n\\n    /// @notice Donate the given currency amounts to the in-range liquidity providers of a pool\\n    /// @dev Calls to donate can be frontrun adding just-in-time liquidity, with the aim of receiving a portion donated funds.\\n    /// Donors should keep this in mind when designing donation mechanisms.\\n    /// @dev This function donates to in-range LPs at slot0.tick. In certain edge-cases of the swap algorithm, the `sqrtPrice` of\\n    /// a pool can be at the lower boundary of tick `n`, but the `slot0.tick` of the pool is already `n - 1`. In this case a call to\\n    /// `donate` would donate to tick `n - 1` (slot0.tick) not tick `n` (getTickAtSqrtPrice(slot0.sqrtPriceX96)).\\n    /// Read the comments in `Pool.swap()` for more information about this.\\n    /// @param key The key of the pool to donate to\\n    /// @param amount0 The amount of currency0 to donate\\n    /// @param amount1 The amount of currency1 to donate\\n    /// @param hookData The data to pass through to the donate hooks\\n    /// @return BalanceDelta The delta of the caller after the donate\\n    function donate(PoolKey memory key, uint256 amount0, uint256 amount1, bytes calldata hookData)\\n        external\\n        returns (BalanceDelta);\\n\\n    /// @notice Writes the current ERC20 balance of the specified currency to transient storage\\n    /// This is used to checkpoint balances for the manager and derive deltas for the caller.\\n    /// @dev This MUST be called before any ERC20 tokens are sent into the contract, but can be skipped\\n    /// for native tokens because the amount to settle is determined by the sent value.\\n    /// However, if an ERC20 token has been synced and not settled, and the caller instead wants to settle\\n    /// native funds, this function can be called with the native currency to then be able to settle the native currency\\n    function sync(Currency currency) external;\\n\\n    /// @notice Called by the user to net out some value owed to the user\\n    /// @dev Will revert if the requested amount is not available, consider using `mint` instead\\n    /// @dev Can also be used as a mechanism for free flash loans\\n    /// @param currency The currency to withdraw from the pool manager\\n    /// @param to The address to withdraw to\\n    /// @param amount The amount of currency to withdraw\\n    function take(Currency currency, address to, uint256 amount) external;\\n\\n    /// @notice Called by the user to pay what is owed\\n    /// @return paid The amount of currency settled\\n    function settle() external payable returns (uint256 paid);\\n\\n    /// @notice Called by the user to pay on behalf of another address\\n    /// @param recipient The address to credit for the payment\\n    /// @return paid The amount of currency settled\\n    function settleFor(address recipient) external payable returns (uint256 paid);\\n\\n    /// @notice WARNING - Any currency that is cleared, will be non-retrievable, and locked in the contract permanently.\\n    /// A call to clear will zero out a positive balance WITHOUT a corresponding transfer.\\n    /// @dev This could be used to clear a balance that is considered dust.\\n    /// Additionally, the amount must be the exact positive balance. This is to enforce that the caller is aware of the amount being cleared.\\n    function clear(Currency currency, uint256 amount) external;\\n\\n    /// @notice Called by the user to move value into ERC6909 balance\\n    /// @param to The address to mint the tokens to\\n    /// @param id The currency address to mint to ERC6909s, as a uint256\\n    /// @param amount The amount of currency to mint\\n    /// @dev The id is converted to a uint160 to correspond to a currency address\\n    /// If the upper 12 bytes are not 0, they will be 0-ed out\\n    function mint(address to, uint256 id, uint256 amount) external;\\n\\n    /// @notice Called by the user to move value from ERC6909 balance\\n    /// @param from The address to burn the tokens from\\n    /// @param id The currency address to burn from ERC6909s, as a uint256\\n    /// @param amount The amount of currency to burn\\n    /// @dev The id is converted to a uint160 to correspond to a currency address\\n    /// If the upper 12 bytes are not 0, they will be 0-ed out\\n    function burn(address from, uint256 id, uint256 amount) external;\\n\\n    /// @notice Updates the pools lp fees for the a pool that has enabled dynamic lp fees.\\n    /// @dev A swap fee totaling MAX_SWAP_FEE (100%) makes exact output swaps impossible since the input is entirely consumed by the fee\\n    /// @param key The key of the pool to update dynamic LP fees for\\n    /// @param newDynamicLPFee The new dynamic pool LP fee\\n    function updateDynamicLPFee(PoolKey memory key, uint24 newDynamicLPFee) external;\\n}\\n\",\"keccak256\":\"0x3534f00531038e77ab8a7fc4d0a6e0993ee53fb7a396b1324ad917318ea46cea\",\"license\":\"MIT\"},\"@uniswap/v4-core/src/interfaces/IProtocolFees.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {Currency} from \\\"../types/Currency.sol\\\";\\nimport {PoolId} from \\\"../types/PoolId.sol\\\";\\nimport {PoolKey} from \\\"../types/PoolKey.sol\\\";\\n\\n/// @notice Interface for all protocol-fee related functions in the pool manager\\ninterface IProtocolFees {\\n    /// @notice Thrown when protocol fee is set too high\\n    error ProtocolFeeTooLarge(uint24 fee);\\n\\n    /// @notice Thrown when collectProtocolFees or setProtocolFee is not called by the controller.\\n    error InvalidCaller();\\n\\n    /// @notice Thrown when collectProtocolFees is attempted on a token that is synced.\\n    error ProtocolFeeCurrencySynced();\\n\\n    /// @notice Emitted when the protocol fee controller address is updated in setProtocolFeeController.\\n    event ProtocolFeeControllerUpdated(address indexed protocolFeeController);\\n\\n    /// @notice Emitted when the protocol fee is updated for a pool.\\n    event ProtocolFeeUpdated(PoolId indexed id, uint24 protocolFee);\\n\\n    /// @notice Given a currency address, returns the protocol fees accrued in that currency\\n    /// @param currency The currency to check\\n    /// @return amount The amount of protocol fees accrued in the currency\\n    function protocolFeesAccrued(Currency currency) external view returns (uint256 amount);\\n\\n    /// @notice Sets the protocol fee for the given pool\\n    /// @param key The key of the pool to set a protocol fee for\\n    /// @param newProtocolFee The fee to set\\n    function setProtocolFee(PoolKey memory key, uint24 newProtocolFee) external;\\n\\n    /// @notice Sets the protocol fee controller\\n    /// @param controller The new protocol fee controller\\n    function setProtocolFeeController(address controller) external;\\n\\n    /// @notice Collects the protocol fees for a given recipient and currency, returning the amount collected\\n    /// @dev This will revert if the contract is unlocked\\n    /// @param recipient The address to receive the protocol fees\\n    /// @param currency The currency to withdraw\\n    /// @param amount The amount of currency to withdraw\\n    /// @return amountCollected The amount of currency successfully withdrawn\\n    function collectProtocolFees(address recipient, Currency currency, uint256 amount)\\n        external\\n        returns (uint256 amountCollected);\\n\\n    /// @notice Returns the current protocol fee controller address\\n    /// @return address The current protocol fee controller address\\n    function protocolFeeController() external view returns (address);\\n}\\n\",\"keccak256\":\"0x32a666e588a2f66334430357bb1e2424fe7eebeb98a3364b1dd16eb6ccca9848\",\"license\":\"MIT\"},\"@uniswap/v4-core/src/interfaces/external/IERC20Minimal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @title Minimal ERC20 interface for Uniswap\\n/// @notice Contains a subset of the full ERC20 interface that is used in Uniswap V3\\ninterface IERC20Minimal {\\n    /// @notice Returns an account's balance in the token\\n    /// @param account The account for which to look up the number of tokens it has, i.e. its balance\\n    /// @return The number of tokens held by the account\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /// @notice Transfers the amount of token from the `msg.sender` to the recipient\\n    /// @param recipient The account that will receive the amount transferred\\n    /// @param amount The number of tokens to send from the sender to the recipient\\n    /// @return Returns true for a successful transfer, false for an unsuccessful transfer\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /// @notice Returns the current allowance given to a spender by an owner\\n    /// @param owner The account of the token owner\\n    /// @param spender The account of the token spender\\n    /// @return The current allowance granted by `owner` to `spender`\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /// @notice Sets the allowance of a spender from the `msg.sender` to the value `amount`\\n    /// @param spender The account which will be allowed to spend a given amount of the owners tokens\\n    /// @param amount The amount of tokens allowed to be used by `spender`\\n    /// @return Returns true for a successful approval, false for unsuccessful\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /// @notice Transfers `amount` tokens from `sender` to `recipient` up to the allowance given to the `msg.sender`\\n    /// @param sender The account from which the transfer will be initiated\\n    /// @param recipient The recipient of the transfer\\n    /// @param amount The amount of the transfer\\n    /// @return Returns true for a successful transfer, false for unsuccessful\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /// @notice Event emitted when tokens are transferred from one address to another, either via `#transfer` or `#transferFrom`.\\n    /// @param from The account from which the tokens were sent, i.e. the balance decreased\\n    /// @param to The account to which the tokens were sent, i.e. the balance increased\\n    /// @param value The amount of tokens that were transferred\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /// @notice Event emitted when the approval amount for the spender of a given owner's tokens changes.\\n    /// @param owner The account that approved spending of its tokens\\n    /// @param spender The account for which the spending allowance was modified\\n    /// @param value The new allowance from the owner to the spender\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xeccadf1bf69ba2eb51f2fe4fa511bc7bb05bbd6b9f9a3cb8e5d83d9582613e0f\",\"license\":\"MIT\"},\"@uniswap/v4-core/src/interfaces/external/IERC6909Claims.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @notice Interface for claims over a contract balance, wrapped as a ERC6909\\ninterface IERC6909Claims {\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event OperatorSet(address indexed owner, address indexed operator, bool approved);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 indexed id, uint256 amount);\\n\\n    event Transfer(address caller, address indexed from, address indexed to, uint256 indexed id, uint256 amount);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                                 FUNCTIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @notice Owner balance of an id.\\n    /// @param owner The address of the owner.\\n    /// @param id The id of the token.\\n    /// @return amount The balance of the token.\\n    function balanceOf(address owner, uint256 id) external view returns (uint256 amount);\\n\\n    /// @notice Spender allowance of an id.\\n    /// @param owner The address of the owner.\\n    /// @param spender The address of the spender.\\n    /// @param id The id of the token.\\n    /// @return amount The allowance of the token.\\n    function allowance(address owner, address spender, uint256 id) external view returns (uint256 amount);\\n\\n    /// @notice Checks if a spender is approved by an owner as an operator\\n    /// @param owner The address of the owner.\\n    /// @param spender The address of the spender.\\n    /// @return approved The approval status.\\n    function isOperator(address owner, address spender) external view returns (bool approved);\\n\\n    /// @notice Transfers an amount of an id from the caller to a receiver.\\n    /// @param receiver The address of the receiver.\\n    /// @param id The id of the token.\\n    /// @param amount The amount of the token.\\n    /// @return bool True, always, unless the function reverts\\n    function transfer(address receiver, uint256 id, uint256 amount) external returns (bool);\\n\\n    /// @notice Transfers an amount of an id from a sender to a receiver.\\n    /// @param sender The address of the sender.\\n    /// @param receiver The address of the receiver.\\n    /// @param id The id of the token.\\n    /// @param amount The amount of the token.\\n    /// @return bool True, always, unless the function reverts\\n    function transferFrom(address sender, address receiver, uint256 id, uint256 amount) external returns (bool);\\n\\n    /// @notice Approves an amount of an id to a spender.\\n    /// @param spender The address of the spender.\\n    /// @param id The id of the token.\\n    /// @param amount The amount of the token.\\n    /// @return bool True, always\\n    function approve(address spender, uint256 id, uint256 amount) external returns (bool);\\n\\n    /// @notice Sets or removes an operator for the caller.\\n    /// @param operator The address of the operator.\\n    /// @param approved The approval status.\\n    /// @return bool True, always\\n    function setOperator(address operator, bool approved) external returns (bool);\\n}\\n\",\"keccak256\":\"0xa586f345739e52b0488a0fe40b6e375cce67fdd25758408b0efcb5133ad96a48\",\"license\":\"MIT\"},\"@uniswap/v4-core/src/libraries/BitMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @title BitMath\\n/// @dev This library provides functionality for computing bit properties of an unsigned integer\\n/// @author Solady (https://github.com/Vectorized/solady/blob/8200a70e8dc2a77ecb074fc2e99a2a0d36547522/src/utils/LibBit.sol)\\nlibrary BitMath {\\n    /// @notice Returns the index of the most significant bit of the number,\\n    ///     where the least significant bit is at index 0 and the most significant bit is at index 255\\n    /// @param x the value for which to compute the most significant bit, must be greater than 0\\n    /// @return r the index of the most significant bit\\n    function mostSignificantBit(uint256 x) internal pure returns (uint8 r) {\\n        require(x > 0);\\n\\n        assembly (\\\"memory-safe\\\") {\\n            r := shl(7, lt(0xffffffffffffffffffffffffffffffff, x))\\n            r := or(r, shl(6, lt(0xffffffffffffffff, shr(r, x))))\\n            r := or(r, shl(5, lt(0xffffffff, shr(r, x))))\\n            r := or(r, shl(4, lt(0xffff, shr(r, x))))\\n            r := or(r, shl(3, lt(0xff, shr(r, x))))\\n            // forgefmt: disable-next-item\\n            r := or(r, byte(and(0x1f, shr(shr(r, x), 0x8421084210842108cc6318c6db6d54be)),\\n                0x0706060506020500060203020504000106050205030304010505030400000000))\\n        }\\n    }\\n\\n    /// @notice Returns the index of the least significant bit of the number,\\n    ///     where the least significant bit is at index 0 and the most significant bit is at index 255\\n    /// @param x the value for which to compute the least significant bit, must be greater than 0\\n    /// @return r the index of the least significant bit\\n    function leastSignificantBit(uint256 x) internal pure returns (uint8 r) {\\n        require(x > 0);\\n\\n        assembly (\\\"memory-safe\\\") {\\n            // Isolate the least significant bit.\\n            x := and(x, sub(0, x))\\n            // For the upper 3 bits of the result, use a De Bruijn-like lookup.\\n            // Credit to adhusson: https://blog.adhusson.com/cheap-find-first-set-evm/\\n            // forgefmt: disable-next-item\\n            r := shl(5, shr(252, shl(shl(2, shr(250, mul(x,\\n                0xb6db6db6ddddddddd34d34d349249249210842108c6318c639ce739cffffffff))),\\n                0x8040405543005266443200005020610674053026020000107506200176117077)))\\n            // For the lower 5 bits of the result, use a De Bruijn lookup.\\n            // forgefmt: disable-next-item\\n            r := or(r, byte(and(div(0xd76453e0, shr(r, x)), 0x1f),\\n                0x001f0d1e100c1d070f090b19131c1706010e11080a1a141802121b1503160405))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b9be4f5c4fd3e80cbc9631a65244a2eb2be250b6b7f128a2035080e18aee8d\",\"license\":\"MIT\"},\"@uniswap/v4-core/src/libraries/CustomRevert.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @title Library for reverting with custom errors efficiently\\n/// @notice Contains functions for reverting with custom errors with different argument types efficiently\\n/// @dev To use this library, declare `using CustomRevert for bytes4;` and replace `revert CustomError()` with\\n/// `CustomError.selector.revertWith()`\\n/// @dev The functions may tamper with the free memory pointer but it is fine since the call context is exited immediately\\nlibrary CustomRevert {\\n    /// @dev ERC-7751 error for wrapping bubbled up reverts\\n    error WrappedError(address target, bytes4 selector, bytes reason, bytes details);\\n\\n    /// @dev Reverts with the selector of a custom error in the scratch space\\n    function revertWith(bytes4 selector) internal pure {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0, selector)\\n            revert(0, 0x04)\\n        }\\n    }\\n\\n    /// @dev Reverts with a custom error with an address argument in the scratch space\\n    function revertWith(bytes4 selector, address addr) internal pure {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0, selector)\\n            mstore(0x04, and(addr, 0xffffffffffffffffffffffffffffffffffffffff))\\n            revert(0, 0x24)\\n        }\\n    }\\n\\n    /// @dev Reverts with a custom error with an int24 argument in the scratch space\\n    function revertWith(bytes4 selector, int24 value) internal pure {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0, selector)\\n            mstore(0x04, signextend(2, value))\\n            revert(0, 0x24)\\n        }\\n    }\\n\\n    /// @dev Reverts with a custom error with a uint160 argument in the scratch space\\n    function revertWith(bytes4 selector, uint160 value) internal pure {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0, selector)\\n            mstore(0x04, and(value, 0xffffffffffffffffffffffffffffffffffffffff))\\n            revert(0, 0x24)\\n        }\\n    }\\n\\n    /// @dev Reverts with a custom error with two int24 arguments\\n    function revertWith(bytes4 selector, int24 value1, int24 value2) internal pure {\\n        assembly (\\\"memory-safe\\\") {\\n            let fmp := mload(0x40)\\n            mstore(fmp, selector)\\n            mstore(add(fmp, 0x04), signextend(2, value1))\\n            mstore(add(fmp, 0x24), signextend(2, value2))\\n            revert(fmp, 0x44)\\n        }\\n    }\\n\\n    /// @dev Reverts with a custom error with two uint160 arguments\\n    function revertWith(bytes4 selector, uint160 value1, uint160 value2) internal pure {\\n        assembly (\\\"memory-safe\\\") {\\n            let fmp := mload(0x40)\\n            mstore(fmp, selector)\\n            mstore(add(fmp, 0x04), and(value1, 0xffffffffffffffffffffffffffffffffffffffff))\\n            mstore(add(fmp, 0x24), and(value2, 0xffffffffffffffffffffffffffffffffffffffff))\\n            revert(fmp, 0x44)\\n        }\\n    }\\n\\n    /// @dev Reverts with a custom error with two address arguments\\n    function revertWith(bytes4 selector, address value1, address value2) internal pure {\\n        assembly (\\\"memory-safe\\\") {\\n            let fmp := mload(0x40)\\n            mstore(fmp, selector)\\n            mstore(add(fmp, 0x04), and(value1, 0xffffffffffffffffffffffffffffffffffffffff))\\n            mstore(add(fmp, 0x24), and(value2, 0xffffffffffffffffffffffffffffffffffffffff))\\n            revert(fmp, 0x44)\\n        }\\n    }\\n\\n    /// @notice bubble up the revert message returned by a call and revert with a wrapped ERC-7751 error\\n    /// @dev this method can be vulnerable to revert data bombs\\n    function bubbleUpAndRevertWith(\\n        address revertingContract,\\n        bytes4 revertingFunctionSelector,\\n        bytes4 additionalContext\\n    ) internal pure {\\n        bytes4 wrappedErrorSelector = WrappedError.selector;\\n        assembly (\\\"memory-safe\\\") {\\n            // Ensure the size of the revert data is a multiple of 32 bytes\\n            let encodedDataSize := mul(div(add(returndatasize(), 31), 32), 32)\\n\\n            let fmp := mload(0x40)\\n\\n            // Encode wrapped error selector, address, function selector, offset, additional context, size, revert reason\\n            mstore(fmp, wrappedErrorSelector)\\n            mstore(add(fmp, 0x04), and(revertingContract, 0xffffffffffffffffffffffffffffffffffffffff))\\n            mstore(\\n                add(fmp, 0x24),\\n                and(revertingFunctionSelector, 0xffffffff00000000000000000000000000000000000000000000000000000000)\\n            )\\n            // offset revert reason\\n            mstore(add(fmp, 0x44), 0x80)\\n            // offset additional context\\n            mstore(add(fmp, 0x64), add(0xa0, encodedDataSize))\\n            // size revert reason\\n            mstore(add(fmp, 0x84), returndatasize())\\n            // revert reason\\n            returndatacopy(add(fmp, 0xa4), 0, returndatasize())\\n            // size additional context\\n            mstore(add(fmp, add(0xa4, encodedDataSize)), 0x04)\\n            // additional context\\n            mstore(\\n                add(fmp, add(0xc4, encodedDataSize)),\\n                and(additionalContext, 0xffffffff00000000000000000000000000000000000000000000000000000000)\\n            )\\n            revert(fmp, add(0xe4, encodedDataSize))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x111ed3031b6990c80a93ae35dde6b6ac0b7e6af471388fdd7461e91edda9b7de\",\"license\":\"MIT\"},\"@uniswap/v4-core/src/libraries/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {CustomRevert} from \\\"./CustomRevert.sol\\\";\\n\\n/// @title Safe casting methods\\n/// @notice Contains methods for safely casting between types\\nlibrary SafeCast {\\n    using CustomRevert for bytes4;\\n\\n    error SafeCastOverflow();\\n\\n    /// @notice Cast a uint256 to a uint160, revert on overflow\\n    /// @param x The uint256 to be downcasted\\n    /// @return y The downcasted integer, now type uint160\\n    function toUint160(uint256 x) internal pure returns (uint160 y) {\\n        y = uint160(x);\\n        if (y != x) SafeCastOverflow.selector.revertWith();\\n    }\\n\\n    /// @notice Cast a uint256 to a uint128, revert on overflow\\n    /// @param x The uint256 to be downcasted\\n    /// @return y The downcasted integer, now type uint128\\n    function toUint128(uint256 x) internal pure returns (uint128 y) {\\n        y = uint128(x);\\n        if (x != y) SafeCastOverflow.selector.revertWith();\\n    }\\n\\n    /// @notice Cast a int128 to a uint128, revert on overflow or underflow\\n    /// @param x The int128 to be casted\\n    /// @return y The casted integer, now type uint128\\n    function toUint128(int128 x) internal pure returns (uint128 y) {\\n        if (x < 0) SafeCastOverflow.selector.revertWith();\\n        y = uint128(x);\\n    }\\n\\n    /// @notice Cast a int256 to a int128, revert on overflow or underflow\\n    /// @param x The int256 to be downcasted\\n    /// @return y The downcasted integer, now type int128\\n    function toInt128(int256 x) internal pure returns (int128 y) {\\n        y = int128(x);\\n        if (y != x) SafeCastOverflow.selector.revertWith();\\n    }\\n\\n    /// @notice Cast a uint256 to a int256, revert on overflow\\n    /// @param x The uint256 to be casted\\n    /// @return y The casted integer, now type int256\\n    function toInt256(uint256 x) internal pure returns (int256 y) {\\n        y = int256(x);\\n        if (y < 0) SafeCastOverflow.selector.revertWith();\\n    }\\n\\n    /// @notice Cast a uint256 to a int128, revert on overflow\\n    /// @param x The uint256 to be downcasted\\n    /// @return The downcasted integer, now type int128\\n    function toInt128(uint256 x) internal pure returns (int128) {\\n        if (x >= 1 << 127) SafeCastOverflow.selector.revertWith();\\n        return int128(int256(x));\\n    }\\n}\\n\",\"keccak256\":\"0x42c4a24f996a14d358be397b71f7ec9d7daf666aaec78002c63315a6ee67aa86\",\"license\":\"MIT\"},\"@uniswap/v4-core/src/libraries/TickMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {BitMath} from \\\"./BitMath.sol\\\";\\nimport {CustomRevert} from \\\"./CustomRevert.sol\\\";\\n\\n/// @title Math library for computing sqrt prices from ticks and vice versa\\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\\n/// prices between 2**-128 and 2**128\\nlibrary TickMath {\\n    using CustomRevert for bytes4;\\n\\n    /// @notice Thrown when the tick passed to #getSqrtPriceAtTick is not between MIN_TICK and MAX_TICK\\n    error InvalidTick(int24 tick);\\n    /// @notice Thrown when the price passed to #getTickAtSqrtPrice does not correspond to a price between MIN_TICK and MAX_TICK\\n    error InvalidSqrtPrice(uint160 sqrtPriceX96);\\n\\n    /// @dev The minimum tick that may be passed to #getSqrtPriceAtTick computed from log base 1.0001 of 2**-128\\n    /// @dev If ever MIN_TICK and MAX_TICK are not centered around 0, the absTick logic in getSqrtPriceAtTick cannot be used\\n    int24 internal constant MIN_TICK = -887272;\\n    /// @dev The maximum tick that may be passed to #getSqrtPriceAtTick computed from log base 1.0001 of 2**128\\n    /// @dev If ever MIN_TICK and MAX_TICK are not centered around 0, the absTick logic in getSqrtPriceAtTick cannot be used\\n    int24 internal constant MAX_TICK = 887272;\\n\\n    /// @dev The minimum tick spacing value drawn from the range of type int16 that is greater than 0, i.e. min from the range [1, 32767]\\n    int24 internal constant MIN_TICK_SPACING = 1;\\n    /// @dev The maximum tick spacing value drawn from the range of type int16, i.e. max from the range [1, 32767]\\n    int24 internal constant MAX_TICK_SPACING = type(int16).max;\\n\\n    /// @dev The minimum value that can be returned from #getSqrtPriceAtTick. Equivalent to getSqrtPriceAtTick(MIN_TICK)\\n    uint160 internal constant MIN_SQRT_PRICE = 4295128739;\\n    /// @dev The maximum value that can be returned from #getSqrtPriceAtTick. Equivalent to getSqrtPriceAtTick(MAX_TICK)\\n    uint160 internal constant MAX_SQRT_PRICE = 1461446703485210103287273052203988822378723970342;\\n    /// @dev A threshold used for optimized bounds check, equals `MAX_SQRT_PRICE - MIN_SQRT_PRICE - 1`\\n    uint160 internal constant MAX_SQRT_PRICE_MINUS_MIN_SQRT_PRICE_MINUS_ONE =\\n        1461446703485210103287273052203988822378723970342 - 4295128739 - 1;\\n\\n    /// @notice Given a tickSpacing, compute the maximum usable tick\\n    function maxUsableTick(int24 tickSpacing) internal pure returns (int24) {\\n        unchecked {\\n            return (MAX_TICK / tickSpacing) * tickSpacing;\\n        }\\n    }\\n\\n    /// @notice Given a tickSpacing, compute the minimum usable tick\\n    function minUsableTick(int24 tickSpacing) internal pure returns (int24) {\\n        unchecked {\\n            return (MIN_TICK / tickSpacing) * tickSpacing;\\n        }\\n    }\\n\\n    /// @notice Calculates sqrt(1.0001^tick) * 2^96\\n    /// @dev Throws if |tick| > max tick\\n    /// @param tick The input tick for the above formula\\n    /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the price of the two assets (currency1/currency0)\\n    /// at the given tick\\n    function getSqrtPriceAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {\\n        unchecked {\\n            uint256 absTick;\\n            assembly (\\\"memory-safe\\\") {\\n                tick := signextend(2, tick)\\n                // mask = 0 if tick >= 0 else -1 (all 1s)\\n                let mask := sar(255, tick)\\n                // if tick >= 0, |tick| = tick = 0 ^ tick\\n                // if tick < 0, |tick| = ~~|tick| = ~(-|tick| - 1) = ~(tick - 1) = (-1) ^ (tick - 1)\\n                // either way, |tick| = mask ^ (tick + mask)\\n                absTick := xor(mask, add(mask, tick))\\n            }\\n\\n            if (absTick > uint256(int256(MAX_TICK))) InvalidTick.selector.revertWith(tick);\\n\\n            // The tick is decomposed into bits, and for each bit with index i that is set, the product of 1/sqrt(1.0001^(2^i))\\n            // is calculated (using Q128.128). The constants used for this calculation are rounded to the nearest integer\\n\\n            // Equivalent to:\\n            //     price = absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000;\\n            //     or price = int(2**128 / sqrt(1.0001)) if (absTick & 0x1) else 1 << 128\\n            uint256 price;\\n            assembly (\\\"memory-safe\\\") {\\n                price := xor(shl(128, 1), mul(xor(shl(128, 1), 0xfffcb933bd6fad37aa2d162d1a594001), and(absTick, 0x1)))\\n            }\\n            if (absTick & 0x2 != 0) price = (price * 0xfff97272373d413259a46990580e213a) >> 128;\\n            if (absTick & 0x4 != 0) price = (price * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\\n            if (absTick & 0x8 != 0) price = (price * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\\n            if (absTick & 0x10 != 0) price = (price * 0xffcb9843d60f6159c9db58835c926644) >> 128;\\n            if (absTick & 0x20 != 0) price = (price * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\\n            if (absTick & 0x40 != 0) price = (price * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\\n            if (absTick & 0x80 != 0) price = (price * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\\n            if (absTick & 0x100 != 0) price = (price * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\\n            if (absTick & 0x200 != 0) price = (price * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\\n            if (absTick & 0x400 != 0) price = (price * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\\n            if (absTick & 0x800 != 0) price = (price * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\\n            if (absTick & 0x1000 != 0) price = (price * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\\n            if (absTick & 0x2000 != 0) price = (price * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\\n            if (absTick & 0x4000 != 0) price = (price * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\\n            if (absTick & 0x8000 != 0) price = (price * 0x31be135f97d08fd981231505542fcfa6) >> 128;\\n            if (absTick & 0x10000 != 0) price = (price * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\\n            if (absTick & 0x20000 != 0) price = (price * 0x5d6af8dedb81196699c329225ee604) >> 128;\\n            if (absTick & 0x40000 != 0) price = (price * 0x2216e584f5fa1ea926041bedfe98) >> 128;\\n            if (absTick & 0x80000 != 0) price = (price * 0x48a170391f7dc42444e8fa2) >> 128;\\n\\n            assembly (\\\"memory-safe\\\") {\\n                // if (tick > 0) price = type(uint256).max / price;\\n                if sgt(tick, 0) { price := div(not(0), price) }\\n\\n                // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\\n                // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\\n                // we round up in the division so getTickAtSqrtPrice of the output price is always consistent\\n                // `sub(shl(32, 1), 1)` is `type(uint32).max`\\n                // `price + type(uint32).max` will not overflow because `price` fits in 192 bits\\n                sqrtPriceX96 := shr(32, add(price, sub(shl(32, 1), 1)))\\n            }\\n        }\\n    }\\n\\n    /// @notice Calculates the greatest tick value such that getSqrtPriceAtTick(tick) <= sqrtPriceX96\\n    /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_PRICE, as MIN_SQRT_PRICE is the lowest value getSqrtPriceAtTick may\\n    /// ever return.\\n    /// @param sqrtPriceX96 The sqrt price for which to compute the tick as a Q64.96\\n    /// @return tick The greatest tick for which the getSqrtPriceAtTick(tick) is less than or equal to the input sqrtPriceX96\\n    function getTickAtSqrtPrice(uint160 sqrtPriceX96) internal pure returns (int24 tick) {\\n        unchecked {\\n            // Equivalent: if (sqrtPriceX96 < MIN_SQRT_PRICE || sqrtPriceX96 >= MAX_SQRT_PRICE) revert InvalidSqrtPrice();\\n            // second inequality must be >= because the price can never reach the price at the max tick\\n            // if sqrtPriceX96 < MIN_SQRT_PRICE, the `sub` underflows and `gt` is true\\n            // if sqrtPriceX96 >= MAX_SQRT_PRICE, sqrtPriceX96 - MIN_SQRT_PRICE > MAX_SQRT_PRICE - MIN_SQRT_PRICE - 1\\n            if ((sqrtPriceX96 - MIN_SQRT_PRICE) > MAX_SQRT_PRICE_MINUS_MIN_SQRT_PRICE_MINUS_ONE) {\\n                InvalidSqrtPrice.selector.revertWith(sqrtPriceX96);\\n            }\\n\\n            uint256 price = uint256(sqrtPriceX96) << 32;\\n\\n            uint256 r = price;\\n            uint256 msb = BitMath.mostSignificantBit(r);\\n\\n            if (msb >= 128) r = price >> (msb - 127);\\n            else r = price << (127 - msb);\\n\\n            int256 log_2 = (int256(msb) - 128) << 64;\\n\\n            assembly (\\\"memory-safe\\\") {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(63, f))\\n                r := shr(f, r)\\n            }\\n            assembly (\\\"memory-safe\\\") {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(62, f))\\n                r := shr(f, r)\\n            }\\n            assembly (\\\"memory-safe\\\") {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(61, f))\\n                r := shr(f, r)\\n            }\\n            assembly (\\\"memory-safe\\\") {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(60, f))\\n                r := shr(f, r)\\n            }\\n            assembly (\\\"memory-safe\\\") {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(59, f))\\n                r := shr(f, r)\\n            }\\n            assembly (\\\"memory-safe\\\") {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(58, f))\\n                r := shr(f, r)\\n            }\\n            assembly (\\\"memory-safe\\\") {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(57, f))\\n                r := shr(f, r)\\n            }\\n            assembly (\\\"memory-safe\\\") {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(56, f))\\n                r := shr(f, r)\\n            }\\n            assembly (\\\"memory-safe\\\") {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(55, f))\\n                r := shr(f, r)\\n            }\\n            assembly (\\\"memory-safe\\\") {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(54, f))\\n                r := shr(f, r)\\n            }\\n            assembly (\\\"memory-safe\\\") {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(53, f))\\n                r := shr(f, r)\\n            }\\n            assembly (\\\"memory-safe\\\") {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(52, f))\\n                r := shr(f, r)\\n            }\\n            assembly (\\\"memory-safe\\\") {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(51, f))\\n                r := shr(f, r)\\n            }\\n            assembly (\\\"memory-safe\\\") {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(50, f))\\n            }\\n\\n            int256 log_sqrt10001 = log_2 * 255738958999603826347141; // Q22.128 number\\n\\n            // Magic number represents the ceiling of the maximum value of the error when approximating log_sqrt10001(x)\\n            int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\\n\\n            // Magic number represents the minimum value of the error when approximating log_sqrt10001(x), when\\n            // sqrtPrice is from the range (2^-64, 2^64). This is safe as MIN_SQRT_PRICE is more than 2^-64. If MIN_SQRT_PRICE\\n            // is changed, this may need to be changed too\\n            int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\\n\\n            tick = tickLow == tickHi ? tickLow : getSqrtPriceAtTick(tickHi) <= sqrtPriceX96 ? tickHi : tickLow;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4e1a11e154eb06106cb1c4598f06cca5f5ca16eaa33494ba2f0e74981123eca8\",\"license\":\"MIT\"},\"@uniswap/v4-core/src/types/BalanceDelta.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {SafeCast} from \\\"../libraries/SafeCast.sol\\\";\\n\\n/// @dev Two `int128` values packed into a single `int256` where the upper 128 bits represent the amount0\\n/// and the lower 128 bits represent the amount1.\\ntype BalanceDelta is int256;\\n\\nusing {add as +, sub as -, eq as ==, neq as !=} for BalanceDelta global;\\nusing BalanceDeltaLibrary for BalanceDelta global;\\nusing SafeCast for int256;\\n\\nfunction toBalanceDelta(int128 _amount0, int128 _amount1) pure returns (BalanceDelta balanceDelta) {\\n    assembly (\\\"memory-safe\\\") {\\n        balanceDelta := or(shl(128, _amount0), and(sub(shl(128, 1), 1), _amount1))\\n    }\\n}\\n\\nfunction add(BalanceDelta a, BalanceDelta b) pure returns (BalanceDelta) {\\n    int256 res0;\\n    int256 res1;\\n    assembly (\\\"memory-safe\\\") {\\n        let a0 := sar(128, a)\\n        let a1 := signextend(15, a)\\n        let b0 := sar(128, b)\\n        let b1 := signextend(15, b)\\n        res0 := add(a0, b0)\\n        res1 := add(a1, b1)\\n    }\\n    return toBalanceDelta(res0.toInt128(), res1.toInt128());\\n}\\n\\nfunction sub(BalanceDelta a, BalanceDelta b) pure returns (BalanceDelta) {\\n    int256 res0;\\n    int256 res1;\\n    assembly (\\\"memory-safe\\\") {\\n        let a0 := sar(128, a)\\n        let a1 := signextend(15, a)\\n        let b0 := sar(128, b)\\n        let b1 := signextend(15, b)\\n        res0 := sub(a0, b0)\\n        res1 := sub(a1, b1)\\n    }\\n    return toBalanceDelta(res0.toInt128(), res1.toInt128());\\n}\\n\\nfunction eq(BalanceDelta a, BalanceDelta b) pure returns (bool) {\\n    return BalanceDelta.unwrap(a) == BalanceDelta.unwrap(b);\\n}\\n\\nfunction neq(BalanceDelta a, BalanceDelta b) pure returns (bool) {\\n    return BalanceDelta.unwrap(a) != BalanceDelta.unwrap(b);\\n}\\n\\n/// @notice Library for getting the amount0 and amount1 deltas from the BalanceDelta type\\nlibrary BalanceDeltaLibrary {\\n    /// @notice A BalanceDelta of 0\\n    BalanceDelta public constant ZERO_DELTA = BalanceDelta.wrap(0);\\n\\n    function amount0(BalanceDelta balanceDelta) internal pure returns (int128 _amount0) {\\n        assembly (\\\"memory-safe\\\") {\\n            _amount0 := sar(128, balanceDelta)\\n        }\\n    }\\n\\n    function amount1(BalanceDelta balanceDelta) internal pure returns (int128 _amount1) {\\n        assembly (\\\"memory-safe\\\") {\\n            _amount1 := signextend(15, balanceDelta)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa719c8fe51e0a9524280178f19f6851bcc3b3b60e73618f3d60905d35ae5569f\",\"license\":\"MIT\"},\"@uniswap/v4-core/src/types/BeforeSwapDelta.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// Return type of the beforeSwap hook.\\n// Upper 128 bits is the delta in specified tokens. Lower 128 bits is delta in unspecified tokens (to match the afterSwap hook)\\ntype BeforeSwapDelta is int256;\\n\\n// Creates a BeforeSwapDelta from specified and unspecified\\nfunction toBeforeSwapDelta(int128 deltaSpecified, int128 deltaUnspecified)\\n    pure\\n    returns (BeforeSwapDelta beforeSwapDelta)\\n{\\n    assembly (\\\"memory-safe\\\") {\\n        beforeSwapDelta := or(shl(128, deltaSpecified), and(sub(shl(128, 1), 1), deltaUnspecified))\\n    }\\n}\\n\\n/// @notice Library for getting the specified and unspecified deltas from the BeforeSwapDelta type\\nlibrary BeforeSwapDeltaLibrary {\\n    /// @notice A BeforeSwapDelta of 0\\n    BeforeSwapDelta public constant ZERO_DELTA = BeforeSwapDelta.wrap(0);\\n\\n    /// extracts int128 from the upper 128 bits of the BeforeSwapDelta\\n    /// returned by beforeSwap\\n    function getSpecifiedDelta(BeforeSwapDelta delta) internal pure returns (int128 deltaSpecified) {\\n        assembly (\\\"memory-safe\\\") {\\n            deltaSpecified := sar(128, delta)\\n        }\\n    }\\n\\n    /// extracts int128 from the lower 128 bits of the BeforeSwapDelta\\n    /// returned by beforeSwap and afterSwap\\n    function getUnspecifiedDelta(BeforeSwapDelta delta) internal pure returns (int128 deltaUnspecified) {\\n        assembly (\\\"memory-safe\\\") {\\n            deltaUnspecified := signextend(15, delta)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2a774312d91285313d569da1a718c909655da5432310417692097a1d4dc83a78\",\"license\":\"MIT\"},\"@uniswap/v4-core/src/types/Currency.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IERC20Minimal} from \\\"../interfaces/external/IERC20Minimal.sol\\\";\\nimport {CustomRevert} from \\\"../libraries/CustomRevert.sol\\\";\\n\\ntype Currency is address;\\n\\nusing {greaterThan as >, lessThan as <, greaterThanOrEqualTo as >=, equals as ==} for Currency global;\\nusing CurrencyLibrary for Currency global;\\n\\nfunction equals(Currency currency, Currency other) pure returns (bool) {\\n    return Currency.unwrap(currency) == Currency.unwrap(other);\\n}\\n\\nfunction greaterThan(Currency currency, Currency other) pure returns (bool) {\\n    return Currency.unwrap(currency) > Currency.unwrap(other);\\n}\\n\\nfunction lessThan(Currency currency, Currency other) pure returns (bool) {\\n    return Currency.unwrap(currency) < Currency.unwrap(other);\\n}\\n\\nfunction greaterThanOrEqualTo(Currency currency, Currency other) pure returns (bool) {\\n    return Currency.unwrap(currency) >= Currency.unwrap(other);\\n}\\n\\n/// @title CurrencyLibrary\\n/// @dev This library allows for transferring and holding native tokens and ERC20 tokens\\nlibrary CurrencyLibrary {\\n    /// @notice Additional context for ERC-7751 wrapped error when a native transfer fails\\n    error NativeTransferFailed();\\n\\n    /// @notice Additional context for ERC-7751 wrapped error when an ERC20 transfer fails\\n    error ERC20TransferFailed();\\n\\n    /// @notice A constant to represent the native currency\\n    Currency public constant ADDRESS_ZERO = Currency.wrap(address(0));\\n\\n    function transfer(Currency currency, address to, uint256 amount) internal {\\n        // altered from https://github.com/transmissions11/solmate/blob/44a9963d4c78111f77caa0e65d677b8b46d6f2e6/src/utils/SafeTransferLib.sol\\n        // modified custom error selectors\\n\\n        bool success;\\n        if (currency.isAddressZero()) {\\n            assembly (\\\"memory-safe\\\") {\\n                // Transfer the ETH and revert if it fails.\\n                success := call(gas(), to, amount, 0, 0, 0, 0)\\n            }\\n            // revert with NativeTransferFailed, containing the bubbled up error as an argument\\n            if (!success) {\\n                CustomRevert.bubbleUpAndRevertWith(to, bytes4(0), NativeTransferFailed.selector);\\n            }\\n        } else {\\n            assembly (\\\"memory-safe\\\") {\\n                // Get a pointer to some free memory.\\n                let fmp := mload(0x40)\\n\\n                // Write the abi-encoded calldata into memory, beginning with the function selector.\\n                mstore(fmp, 0xa9059cbb00000000000000000000000000000000000000000000000000000000)\\n                mstore(add(fmp, 4), and(to, 0xffffffffffffffffffffffffffffffffffffffff)) // Append and mask the \\\"to\\\" argument.\\n                mstore(add(fmp, 36), amount) // Append the \\\"amount\\\" argument. Masking not required as it's a full 32 byte type.\\n\\n                success :=\\n                    and(\\n                        // Set success to whether the call reverted, if not we check it either\\n                        // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                        or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                        // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\\n                        // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                        // Counterintuitively, this call must be positioned second to the or() call in the\\n                        // surrounding and() call or else returndatasize() will be zero during the computation.\\n                        call(gas(), currency, 0, fmp, 68, 0, 32)\\n                    )\\n\\n                // Now clean the memory we used\\n                mstore(fmp, 0) // 4 byte `selector` and 28 bytes of `to` were stored here\\n                mstore(add(fmp, 0x20), 0) // 4 bytes of `to` and 28 bytes of `amount` were stored here\\n                mstore(add(fmp, 0x40), 0) // 4 bytes of `amount` were stored here\\n            }\\n            // revert with ERC20TransferFailed, containing the bubbled up error as an argument\\n            if (!success) {\\n                CustomRevert.bubbleUpAndRevertWith(\\n                    Currency.unwrap(currency), IERC20Minimal.transfer.selector, ERC20TransferFailed.selector\\n                );\\n            }\\n        }\\n    }\\n\\n    function balanceOfSelf(Currency currency) internal view returns (uint256) {\\n        if (currency.isAddressZero()) {\\n            return address(this).balance;\\n        } else {\\n            return IERC20Minimal(Currency.unwrap(currency)).balanceOf(address(this));\\n        }\\n    }\\n\\n    function balanceOf(Currency currency, address owner) internal view returns (uint256) {\\n        if (currency.isAddressZero()) {\\n            return owner.balance;\\n        } else {\\n            return IERC20Minimal(Currency.unwrap(currency)).balanceOf(owner);\\n        }\\n    }\\n\\n    function isAddressZero(Currency currency) internal pure returns (bool) {\\n        return Currency.unwrap(currency) == Currency.unwrap(ADDRESS_ZERO);\\n    }\\n\\n    function toId(Currency currency) internal pure returns (uint256) {\\n        return uint160(Currency.unwrap(currency));\\n    }\\n\\n    // If the upper 12 bytes are non-zero, they will be zero-ed out\\n    // Therefore, fromId() and toId() are not inverses of each other\\n    function fromId(uint256 id) internal pure returns (Currency) {\\n        return Currency.wrap(address(uint160(id)));\\n    }\\n}\\n\",\"keccak256\":\"0x4a0b84b282577ff6f8acf13ec9f4d32dbb9348748b49611d00e68bee96609c93\",\"license\":\"MIT\"},\"@uniswap/v4-core/src/types/PoolId.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {PoolKey} from \\\"./PoolKey.sol\\\";\\n\\ntype PoolId is bytes32;\\n\\n/// @notice Library for computing the ID of a pool\\nlibrary PoolIdLibrary {\\n    /// @notice Returns value equal to keccak256(abi.encode(poolKey))\\n    function toId(PoolKey memory poolKey) internal pure returns (PoolId poolId) {\\n        assembly (\\\"memory-safe\\\") {\\n            // 0xa0 represents the total size of the poolKey struct (5 slots of 32 bytes)\\n            poolId := keccak256(poolKey, 0xa0)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x308311916ea0f5c2fd878b6a2751eb223d170a69e33f601fae56dfe3c5d392af\",\"license\":\"MIT\"},\"@uniswap/v4-core/src/types/PoolKey.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {Currency} from \\\"./Currency.sol\\\";\\nimport {IHooks} from \\\"../interfaces/IHooks.sol\\\";\\nimport {PoolIdLibrary} from \\\"./PoolId.sol\\\";\\n\\nusing PoolIdLibrary for PoolKey global;\\n\\n/// @notice Returns the key for identifying a pool\\nstruct PoolKey {\\n    /// @notice The lower currency of the pool, sorted numerically\\n    Currency currency0;\\n    /// @notice The higher currency of the pool, sorted numerically\\n    Currency currency1;\\n    /// @notice The pool LP fee, capped at 1_000_000. If the highest bit is 1, the pool has a dynamic fee and must be exactly equal to 0x800000\\n    uint24 fee;\\n    /// @notice Ticks that involve positions must be a multiple of tick spacing\\n    int24 tickSpacing;\\n    /// @notice The hooks of the pool\\n    IHooks hooks;\\n}\\n\",\"keccak256\":\"0xf89856e0580d7a4856d3187a76858377ccee9d59702d230c338d84388221b786\",\"license\":\"MIT\"},\"@uniswap/v4-periphery/src/interfaces/external/IWETH9.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @title IWETH9\\ninterface IWETH9 is IERC20 {\\n    /// @notice Deposit ether to get wrapped ether\\n    function deposit() external payable;\\n\\n    /// @notice Withdraw wrapped ether to get ether\\n    function withdraw(uint256) external;\\n}\\n\",\"keccak256\":\"0xe88abf12501ac275619aec0687240a07d26968aecbbcdfea88ba8bbd5d6e5e14\",\"license\":\"MIT\"},\"contracts/interfaces/ICLMMAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\n// \\u2588\\u2588\\u2588\\u2557   \\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2557  \\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\n// \\u2588\\u2588\\u2554\\u2588\\u2588\\u2588\\u2588\\u2554\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2551 \\u255a\\u2550\\u255d \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\n// \\u255a\\u2550\\u255d     \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\n\\n// Website: https://wagmie.com\\n// Telegram: https://t.me/mahaxyz\\n// Twitter: https://twitter.com/mahaxyz_\\n\\npragma solidity ^0.8.0;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {PoolKey} from \\\"@uniswap/v4-core/src/types/PoolKey.sol\\\";\\nimport {IClPool} from \\\"contracts/interfaces/thirdparty/IClPool.sol\\\";\\n\\n/// @title Concentrated Liquidity Market Maker Adapter Interface\\n/// @notice Interface for interacting with concentrated liquidity pools\\n/// @dev Implements single-sided liquidity provision and fee claiming\\ninterface ICLMMAdapter {\\n  /// @notice Parameters for adding liquidity to a pool\\n  struct AddLiquidityParams {\\n    IERC20 tokenBase;\\n    IERC20 tokenQuote;\\n    int24 tick0;\\n    int24 tick1;\\n    int24 tick2;\\n    uint24 fee;\\n    int24 tickSpacing;\\n    uint256 totalAmount;\\n    uint256 graduationAmount;\\n  }\\n\\n  /// @notice Add single-sided liquidity to a concentrated pool\\n  /// @dev Provides liquidity across three ticks with different amounts\\n  /// @return pool The address of the pool\\n  function addSingleSidedLiquidity(AddLiquidityParams memory _params) external returns (address pool);\\n\\n  /// @notice Swap a token with exact output\\n  /// @param _tokenIn The token to swap\\n  /// @param _tokenOut The token to receive\\n  /// @param _amountOut The amount of tokens to swap\\n  /// @param _maxAmountIn The maximum amount of tokens to receive\\n  /// @return amountIn The amount of tokens received\\n  function swapWithExactOutput(IERC20 _tokenIn, IERC20 _tokenOut, uint256 _amountOut, uint256 _maxAmountIn, uint24 _fee)\\n    external\\n    returns (uint256 amountIn);\\n\\n  /// @notice Swap a token with exact input\\n  /// @param _tokenIn The token to swap\\n  /// @param _tokenOut The token to receive\\n  /// @param _amountIn The amount of tokens to swap\\n  /// @param _minAmountOut The minimum amount of tokens to receive\\n  /// @return amountOut The amount of tokens received\\n  function swapWithExactInput(IERC20 _tokenIn, IERC20 _tokenOut, uint256 _amountIn, uint256 _minAmountOut, uint24 _fee)\\n    external\\n    returns (uint256 amountOut);\\n\\n  /// @notice Returns the address of the Launchpad contract\\n  /// @return launchpad The address of the Launchpad contract\\n  function launchpad() external view returns (address launchpad);\\n\\n  /// @notice Claim accumulated fees from the pool\\n  /// @param _token The token address to claim fees for\\n  /// @return fee0 The amount of token0 fees to claim\\n  /// @return fee1 The amount of token1 fees to claim\\n  function claimFees(address _token) external returns (uint256 fee0, uint256 fee1);\\n}\\n\",\"keccak256\":\"0xc386cde493e4ce82667fe4bcb8185ad043c6125bb07484436f3dcab8ab6a7039\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IGoPlusLocker.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\n// \\u2588\\u2588\\u2588\\u2557   \\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2557  \\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\n// \\u2588\\u2588\\u2554\\u2588\\u2588\\u2588\\u2588\\u2554\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2551 \\u255a\\u2550\\u255d \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\n// \\u255a\\u2550\\u255d     \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\n\\n// Website: https://wagmie.com\\n// Telegram: https://t.me/mahaxyz\\n// Twitter: https://twitter.com/mahaxyz_\\n\\npragma solidity ^0.8.0;\\n\\ninterface IGoPlusLocker {\\n  struct FeeStruct {\\n    string name; // name by which the fee is accessed\\n    uint256 lpFee; // 100 = 1%, 10,000 = 100%\\n    uint256 collectFee; // 100 = 1%, 10,000 = 100%\\n    uint256 lockFee; // in amount tokens\\n    address lockFeeToken; // address(0) = ETH otherwise ERC20 address expected\\n  }\\n\\n  struct LockInfo {\\n    uint256 lockId;\\n    address nftPositionManager;\\n    address pendingOwner;\\n    address owner;\\n    address collector;\\n    address pool;\\n    uint256 collectFee;\\n    uint256 nftId;\\n    uint256 startTime;\\n    uint256 endTime;\\n  }\\n\\n  function fees(bytes32 nameHash) external view returns (FeeStruct memory);\\n  function feeReceiver() external view returns (address);\\n  function customFeeSigner() external view returns (address);\\n  function FEE_DENOMINATOR() external view returns (uint256);\\n  function nextLockId() external view returns (uint256);\\n  function locks(uint256 lockId) external view returns (LockInfo memory);\\n  function disabledSigs(bytes memory sig) external view returns (bool);\\n\\n  function addOrUpdateFee(\\n    string memory name_,\\n    uint256 lpFee_,\\n    uint256 collectFee_,\\n    uint256 lockFee_,\\n    address lockFeeToken_\\n  ) external;\\n\\n  function removeFee(string memory name_) external;\\n  function updateFeeReceiver(address feeReceiver_) external;\\n  function updateFeeSigner(address feeSigner_) external;\\n  function addSupportedNftManager(address nftManager_) external;\\n  function disableSig(bytes memory sig) external;\\n  function supportedNftManager(address nftManager_) external view returns (bool);\\n  function isSupportedFeeName(string memory name_) external view returns (bool);\\n  function getFee(string memory name_) external view returns (FeeStruct memory);\\n\\n  function lock(\\n    address nftManager_,\\n    uint256 nftId_,\\n    address owner_,\\n    address collector_,\\n    uint256 endTime_,\\n    string memory feeName_\\n  ) external payable returns (uint256 lockId);\\n\\n  function lockWithCustomFee(\\n    address nftManager_,\\n    uint256 nftId_,\\n    address owner_,\\n    address collector_,\\n    uint256 endTime_,\\n    bytes memory signature_,\\n    FeeStruct memory feeObj_\\n  ) external payable returns (uint256 lockId);\\n\\n  function transferLock(uint256 lockId_, address newOwner_) external;\\n  function acceptLock(uint256 lockId_) external;\\n  function unlock(uint256 lockId_) external;\\n  function relock(uint256 lockId_, uint256 endTime_) external;\\n  function collect(uint256 lockId_, address recipient_, uint128 amount0Max_, uint128 amount1Max_)\\n    external\\n    returns (uint256 amount0, uint256 amount1, uint256 fee0, uint256 fee1);\\n  function setCollectAddress(uint256 lockId_, address collector_) external;\\n  function adminRefundEth(uint256 amount_, address payable receiver_) external;\\n  function adminRefundERC20(address token_, address receiver_, uint256 amount_) external;\\n  function getUserLocks(address user) external view returns (uint256[] memory lockIds);\\n}\\n\",\"keccak256\":\"0x854aa3e52e8aa5f5dc83be5b648fe025aa803415cf94b4273c9f249634a7a9d1\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ILaunchpool.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\n// \\u2588\\u2588\\u2588\\u2557   \\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2557  \\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\n// \\u2588\\u2588\\u2554\\u2588\\u2588\\u2588\\u2588\\u2554\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2551 \\u255a\\u2550\\u255d \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\n// \\u255a\\u2550\\u255d    \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\n\\n// Website: https://wagmie.com\\n// Telegram: https://t.me/mahaxyz\\n// Twitter: https://twitter.com/mahaxyz_\\n\\npragma solidity ^0.8.0;\\n\\nimport {IERC20, IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\n/// @title ILaunchpool\\n/// @notice Interface for the Launchpool contract that allows users to stake tokens and receive rewards\\ninterface ILaunchpool {\\n  /// @notice Struct containing reward drop information\\n  /// @param rewardToken Address of the reward token\\n  /// @param totalReward Total amount of tokens to distribute as rewards\\n  /// @param snapshotIndex Index of when the reward drop was created\\n  struct RewardDrop {\\n    IERC20 rewardToken;\\n    uint256 totalReward;\\n    uint32 snapshotIndex;\\n  }\\n\\n  /// @notice Emitted when a new reward is funded\\n  /// @param rewardToken Address of the reward token\\n  /// @param amount Amount of tokens funded\\n  event RewardFunded(IERC20 indexed rewardToken, uint256 amount);\\n\\n  /// @notice Emitted when a user withdraws staked tokens\\n  /// @param user Address of the user\\n  /// @param amount Amount withdrawn\\n  event Withdraw(address indexed user, uint256 amount);\\n\\n  /// @notice Emitted when a user stakes tokens\\n  /// @param user Address of the user\\n  /// @param amount Amount staked\\n  event Stake(address indexed user, uint256 amount);\\n\\n  /// @notice Emitted when a user claims rewards\\n  /// @param user Address of the user\\n  /// @param rewardToken Address of the reward token\\n  /// @param amount Amount of rewards claimed\\n  event RewardClaimed(address indexed user, IERC20 indexed rewardToken, uint256 amount);\\n\\n  /// @notice Emitted when the contract is killed\\n  event Killed();\\n\\n  /// @notice Emitted when a transfer occurs\\n  /// @param from Address of the sender\\n  /// @param to Address of the recipient\\n  /// @param amount Amount of tokens transferred\\n  event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n  /// @notice Initializes the contract\\n  /// @param _stakingToken Address of the token that can be staked\\n  /// @param _launchpad Address of the launchpad contract\\n  /// @param _name Name of the token\\n  /// @param _symbol Symbol of the token\\n  /// @param _owner Owner of the contract\\n  function initialize(\\n    string memory _name,\\n    string memory _symbol,\\n    address _stakingToken,\\n    address _owner,\\n    address _launchpad\\n  ) external;\\n\\n  /// @notice Allows users to stake tokens\\n  /// @param amount Amount of tokens to stake\\n  function stake(uint256 amount) external;\\n\\n  /// @notice Allows users to withdraw staked tokens\\n  /// @param amount Amount of tokens to withdraw\\n  function withdraw(uint256 amount) external;\\n\\n  /// @notice Allows the launchpad to fund new rewards\\n  /// @param rewardToken Address of the reward token\\n  /// @param amount Amount of tokens to fund as rewards\\n  function fundReward(IERC20 rewardToken, uint256 amount) external;\\n\\n  /// @notice Allows users to claim their share of rewards\\n  /// @param rewardToken Address of the reward token to claim\\n  function claim(IERC20 rewardToken) external;\\n\\n  /// @notice Gets a user's staked amount at a specific block\\n  /// @param user Address of the user\\n  /// @param historyIndex Index of the block to check\\n  /// @return User's staked amount at the specified block\\n  function getUserStakeAt(address user, uint32 historyIndex) external view returns (uint256);\\n\\n  /// @notice Gets the total staked amount at a specific block\\n  /// @param historyIndex Index of the block to check\\n  /// @return Total staked amount at the specified block\\n  function getTotalStakeAt(uint32 historyIndex) external view returns (uint256);\\n\\n  /// @notice Checks if a user has claimed rewards for a specific token\\n  /// @param user Address of the user\\n  /// @param rewardToken Address of the reward token\\n  /// @return Whether the user has claimed the reward\\n  function hasClaimed(address user, IERC20 rewardToken) external view returns (bool);\\n\\n  /// @notice The token that users can stake in this contract\\n  function stakingToken() external view returns (IERC20Metadata);\\n\\n  /// @notice Current staked amount for each user\\n  function currentStake(address user) external view returns (uint256);\\n\\n  /// @notice Tracks if a user has claimed a specific reward token\\n  function claimed(IERC20 rewardToken, address user) external view returns (bool);\\n\\n  /// @notice Address of the launchpad contract that can fund rewards\\n  function launchpad() external view returns (address);\\n\\n  /// @notice Index of the next block to be added to the history\\n  function historyIndex() external view returns (uint32);\\n}\\n\",\"keccak256\":\"0x3ad6f8ef57233ce4651fd54b6cc9dc8f538865bbd8110c0c60bdf35c0309d301\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ITokenLaunchpad.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\n// \\u2588\\u2588\\u2588\\u2557   \\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2557  \\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\n// \\u2588\\u2588\\u2554\\u2588\\u2588\\u2588\\u2588\\u2554\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2551 \\u255a\\u2550\\u255d \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\n// \\u255a\\u2550\\u255d     \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\n\\n// Website: https://wagmie.com\\n// Telegram: https://t.me/mahaxyz\\n// Twitter: https://twitter.com/mahaxyz_\\n\\npragma solidity ^0.8.0;\\n\\nimport {ICLMMAdapter} from \\\"./ICLMMAdapter.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {ILaunchpool} from \\\"contracts/interfaces/ILaunchpool.sol\\\";\\n\\n/// @title ITokenLaunchpad Interface\\n/// @notice Interface for the TokenLaunchpad contract that handles token launches\\ninterface ITokenLaunchpad {\\n  /// @notice Parameters required to create a new token launch\\n  /// @param name The name of the token\\n  /// @param symbol The symbol of the token\\n  /// @param metadata IPFS hash or other metadata about the token\\n  /// @param fundingToken The token used for funding the launch\\n  /// @param salt Random value to ensure unique deployment address\\n  /// @param launchTick The tick at which the token launches\\n  /// @param graduationTick The tick that must be reached for graduation\\n  /// @param upperMaxTick The maximum tick allowed\\n  /// @param isPremium Whether the token is premium\\n  /// @param graduationLiquidity The liquidity at graduation\\n  /// @param launchPoolAllocations The launchpool allocations\\n  /// @param creatorAllocation Percentage of total supply to allocate to creator (max 5%)\\n  /// @param fee The fee for the token liquidity pair\\n  /// @param adapter The adapter used for the token launch\\n  struct CreateParams {\\n    bool isPremium;\\n    bytes32 salt;\\n    ICLMMAdapter adapter;\\n    IERC20 fundingToken;\\n    ILaunchpool[] launchPools;\\n    string metadata;\\n    string name;\\n    string symbol;\\n    uint16 creatorAllocation;\\n    uint256[] launchPoolAmounts;\\n    ValueParams valueParams;\\n  }\\n\\n  // Contains numeric launch parameters\\n  struct ValueParams {\\n    int24 launchTick;\\n    int24 graduationTick;\\n    int24 upperMaxTick;\\n    uint24 fee;\\n    int24 tickSpacing;\\n    uint256 graduationLiquidity;\\n  }\\n\\n  /// @notice Emitted when fee settings are updated\\n  /// @param feeDestination The address where fees will be sent\\n  /// @param fee The new fee amount\\n  event FeeUpdated(address indexed feeDestination, uint256 fee);\\n\\n  /// @notice Emitted when a token is launched\\n  /// @param token The token that was launched\\n  /// @param adapter The address of the adapter used to launch the token\\n  /// @param pool The address of the pool for the token\\n  /// @param params The parameters used to launch the token\\n  event TokenLaunched(IERC20 indexed token, address indexed adapter, address indexed pool, CreateParams params);\\n\\n  /// @notice Emitted when referral settings are updated\\n  /// @param referralDestination The address where referrals will be sent\\n  /// @param referralFee The new referral fee amount\\n  event ReferralUpdated(address indexed referralDestination, uint256 referralFee);\\n\\n  /// @notice Emitted when tokens are allocated to the creator\\n  /// @param token The token that was launched\\n  /// @param creator The address of the creator\\n  /// @param amount The amount of tokens allocated to the creator\\n  event CreatorAllocation(IERC20 indexed token, address indexed creator, uint256 amount);\\n\\n  /// @notice Emitted when an adapter is set\\n  /// @param _adapter The adapter address\\n  /// @param _enabled Whether the adapter is enabled\\n  event AdapterSet(address indexed _adapter, bool _enabled);\\n\\n  /// @notice Emitted when a whitelist is updated\\n  /// @param _address The address that was updated\\n  /// @param _whitelisted Whether the address is whitelisted\\n  event WhitelistUpdated(address indexed _address, bool _whitelisted);\\n\\n  /// @notice Emitted when the cron is updated\\n  /// @param newCron The new cron address\\n  event CronUpdated(address indexed newCron);\\n\\n  /// @notice Emitted when the metadata URL is updated\\n  /// @param metadataUrl The new metadata URL\\n  event MetadataUrlUpdated(string metadataUrl);\\n\\n  /// @notice Initializes the launchpad contract\\n  /// @param _owner The owner address\\n  /// @param _weth The WETH9 contract address\\n  /// @param _premiumToken The token used for fee discount\\n  function initialize(address _owner, address _weth, address _premiumToken) external;\\n\\n  /// @notice Toggles the whitelist for an address\\n  /// @param _address The address to toggle the whitelist for\\n  function toggleWhitelist(address _address) external;\\n\\n  /// @notice Sets the value parameters for a token\\n  /// @param _token The token to set the value parameters for\\n  /// @param _adapter The adapter to set the value parameters for\\n  /// @param _params The value parameters to set\\n  function setDefaultValueParams(IERC20 _token, ICLMMAdapter _adapter, ValueParams memory _params) external;\\n\\n  /// @notice Sets the cron address\\n  /// @param _cron The new cron address\\n  function setCron(address _cron) external;\\n\\n  /// @notice Gets the quote token for a token\\n  /// @param _token The token to get the quote token for\\n  /// @return quoteToken The quote token for the token\\n  function getQuoteToken(IERC20 _token) external view returns (IERC20 quoteToken);\\n\\n  /// @notice Gets the value parameters for a token\\n  /// @param _token The token to get the value parameters for\\n  /// @return params The value parameters for the token\\n  function getDefaultValueParams(IERC20 _token, ICLMMAdapter _adapter)\\n    external\\n    view\\n    returns (ValueParams memory params);\\n\\n  /// @notice Gets the adapter for a token\\n  /// @param _token The token to get the adapter for\\n  /// @return adapter The adapter for the token\\n  function getTokenAdapter(IERC20 _token) external view returns (ICLMMAdapter);\\n\\n  /// @notice Gets the fee for a token\\n  /// @param _token The token to get the fee for\\n  /// @return fee The fee for the token\\n  function getTokenFee(IERC20 _token) external view returns (uint24 fee);\\n\\n  /// @notice Updates the referral settings\\n  /// @param _referralDestination The address to receive referrals\\n  /// @param _referralFee The new referral fee amount\\n  function setReferralSettings(address _referralDestination, uint256 _referralFee) external;\\n\\n  /// @notice Updates the fee settings\\n  /// @param _feeDestination The address to receive fees\\n  /// @param _fee The new fee amount\\n  /// @param _feeDiscountAmount The amount of fee discount\\n  function setFeeSettings(address _feeDestination, uint256 _fee, uint256 _feeDiscountAmount) external;\\n\\n  /// @notice Creates a new token launch\\n  /// @param p The parameters for the token launch\\n  /// @param expected The expected address where token will be deployed\\n  /// @return token The address of the newly created token\\n  /// @return received The amount of tokens received if the user chooses to buy at launch\\n  /// @return swapped The amount of tokens swapped if the user chooses to swap at launch\\n  function createAndBuy(CreateParams memory p, address expected, uint256 amount)\\n    external\\n    payable\\n    returns (address token, uint256 received, uint256 swapped);\\n\\n  /// @notice Gets the total number of tokens launched\\n  /// @return totalTokens The total count of launched tokens\\n  function getTotalTokens() external view returns (uint256 totalTokens);\\n\\n  /// @notice Claims accumulated fees for a specific token\\n  /// @param _token The token to claim fees for\\n  function claimFees(IERC20 _token) external;\\n\\n  /// @notice Toggle an adapter\\n  /// @param _adapter The adapter address\\n  function toggleAdapter(ICLMMAdapter _adapter) external;\\n\\n  /// @notice Gets the launch parameters for a token\\n  /// @param _token The token to get the launch parameters for\\n  /// @return params The launch parameters for the token\\n  function getTokenLaunchParams(IERC20 _token) external view returns (CreateParams memory params);\\n}\\n\",\"keccak256\":\"0x772d34507491a31015dc91b516ca45e8b291cbf4af558d9565aec5edf9774bfb\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/thirdparty/ICLSwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\n// \\u2588\\u2588\\u2588\\u2557   \\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2557  \\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\n// \\u2588\\u2588\\u2554\\u2588\\u2588\\u2588\\u2588\\u2554\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2551 \\u255a\\u2550\\u255d \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\n// \\u255a\\u2550\\u255d     \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\n\\n// Website: https://maha.xyz\\n// Discord: https://discord.gg/mahadao\\n// Telegram: https://t.me/mahaxyz\\n// Twitter: https://twitter.com/mahaxyz\\n\\npragma solidity ^0.8.0;\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens\\ninterface ICLSwapRouter {\\n  struct ExactInputSingleParams {\\n    address tokenIn;\\n    address tokenOut;\\n    uint24 fee;\\n    address recipient;\\n    uint256 deadline;\\n    uint256 amountIn;\\n    uint256 amountOutMinimum;\\n    uint160 sqrtPriceLimitX96;\\n  }\\n\\n  /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n  /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n  /// @return amountOut The amount of the received token\\n  function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n  struct ExactInputParams {\\n    bytes path;\\n    address recipient;\\n    uint256 deadline;\\n    uint256 amountIn;\\n    uint256 amountOutMinimum;\\n  }\\n\\n  /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n  /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n  /// @return amountOut The amount of the received token\\n  function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n  struct ExactOutputSingleParams {\\n    address tokenIn;\\n    address tokenOut;\\n    uint24 fee;\\n    address recipient;\\n    uint256 deadline;\\n    uint256 amountOut;\\n    uint256 amountInMaximum;\\n    uint160 sqrtPriceLimitX96;\\n  }\\n\\n  /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n  /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n  /// @return amountIn The amount of the input token\\n  function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n  struct ExactOutputParams {\\n    bytes path;\\n    address recipient;\\n    uint256 deadline;\\n    uint256 amountOut;\\n    uint256 amountInMaximum;\\n  }\\n\\n  /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n  /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n  /// @return amountIn The amount of the input token\\n  function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0xa6ece4be6778569a6dd9aa94abc72b64bcfc7fae19ec29cf460fe37328038e52\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/thirdparty/IClPool.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\n// \\u2588\\u2588\\u2588\\u2557   \\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2557  \\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\n// \\u2588\\u2588\\u2554\\u2588\\u2588\\u2588\\u2588\\u2554\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2551 \\u255a\\u2550\\u255d \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\n// \\u255a\\u2550\\u255d     \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\n\\n// Website: https://maha.xyz\\n// Discord: https://discord.gg/mahadao\\n// Telegram: https://t.me/mahaxyz\\n// Twitter: https://twitter.com/mahaxyz\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./pool/IClPoolActions.sol\\\";\\nimport \\\"./pool/IClPoolDerivedState.sol\\\";\\nimport \\\"./pool/IClPoolImmutables.sol\\\";\\nimport \\\"./pool/IClPoolOwnerActions.sol\\\";\\nimport \\\"./pool/IClPoolState.sol\\\";\\n\\n/// @title The interface for a CL V2 Pool\\n/// @notice A CL pool facilitates swapping and automated market making between any two assets that strictly conform\\n/// to the ERC20 specification\\n/// @dev The pool interface is broken up into many smaller pieces\\ninterface IClPool is IClPoolImmutables, IClPoolState, IClPoolDerivedState, IClPoolActions, IClPoolOwnerActions {\\n  /// @notice Initializes a pool with parameters provided\\n  function initialize(\\n    address _factory,\\n    address _nfpManager,\\n    address _veRam,\\n    address _voter,\\n    address _token0,\\n    address _token1,\\n    uint24 _fee,\\n    int24 _tickSpacing\\n  ) external;\\n}\\n\",\"keccak256\":\"0x9230a3aa2af768b734fe75ca71258241bcea4b0e2afec382fd965687467f2206\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/thirdparty/IClPoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\n// \\u2588\\u2588\\u2588\\u2557   \\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2557  \\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\n// \\u2588\\u2588\\u2554\\u2588\\u2588\\u2588\\u2588\\u2554\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2551 \\u255a\\u2550\\u255d \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\n// \\u255a\\u2550\\u255d     \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\n\\n// Website: https://maha.xyz\\n// Discord: https://discord.gg/mahadao\\n// Telegram: https://t.me/mahaxyz\\n// Twitter: https://twitter.com/mahaxyz\\n\\npragma solidity ^0.8.0;\\npragma abicoder v2;\\n\\n/// @title The interface for the CL Factory\\n/// @notice The CL Factory facilitates creation of CL pools and control over the protocol fees\\ninterface IClPoolFactory {\\n  /// @notice Emitted when the owner of the factory is changed\\n  /// @param oldOwner The owner before the owner was changed\\n  /// @param newOwner The owner after the owner was changed\\n  event OwnerChanged(address indexed oldOwner, address indexed newOwner);\\n\\n  /// @notice Emitted when a pool is created\\n  /// @param token0 The first token of the pool by address sort order\\n  /// @param token1 The second token of the pool by address sort order\\n  /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\\n  /// @param tickSpacing The minimum number of ticks between initialized ticks\\n  /// @param pool The address of the created pool\\n  event PoolCreated(\\n    address indexed token0, address indexed token1, uint24 indexed fee, int24 tickSpacing, address pool\\n  );\\n\\n  /// @notice Emitted when a new fee amount is enabled for pool creation via the factory\\n  /// @param fee The enabled fee, denominated in hundredths of a bip\\n  /// @param tickSpacing The minimum number of ticks between initialized ticks for pools created with the given fee\\n  event FeeAmountEnabled(uint24 indexed fee, int24 indexed tickSpacing);\\n\\n  /// @notice Emitted when pairs implementation is changed\\n  /// @param oldImplementation The previous implementation\\n  /// @param newImplementation The new implementation\\n  event ImplementationChanged(address indexed oldImplementation, address indexed newImplementation);\\n\\n  /// @notice Emitted when the fee collector is changed\\n  /// @param oldFeeCollector The previous implementation\\n  /// @param newFeeCollector The new implementation\\n  event FeeCollectorChanged(address indexed oldFeeCollector, address indexed newFeeCollector);\\n\\n  /// @notice Emitted when the protocol fee is changed\\n  /// @param feeProtocol0Old The previous value of the token0 protocol fee\\n  /// @param feeProtocol1Old The previous value of the token1 protocol fee\\n  /// @param feeProtocol0New The updated value of the token0 protocol fee\\n  /// @param feeProtocol1New The updated value of the token1 protocol fee\\n  event SetFeeProtocol(uint8 feeProtocol0Old, uint8 feeProtocol1Old, uint8 feeProtocol0New, uint8 feeProtocol1New);\\n\\n  /// @notice Emitted when the protocol fee is changed\\n  /// @param pool The pool address\\n  /// @param feeProtocol0Old The previous value of the token0 protocol fee\\n  /// @param feeProtocol1Old The previous value of the token1 protocol fee\\n  /// @param feeProtocol0New The updated value of the token0 protocol fee\\n  /// @param feeProtocol1New The updated value of the token1 protocol fee\\n  event SetPoolFeeProtocol(\\n    address pool, uint8 feeProtocol0Old, uint8 feeProtocol1Old, uint8 feeProtocol0New, uint8 feeProtocol1New\\n  );\\n\\n  /// @notice Emitted when the feeSetter of the factory is changed\\n  /// @param oldSetter The feeSetter before the setter was changed\\n  /// @param newSetter The feeSetter after the setter was changed\\n  event FeeSetterChanged(address indexed oldSetter, address indexed newSetter);\\n\\n  /// @notice Returns the current owner of the factory\\n  /// @dev Can be changed by the current owner via setOwner\\n  /// @return The address of the factory owner\\n  function owner() external view returns (address);\\n\\n  /// @notice Returns the CL NFP Manager\\n  function nfpManager() external view returns (address);\\n\\n  /// @notice Returns the votingEscrow address\\n  function votingEscrow() external view returns (address);\\n\\n  /// @notice Returns Voter address\\n  function voter() external view returns (address);\\n\\n  /// @notice Returns the tick spacing for a given fee amount, if enabled, or 0 if not enabled\\n  /// @dev A fee amount can never be removed, so this value should be hard coded or cached in the calling context\\n  /// @param fee The enabled fee, denominated in hundredths of a bip. Returns 0 in case of unenabled fee\\n  /// @return The tick spacing\\n  function feeAmountTickSpacing(uint24 fee) external view returns (int24);\\n\\n  /// @notice Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist\\n  /// @dev tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\\n  /// @param tokenA The contract address of either token0 or token1\\n  /// @param tokenB The contract address of the other token\\n  /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\\n  /// @return pool The pool address\\n  function getPool(address tokenA, address tokenB, uint24 fee) external view returns (address pool);\\n\\n  /// @notice Returns the address of the fee collector contract\\n  /// @dev Fee collector decides where the protocol fees go (fee distributor, treasury, etc.)\\n  function feeCollector() external view returns (address);\\n\\n  /// @notice Creates a pool for the given two tokens and fee\\n  /// @param tokenA One of the two tokens in the desired pool\\n  /// @param tokenB The other of the two tokens in the desired pool\\n  /// @param fee The desired fee for the pool\\n  /// @param sqrtPriceX96 initial sqrtPriceX96 of the pool\\n  /// @dev tokenA and tokenB may be passed in either order: token0/token1 or token1/token0. tickSpacing is retrieved\\n  /// from the fee. The call will revert if the pool already exists, the fee is invalid, or the token arguments\\n  /// are invalid.\\n  /// @return pool The address of the newly created pool\\n  function createPool(address tokenA, address tokenB, uint24 fee, uint160 sqrtPriceX96) external returns (address pool);\\n\\n  /// @notice Updates the owner of the factory\\n  /// @dev Must be called by the current owner\\n  /// @param _owner The new owner of the factory\\n  function setOwner(address _owner) external;\\n\\n  /// @notice Enables a fee amount with the given tickSpacing\\n  /// @dev Fee amounts may never be removed once enabled\\n  /// @param fee The fee amount to enable, denominated in hundredths of a bip (i.e. 1e-6)\\n  /// @param tickSpacing The spacing between ticks to be enforced for all pools created with the given fee amount\\n  function enableFeeAmount(uint24 fee, int24 tickSpacing) external;\\n\\n  /// @notice returns the default protocol fee.\\n  function feeProtocol() external view returns (uint8);\\n\\n  /// @notice returns the protocol fee for both tokens of a pool.\\n  function poolFeeProtocol(address pool) external view returns (uint8);\\n\\n  /// @notice Sets the default protocol's % share of the fees\\n  /// @param _feeProtocol new default protocol fee for token0 and token1\\n  function setFeeProtocol(uint8 _feeProtocol) external;\\n\\n  /// @notice Sets the fee collector address\\n  /// @param _feeCollector the fee collector address\\n  function setFeeCollector(address _feeCollector) external;\\n\\n  function setFeeSetter(address _newFeeSetter) external;\\n\\n  function setFee(address _pool, uint24 _fee) external;\\n\\n  /// @notice Sets the default protocol's % share of the fees\\n  /// @param pool the pool address\\n  /// @param feeProtocol new protocol fee for the pool for token0 and token1\\n  function setPoolFeeProtocol(address pool, uint8 feeProtocol) external;\\n}\\n\",\"keccak256\":\"0x8520ff7b567b0aebc095c852fd23ff2bacfa866227ed7381133896606a29df13\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/thirdparty/pool/IClPoolActions.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Permissionless pool actions\\n/// @notice Contains pool methods that can be called by anyone\\ninterface IClPoolActions {\\n  /// @notice Sets the initial price for the pool\\n  /// @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\\n  /// @param sqrtPriceX96 the initial sqrt price of the pool as a Q64.96\\n  function initialize(uint160 sqrtPriceX96) external;\\n\\n  /// @notice Adds liquidity for the given recipient/tickLower/tickUpper position at index 0\\n  /// @dev The caller of this method receives a callback in the form of IRamsesV2MintCallback#ramsesV2MintCallback\\n  /// in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\\n  /// on tickLower, tickUpper, the amount of liquidity, and the current price.\\n  /// @param recipient The address for which the liquidity will be created\\n  /// @param tickLower The lower tick of the position in which to add liquidity\\n  /// @param tickUpper The upper tick of the position in which to add liquidity\\n  /// @param amount The amount of liquidity to mint\\n  /// @param data Any data that should be passed through to the callback\\n  /// @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the\\n  /// callback\\n  /// @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the\\n  /// callback\\n  function mint(address recipient, int24 tickLower, int24 tickUpper, uint128 amount, bytes calldata data)\\n    external\\n    returns (uint256 amount0, uint256 amount1);\\n\\n  /// @notice Adds liquidity for the given recipient/tickLower/tickUpper position\\n  /// @dev The caller of this method receives a callback in the form of IRamsesV2MintCallback#ramsesV2MintCallback\\n  /// in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\\n  /// on tickLower, tickUpper, the amount of liquidity, and the current price.\\n  /// @param recipient The address for which the liquidity will be created\\n  /// @param index The index for which the liquidity will be created\\n  /// @param tickLower The lower tick of the position in which to add liquidity\\n  /// @param tickUpper The upper tick of the position in which to add liquidity\\n  /// @param amount The amount of liquidity to mint\\n  /// @param veNFTTokenId The veNFT tokenId to attach to the position\\n  /// @param data Any data that should be passed through to the callback\\n  /// @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the\\n  /// callback\\n  /// @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the\\n  /// callback\\n  function mint(\\n    address recipient,\\n    uint256 index,\\n    int24 tickLower,\\n    int24 tickUpper,\\n    uint128 amount,\\n    uint256 veNFTTokenId,\\n    bytes calldata data\\n  ) external returns (uint256 amount0, uint256 amount1);\\n\\n  /// @notice Collects tokens owed to a position\\n  /// @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\\n  /// Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\\n  /// amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\\n  /// actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\\n  /// @param recipient The address which should receive the fees collected\\n  /// @param tickLower The lower tick of the position for which to collect fees\\n  /// @param tickUpper The upper tick of the position for which to collect fees\\n  /// @param amount0Requested How much token0 should be withdrawn from the fees owed\\n  /// @param amount1Requested How much token1 should be withdrawn from the fees owed\\n  /// @return amount0 The amount of fees collected in token0\\n  /// @return amount1 The amount of fees collected in token1\\n  function collect(\\n    address recipient,\\n    int24 tickLower,\\n    int24 tickUpper,\\n    uint128 amount0Requested,\\n    uint128 amount1Requested\\n  ) external returns (uint128 amount0, uint128 amount1);\\n\\n  /// @notice Collects tokens owed to a position\\n  /// @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\\n  /// Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\\n  /// amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\\n  /// actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\\n  /// @param recipient The address which should receive the fees collected\\n  /// @param index The index of the position to be collected\\n  /// @param tickLower The lower tick of the position for which to collect fees\\n  /// @param tickUpper The upper tick of the position for which to collect fees\\n  /// @param amount0Requested How much token0 should be withdrawn from the fees owed\\n  /// @param amount1Requested How much token1 should be withdrawn from the fees owed\\n  /// @return amount0 The amount of fees collected in token0\\n  /// @return amount1 The amount of fees collected in token1\\n  function collect(\\n    address recipient,\\n    uint256 index,\\n    int24 tickLower,\\n    int24 tickUpper,\\n    uint128 amount0Requested,\\n    uint128 amount1Requested\\n  ) external returns (uint128 amount0, uint128 amount1);\\n\\n  /// @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position at index 0\\n  /// @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\\n  /// @dev Fees must be collected separately via a call to #collect\\n  /// @param tickLower The lower tick of the position for which to burn liquidity\\n  /// @param tickUpper The upper tick of the position for which to burn liquidity\\n  /// @param amount How much liquidity to burn\\n  /// @return amount0 The amount of token0 sent to the recipient\\n  /// @return amount1 The amount of token1 sent to the recipient\\n  function burn(int24 tickLower, int24 tickUpper, uint128 amount) external returns (uint256 amount0, uint256 amount1);\\n\\n  /// @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\\n  /// @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\\n  /// @dev Fees must be collected separately via a call to #collect\\n  /// @param index The index for which the liquidity will be burned\\n  /// @param tickLower The lower tick of the position for which to burn liquidity\\n  /// @param tickUpper The upper tick of the position for which to burn liquidity\\n  /// @param amount How much liquidity to burn\\n  /// @return amount0 The amount of token0 sent to the recipient\\n  /// @return amount1 The amount of token1 sent to the recipient\\n  function burn(uint256 index, int24 tickLower, int24 tickUpper, uint128 amount)\\n    external\\n    returns (uint256 amount0, uint256 amount1);\\n\\n  /// @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\\n  /// @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\\n  /// @dev Fees must be collected separately via a call to #collect\\n  /// @param index The index for which the liquidity will be burned\\n  /// @param tickLower The lower tick of the position for which to burn liquidity\\n  /// @param tickUpper The upper tick of the position for which to burn liquidity\\n  /// @param amount How much liquidity to burn\\n  /// @param veNFTTokenId The veNFT Token Id to attach\\n  /// @return amount0 The amount of token0 sent to the recipient\\n  /// @return amount1 The amount of token1 sent to the recipient\\n  function burn(uint256 index, int24 tickLower, int24 tickUpper, uint128 amount, uint256 veNFTTokenId)\\n    external\\n    returns (uint256 amount0, uint256 amount1);\\n\\n  /// @notice Swap token0 for token1, or token1 for token0\\n  /// @dev The caller of this method receives a callback in the form of IRamsesV2SwapCallback#ramsesV2SwapCallback\\n  /// @param recipient The address to receive the output of the swap\\n  /// @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\\n  /// @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or\\n  /// exact output (negative)\\n  /// @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\\n  /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\\n  /// @param data Any data to be passed through to the callback\\n  /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\\n  /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\\n  function swap(\\n    address recipient,\\n    bool zeroForOne,\\n    int256 amountSpecified,\\n    uint160 sqrtPriceLimitX96,\\n    bytes calldata data\\n  ) external returns (int256 amount0, int256 amount1);\\n\\n  /// @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\\n  /// @dev The caller of this method receives a callback in the form of IRamsesV2FlashCallback#ramsesV2FlashCallback\\n  /// @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\\n  /// with 0 amount{0,1} and sending the donation amount(s) from the callback\\n  /// @param recipient The address which will receive the token0 and token1 amounts\\n  /// @param amount0 The amount of token0 to send\\n  /// @param amount1 The amount of token1 to send\\n  /// @param data Any data to be passed through to the callback\\n  function flash(address recipient, uint256 amount0, uint256 amount1, bytes calldata data) external;\\n\\n  /// @notice Increase the maximum number of price and liquidity observations that this pool will store\\n  /// @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\\n  /// the input observationCardinalityNext.\\n  /// @param observationCardinalityNext The desired minimum number of observations for the pool to store\\n  function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;\\n}\\n\",\"keccak256\":\"0xd31b65342866b39d682783c7733c9b5660529e353b5b8b5a91bc921c2fb8d181\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/thirdparty/pool/IClPoolDerivedState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that is not stored\\n/// @notice Contains view functions to provide information about the pool that is computed rather than stored on the\\n/// blockchain. The functions here may have variable gas costs.\\ninterface IClPoolDerivedState {\\n  /// @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block\\n  /// timestamp\\n  /// @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one\\n  /// representing\\n  /// the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted\\n  /// average tick,\\n  /// you must call it with secondsAgos = [3600, 0].\\n  /// @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\\n  /// log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\\n  /// @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\\n  /// @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\\n  /// @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each\\n  /// `secondsAgos` from the current block timestamp\\n  /// @return secondsPerBoostedLiquidityPeriodX128s Cumulative seconds per boosted liquidity-in-range value as of each\\n  /// `secondsAgos` from the current block timestamp\\n  function observe(uint32[] calldata secondsAgos)\\n    external\\n    view\\n    returns (\\n      int56[] memory tickCumulatives,\\n      uint160[] memory secondsPerLiquidityCumulativeX128s,\\n      uint160[] memory secondsPerBoostedLiquidityPeriodX128s\\n    );\\n\\n  /// @notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\\n  /// @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\\n  /// I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\\n  /// snapshot is taken and the second snapshot is taken. Boosted data is only valid if it's within the same period\\n  /// @param tickLower The lower tick of the range\\n  /// @param tickUpper The upper tick of the range\\n  /// @return tickCumulativeInside The snapshot of the tick accumulator for the range\\n  /// @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range\\n  /// @return secondsPerBoostedLiquidityInsideX128 The snapshot of seconds per boosted liquidity for the range\\n  /// @return secondsInside The snapshot of seconds per liquidity for the range\\n  function snapshotCumulativesInside(int24 tickLower, int24 tickUpper)\\n    external\\n    view\\n    returns (\\n      int56 tickCumulativeInside,\\n      uint160 secondsPerLiquidityInsideX128,\\n      uint160 secondsPerBoostedLiquidityInsideX128,\\n      uint32 secondsInside\\n    );\\n\\n  /// @notice Returns the seconds per liquidity and seconds inside a tick range for a period\\n  /// @param tickLower The lower tick of the range\\n  /// @param tickUpper The upper tick of the range\\n  /// @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range\\n  /// @return secondsPerBoostedLiquidityInsideX128 The snapshot of seconds per boosted liquidity for the range\\n  function periodCumulativesInside(uint32 period, int24 tickLower, int24 tickUpper)\\n    external\\n    view\\n    returns (uint160 secondsPerLiquidityInsideX128, uint160 secondsPerBoostedLiquidityInsideX128);\\n}\\n\",\"keccak256\":\"0x90da27291895822f99b3c6522b87f980df67a88417c1e1ae61923259108580b0\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/thirdparty/pool/IClPoolImmutables.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that never changes\\n/// @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values\\ninterface IClPoolImmutables {\\n  /// @notice The contract that deployed the pool, which must adhere to the IClPoolFactory interface\\n  /// @return The contract address\\n  function factory() external view returns (address);\\n\\n  /// @notice The contract that manages CL NFPs, which must adhere to the INonfungiblePositionManager interface\\n  /// @return The contract address\\n  function nfpManager() external view returns (address);\\n\\n  /// @notice The contract that manages veNFTs, which must adhere to the IVotingEscrow interface\\n  /// @return The contract address\\n  function votingEscrow() external view returns (address);\\n\\n  /// @notice The contract that manages RA votes, which must adhere to the IVoter interface\\n  /// @return The contract address\\n  function voter() external view returns (address);\\n\\n  /// @notice The first of the two tokens of the pool, sorted by address\\n  /// @return The token contract address\\n  function token0() external view returns (address);\\n\\n  /// @notice The second of the two tokens of the pool, sorted by address\\n  /// @return The token contract address\\n  function token1() external view returns (address);\\n\\n  /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\\n  /// @return The fee\\n  function fee() external view returns (uint24);\\n\\n  /// @notice The pool tick spacing\\n  /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\\n  /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\\n  /// This value is an int24 to avoid casting even though it is always positive.\\n  /// @return The tick spacing\\n  function tickSpacing() external view returns (int24);\\n\\n  /// @notice The maximum amount of position liquidity that can use any tick in the range\\n  /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\\n  /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\\n  /// @return The max amount of liquidity per tick\\n  function maxLiquidityPerTick() external view returns (uint128);\\n\\n  /// @notice returns the current fee set for the pool\\n  function currentFee() external view returns (uint24);\\n}\\n\",\"keccak256\":\"0x3d6f8ff1fa2bd08a6f10e096c572b97da277b260c62338aedba1be7b5deeb381\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/thirdparty/pool/IClPoolOwnerActions.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Permissioned pool actions\\n/// @notice Contains pool methods that may only be called by the factory owner\\ninterface IClPoolOwnerActions {\\n  /// @notice Set the protocol's % share of the fees\\n  /// @dev Fees start at 50%, with 5% increments\\n  function setFeeProtocol() external;\\n\\n  /// @notice Collect the protocol fee accrued to the pool\\n  /// @param recipient The address to which collected protocol fees should be sent\\n  /// @param amount0Requested The maximum amount of token0 to send, can be 0 to collect fees in only token1\\n  /// @param amount1Requested The maximum amount of token1 to send, can be 0 to collect fees in only token0\\n  /// @return amount0 The protocol fee collected in token0\\n  /// @return amount1 The protocol fee collected in token1\\n  function collectProtocol(address recipient, uint128 amount0Requested, uint128 amount1Requested)\\n    external\\n    returns (uint128 amount0, uint128 amount1);\\n\\n  function setFee(uint24 _fee) external;\\n}\\n\",\"keccak256\":\"0x8d775146c6bef96fbd75839106d7beb73ee88dc2d5fa8099a126437406c5d99e\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/thirdparty/pool/IClPoolState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that can change\\n/// @notice These methods compose the pool's state, and can change with any frequency including multiple times\\n/// per transaction\\ninterface IClPoolState {\\n  /// @notice reads arbitrary storage slots and returns the bytes\\n  /// @param slots The slots to read from\\n  /// @return returnData The data read from the slots\\n  function readStorage(bytes32[] calldata slots) external view returns (bytes32[] memory returnData);\\n\\n  /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\\n  /// when accessed externally.\\n  /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\\n  /// tick The current tick of the pool, i.e. according to the last tick transition that was run.\\n  /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\\n  /// boundary.\\n  /// observationIndex The index of the last oracle observation that was written,\\n  /// observationCardinality The current maximum number of observations stored in the pool,\\n  /// observationCardinalityNext The next maximum number of observations, to be updated when the observation.\\n  /// feeProtocol The protocol fee for both tokens of the pool.\\n  /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\\n  /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\\n  /// unlocked Whether the pool is currently locked to reentrancy\\n  function slot0()\\n    external\\n    view\\n    returns (\\n      uint160 sqrtPriceX96,\\n      int24 tick,\\n      uint16 observationIndex,\\n      uint16 observationCardinality,\\n      uint16 observationCardinalityNext,\\n      uint8 feeProtocol,\\n      bool unlocked\\n    );\\n\\n  /// @notice Returns the last tick of a given period\\n  /// @param period The period in question\\n  /// @return previousPeriod The period before current period\\n  /// @dev this is because there might be periods without trades\\n  ///  startTick The start tick of the period\\n  ///  lastTick The last tick of the period, if the period is finished\\n  ///  endSecondsPerLiquidityPeriodX128 Seconds per liquidity at period's end\\n  ///  endSecondsPerBoostedLiquidityPeriodX128 Seconds per boosted liquidity at period's end\\n  function periods(uint256 period)\\n    external\\n    view\\n    returns (\\n      uint32 previousPeriod,\\n      int24 startTick,\\n      int24 lastTick,\\n      uint160 endSecondsPerLiquidityCumulativeX128,\\n      uint160 endSecondsPerBoostedLiquidityCumulativeX128,\\n      uint32 boostedInRange\\n    );\\n\\n  /// @notice The last period where a trade or liquidity change happened\\n  function lastPeriod() external view returns (uint256);\\n\\n  /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the\\n  /// pool\\n  /// @dev This value can overflow the uint256\\n  function feeGrowthGlobal0X128() external view returns (uint256);\\n\\n  /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the\\n  /// pool\\n  /// @dev This value can overflow the uint256\\n  function feeGrowthGlobal1X128() external view returns (uint256);\\n\\n  /// @notice The amounts of token0 and token1 that are owed to the protocol\\n  /// @dev Protocol fees will never exceed uint128 max in either token\\n  function protocolFees() external view returns (uint128 token0, uint128 token1);\\n\\n  /// @notice The currently in range liquidity available to the pool\\n  /// @dev This value has no relationship to the total liquidity across all ticks\\n  function liquidity() external view returns (uint128);\\n\\n  /// @notice The currently in range derived liquidity available to the pool\\n  /// @dev This value has no relationship to the total liquidity across all ticks\\n  function boostedLiquidity() external view returns (uint128);\\n\\n  /// @notice Get the boost information for a specific position at a period\\n  /// @return boostAmount the amount of boost this position has for this period,\\n  /// veNFTAmount the amount of veNFTs attached to this position for this period,\\n  /// secondsDebtX96 used to account for changes in the deposit amount during the period\\n  /// boostedSecondsDebtX96 used to account for changes in the boostAmount and veNFT locked during the period,\\n  function boostInfos(uint256 period, bytes32 key)\\n    external\\n    view\\n    returns (uint128 boostAmount, int128 veNFTAmount, int256 secondsDebtX96, int256 boostedSecondsDebtX96);\\n\\n  /// @notice Look up information about a specific tick in the pool\\n  /// @param tick The tick to look up\\n  /// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\\n  /// tick upper,\\n  /// liquidityNet how much liquidity changes when the pool price crosses the tick,\\n  /// feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\\n  /// feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\\n  /// tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\\n  /// secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current\\n  /// tick,\\n  /// secondsOutside the seconds spent on the other side of the tick from the current tick,\\n  /// initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to\\n  /// false.\\n  /// Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\\n  /// In addition, these values are only relative and must be used only in comparison to previous snapshots for\\n  /// a specific position.\\n  function ticks(int24 tick)\\n    external\\n    view\\n    returns (\\n      uint128 liquidityGross,\\n      int128 liquidityNet,\\n      uint128 boostedLiquidityGross,\\n      int128 boostedLiquidityNet,\\n      uint256 feeGrowthOutside0X128,\\n      uint256 feeGrowthOutside1X128,\\n      int56 tickCumulativeOutside,\\n      uint160 secondsPerLiquidityOutsideX128,\\n      uint32 secondsOutside,\\n      bool initialized\\n    );\\n\\n  /// @notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information\\n  function tickBitmap(int16 wordPosition) external view returns (uint256);\\n\\n  /// @notice Returns the information about a position by the position's key\\n  /// @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\\n  /// @return liquidity The amount of liquidity in the position,\\n  /// @return feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\\n  /// @return feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\\n  /// @return tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\\n  /// @return tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\\n  /// @return attachedVeNFTId the veNFT tokenId attached to the position\\n  function positions(bytes32 key)\\n    external\\n    view\\n    returns (\\n      uint128 liquidity,\\n      uint256 feeGrowthInside0LastX128,\\n      uint256 feeGrowthInside1LastX128,\\n      uint128 tokensOwed0,\\n      uint128 tokensOwed1,\\n      uint256 attachedVeNFTId\\n    );\\n\\n  /// @notice Returns a period's total boost amount and total veNFT attached\\n  /// @param period Period timestamp\\n  /// @return totalBoostAmount The total amount of boost this period has,\\n  /// @return totalVeNFTAmount The total amount of veNFTs attached to this period\\n  function boostInfos(uint256 period) external view returns (uint128 totalBoostAmount, int128 totalVeNFTAmount);\\n\\n  /// @notice Get the period seconds debt of a specific position\\n  /// @param period the period number\\n  /// @param recipient recipient address\\n  /// @param index position index\\n  /// @param tickLower lower bound of range\\n  /// @param tickUpper upper bound of range\\n  /// @return secondsDebtX96 seconds the position was not in range for the period\\n  /// @return boostedSecondsDebtX96 boosted seconds the period\\n  function positionPeriodDebt(uint256 period, address recipient, uint256 index, int24 tickLower, int24 tickUpper)\\n    external\\n    view\\n    returns (int256 secondsDebtX96, int256 boostedSecondsDebtX96);\\n\\n  /// @notice get the period seconds in range of a specific position\\n  /// @param period the period number\\n  /// @param owner owner address\\n  /// @param index position index\\n  /// @param tickLower lower bound of range\\n  /// @param tickUpper upper bound of range\\n  /// @return periodSecondsInsideX96 seconds the position was not in range for the period\\n  /// @return periodBoostedSecondsInsideX96 boosted seconds the period\\n  function positionPeriodSecondsInRange(uint256 period, address owner, uint256 index, int24 tickLower, int24 tickUpper)\\n    external\\n    view\\n    returns (uint256 periodSecondsInsideX96, uint256 periodBoostedSecondsInsideX96);\\n\\n  /// @notice Returns data about a specific observation index\\n  /// @param index The element of the observations array to fetch\\n  /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\\n  /// ago, rather than at a specific index in the array.\\n  /// @return blockTimestamp The timestamp of the observation,\\n  /// @return tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation\\n  /// timestamp,\\n  /// @return secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the\\n  /// observation timestamp,\\n  /// @return initialized whether the observation has been initialized and the values are safe to use\\n  function observations(uint256 index)\\n    external\\n    view\\n    returns (\\n      uint32 blockTimestamp,\\n      int56 tickCumulative,\\n      uint160 secondsPerLiquidityCumulativeX128,\\n      bool initialized,\\n      uint160 secondsPerBoostedLiquidityPeriodX128\\n    );\\n}\\n\",\"keccak256\":\"0x8e7343f3ee7ca2fdeeeae6d14b0e4b3993cc06820aef5a92bc21882bf6ebb652\",\"license\":\"GPL-2.0-or-later\"},\"contracts/launchpad/clmm/adapters/BaseV3Adapter.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\n// \\u2588\\u2588\\u2588\\u2557   \\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2557  \\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\n// \\u2588\\u2588\\u2554\\u2588\\u2588\\u2588\\u2588\\u2554\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2551 \\u255a\\u2550\\u255d \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\n// \\u255a\\u2550\\u255d    \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\n\\n// Website: https://wagmie.com\\n// Telegram: https://t.me/mahaxyz\\n// Twitter: https://twitter.com/mahaxyz_\\n\\npragma solidity ^0.8.0;\\n\\nimport {IERC20, SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport {IHooks} from \\\"@uniswap/v4-core/src/interfaces/IHooks.sol\\\";\\n\\nimport {TickMath} from \\\"@uniswap/v4-core/src/libraries/TickMath.sol\\\";\\nimport {Currency} from \\\"@uniswap/v4-core/src/types/Currency.sol\\\";\\nimport {IWETH9} from \\\"@uniswap/v4-periphery/src/interfaces/external/IWETH9.sol\\\";\\nimport {ICLMMAdapter, IClPool, PoolKey} from \\\"contracts/interfaces/ICLMMAdapter.sol\\\";\\n\\nimport {ITokenLaunchpad} from \\\"contracts/interfaces/ITokenLaunchpad.sol\\\";\\nimport {ICLSwapRouter} from \\\"contracts/interfaces/thirdparty/ICLSwapRouter.sol\\\";\\nimport {IClPoolFactory} from \\\"contracts/interfaces/thirdparty/IClPoolFactory.sol\\\";\\n\\nabstract contract BaseV3Adapter is ICLMMAdapter {\\n  using SafeERC20 for IERC20;\\n\\n  address internal _me;\\n  address public launchpad;\\n  IClPoolFactory public clPoolFactory;\\n  ICLSwapRouter public swapRouter;\\n  address public locker;\\n  IERC721 public nftPositionManager;\\n  IWETH9 public WETH9;\\n\\n  mapping(IERC20 token => mapping(uint256 index => uint256 lockId)) public tokenToLockId;\\n\\n  function __BaseV3Adapter_init(\\n    address _launchpad,\\n    address _WETH9,\\n    address _locker,\\n    address _swapRouter,\\n    address _nftPositionManager,\\n    address _clPoolFactory\\n  ) internal {\\n    _me = address(this);\\n\\n    clPoolFactory = IClPoolFactory(_clPoolFactory);\\n    launchpad = _launchpad;\\n    locker = _locker;\\n    nftPositionManager = IERC721(_nftPositionManager);\\n    swapRouter = ICLSwapRouter(_swapRouter);\\n    WETH9 = IWETH9(_WETH9);\\n\\n    nftPositionManager.setApprovalForAll(address(locker), true);\\n  }\\n\\n  /// @inheritdoc ICLMMAdapter\\n  function swapWithExactOutput(IERC20 _tokenIn, IERC20 _tokenOut, uint256 _amountOut, uint256 _maxAmountIn, uint24 _fee)\\n    external\\n    virtual\\n    returns (uint256 amountIn)\\n  {\\n    _tokenIn.safeTransferFrom(msg.sender, address(this), _maxAmountIn);\\n    _tokenIn.approve(address(swapRouter), type(uint256).max);\\n    amountIn = swapRouter.exactOutputSingle(\\n      ICLSwapRouter.ExactOutputSingleParams({\\n        tokenIn: address(_tokenIn),\\n        tokenOut: address(_tokenOut),\\n        amountOut: _amountOut,\\n        recipient: msg.sender,\\n        deadline: block.timestamp,\\n        fee: _fee,\\n        amountInMaximum: _maxAmountIn,\\n        sqrtPriceLimitX96: 0\\n      })\\n    );\\n    _refundTokens(_tokenIn);\\n  }\\n\\n  /// @inheritdoc ICLMMAdapter\\n  function swapWithExactInput(IERC20 _tokenIn, IERC20 _tokenOut, uint256 _amountIn, uint256 _minAmountOut, uint24 _fee)\\n    external\\n    virtual\\n    returns (uint256 amountOut)\\n  {\\n    _tokenIn.safeTransferFrom(msg.sender, address(this), _amountIn);\\n    _tokenIn.approve(address(swapRouter), type(uint256).max);\\n\\n    amountOut = swapRouter.exactInputSingle(\\n      ICLSwapRouter.ExactInputSingleParams({\\n        tokenIn: address(_tokenIn),\\n        tokenOut: address(_tokenOut),\\n        amountIn: _amountIn,\\n        recipient: msg.sender,\\n        deadline: block.timestamp,\\n        fee: _fee,\\n        amountOutMinimum: _minAmountOut,\\n        sqrtPriceLimitX96: 0\\n      })\\n    );\\n  }\\n\\n  /// @inheritdoc ICLMMAdapter\\n  function addSingleSidedLiquidity(AddLiquidityParams memory _params) external returns (address) {\\n    require(msg.sender == launchpad, \\\"!launchpad\\\");\\n\\n    uint160 sqrtPriceX96Launch = TickMath.getSqrtPriceAtTick(_params.tick0 - 1);\\n\\n    IClPool pool = _createPool(_params.tokenBase, _params.tokenQuote, _params.fee, sqrtPriceX96Launch);\\n\\n    // calculate and add liquidity for the various tick ranges\\n    _mintAndLock(\\n      _params.tokenBase, _params.tokenQuote, _params.tick0, _params.tick1, _params.fee, _params.graduationAmount, 0\\n    );\\n    _mintAndLock(\\n      _params.tokenBase,\\n      _params.tokenQuote,\\n      _params.tick1,\\n      _params.tick2,\\n      _params.fee,\\n      _params.totalAmount - _params.graduationAmount,\\n      1\\n    );\\n\\n    return address(pool);\\n  }\\n\\n  /// @inheritdoc ICLMMAdapter\\n  function claimFees(address _token) external returns (uint256 fee0, uint256 fee1) {\\n    require(msg.sender == launchpad, \\\"!launchpad\\\");\\n\\n    uint256 lockId0 = tokenToLockId[IERC20(_token)][0];\\n    uint256 lockId1 = tokenToLockId[IERC20(_token)][1];\\n\\n    (uint256 fee00, uint256 fee01) = _collectFees(lockId0);\\n    (uint256 fee10, uint256 fee11) = _collectFees(lockId1);\\n\\n    fee0 = fee00 + fee10;\\n    fee1 = fee01 + fee11;\\n\\n    IERC20 quoteToken = ITokenLaunchpad(launchpad).getQuoteToken(IERC20(_token));\\n    IERC20(_token).transfer(msg.sender, fee0);\\n    quoteToken.transfer(msg.sender, fee1);\\n  }\\n\\n  /// @dev Refund tokens to the owner\\n  /// @param _token The token to refund\\n  function _refundTokens(IERC20 _token) internal {\\n    uint256 remaining = _token.balanceOf(address(this));\\n    if (remaining == 0) return;\\n    _token.safeTransfer(msg.sender, remaining);\\n  }\\n\\n  /// @dev Mint a position and lock it forever\\n  /// @param _token0 The token to mint the position for\\n  /// @param _token1 The token to mint the position for\\n  /// @param _tick0 The lower tick of the position\\n  /// @param _tick1 The upper tick of the position\\n  /// @param _fee The fee of the pool\\n  /// @param _amount0 The amount of tokens to mint the position for\\n  /// @param _index The index of the position\\n  /// @return lockId The lock id of the position\\n  function _mintAndLock(\\n    IERC20 _token0,\\n    IERC20 _token1,\\n    int24 _tick0,\\n    int24 _tick1,\\n    uint24 _fee,\\n    uint256 _amount0,\\n    uint256 _index\\n  ) internal virtual returns (uint256 lockId);\\n\\n  function _collectFees(uint256 _lockId) internal virtual returns (uint256 fee0, uint256 fee1);\\n\\n  /// @dev Create a pool\\n  /// @param _token0 The token to create the pool for\\n  /// @param _token1 The token to create the pool for\\n  /// @param _fee The fee of the pool\\n  /// @param _sqrtPriceX96Launch The sqrt price of the pool\\n  /// @return pool The address of the pool\\n  function _createPool(IERC20 _token0, IERC20 _token1, uint24 _fee, uint160 _sqrtPriceX96Launch)\\n    internal\\n    virtual\\n    returns (IClPool pool);\\n\\n  receive() external payable {}\\n}\\n\",\"keccak256\":\"0xd06ea349c7283168e03e8006a3d8be564957ed8f888dce143218932848c725e5\",\"license\":\"BUSL-1.1\"},\"contracts/launchpad/clmm/adapters/PancakeAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\n// \\u2588\\u2588\\u2588\\u2557   \\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2557  \\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\n// \\u2588\\u2588\\u2554\\u2588\\u2588\\u2588\\u2588\\u2554\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2551 \\u255a\\u2550\\u255d \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\n// \\u255a\\u2550\\u255d    \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\n\\n// Website: https://wagmie.com\\n// Telegram: https://t.me/mahaxyz\\n// Twitter: https://twitter.com/mahaxyz_\\n\\npragma solidity ^0.8.0;\\n\\nimport {BaseV3Adapter, IClPool, IERC20, SafeERC20} from \\\"./BaseV3Adapter.sol\\\";\\nimport {IGoPlusLocker} from \\\"contracts/interfaces/IGoPlusLocker.sol\\\";\\n\\ninterface INonfungiblePositionManagerPancake {\\n  struct MintParams {\\n    address token0;\\n    address token1;\\n    uint24 fee;\\n    int24 tickLower;\\n    int24 tickUpper;\\n    uint256 amount0Desired;\\n    uint256 amount1Desired;\\n    uint256 amount0Min;\\n    uint256 amount1Min;\\n    address recipient;\\n    uint256 deadline;\\n  }\\n\\n  function mint(MintParams calldata params)\\n    external\\n    payable\\n    returns (uint256 tokenId, uint128 liquidity, uint256 amount0, uint256 amount1);\\n}\\n\\ninterface IPancakePoolFactory {\\n  function createPool(IERC20 _token0, IERC20 _token1, uint24 _fee) external returns (address pool);\\n}\\n\\ncontract PancakeAdapter is BaseV3Adapter {\\n  using SafeERC20 for IERC20;\\n\\n  constructor(\\n    address _launchpad,\\n    address _poolFactory,\\n    address _swapRouter,\\n    address _WETH9,\\n    address _locker,\\n    address _nftPositionManager\\n  ) {\\n    __BaseV3Adapter_init(_launchpad, _WETH9, _locker, _swapRouter, _nftPositionManager, _poolFactory);\\n  }\\n\\n  function _mintAndLock(\\n    IERC20 _token0,\\n    IERC20 _token1,\\n    int24 _tick0,\\n    int24 _tick1,\\n    uint24 _fee,\\n    uint256 _amount0,\\n    uint256 _index\\n  ) internal override returns (uint256 lockId) {\\n    // mint the position\\n    uint256 tokenId = _mint(_token0, _token1, _tick0, _tick1, _fee, _amount0);\\n\\n    // lock the liquidity forever; allow this contract to collect fees\\n    lockId = IGoPlusLocker(locker).nextLockId();\\n    IGoPlusLocker(locker).lock(\\n      address(nftPositionManager), tokenId, address(this), address(this), type(uint256).max, \\\"LLP\\\"\\n    );\\n    tokenToLockId[IERC20(_token0)][_index] = lockId;\\n  }\\n\\n  function _collectFees(uint256 _lockId) internal override returns (uint256 fee0, uint256 fee1) {\\n    (fee0, fee1,,) = IGoPlusLocker(locker).collect(_lockId, address(this), type(uint128).max, type(uint128).max);\\n  }\\n\\n  function _mint(IERC20 _token0, IERC20 _token1, int24 _tick0, int24 _tick1, uint24 _fee, uint256 _amount0)\\n    internal\\n    returns (uint256 tokenId)\\n  {\\n    _token0.safeTransferFrom(msg.sender, address(this), _amount0);\\n    _token0.approve(address(nftPositionManager), _amount0);\\n\\n    // mint the position\\n    INonfungiblePositionManagerPancake.MintParams memory params = INonfungiblePositionManagerPancake.MintParams({\\n      token0: address(_token0),\\n      token1: address(_token1),\\n      fee: _fee,\\n      tickLower: _tick0,\\n      tickUpper: _tick1,\\n      amount0Desired: _amount0,\\n      amount1Desired: 0,\\n      amount0Min: 0,\\n      amount1Min: 0,\\n      recipient: _me,\\n      deadline: block.timestamp\\n    });\\n\\n    (tokenId,,,) = INonfungiblePositionManagerPancake(address(nftPositionManager)).mint(params);\\n  }\\n\\n  function _createPool(IERC20 _token0, IERC20 _token1, uint24 _fee, uint160 _sqrtPriceX96Launch)\\n    internal\\n    virtual\\n    override\\n    returns (IClPool pool)\\n  {\\n    address _pool = IPancakePoolFactory(address(clPoolFactory)).createPool(_token0, _token1, _fee);\\n    pool = IClPool(_pool);\\n    pool.initialize(_sqrtPriceX96Launch);\\n  }\\n}\\n\",\"keccak256\":\"0x362da7c452c02f0f10b494580be2533904b2496d38d6e3b7da8a7a8cfd7e4f7d\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506040516119aa3803806119aa83398101604081905261002f91610134565b61003d86848487858a610048565b5050505050506101a8565b60008054306001600160a01b0319918216179091556002805482166001600160a01b038481169190911790915560018054831689831617815560048054841688841690811782556005805486168886169081179091556003805487168a871617905560068054909616948b169490941790945560405163a22cb46560e01b81529081019390935260248301529063a22cb46590604401600060405180830381600087803b1580156100f857600080fd5b505af115801561010c573d6000803e3d6000fd5b50505050505050505050565b80516001600160a01b038116811461012f57600080fd5b919050565b60008060008060008060c0878903121561014d57600080fd5b61015687610118565b955061016460208801610118565b945061017260408801610118565b935061018060608801610118565b925061018e60808801610118565b915061019c60a08801610118565b90509295509295509295565b6117f3806101b76000396000f3fe6080604052600436106100c05760003560e01c8063a4aa863411610074578063f375b5de1161004e578063f375b5de1461020c578063f584d5d01461022c578063ff64fb641461024c57600080fd5b8063a4aa8634146101ac578063c31c9c07146101cc578063d7b96d4e146101ec57600080fd5b806335f99d22116100a557806335f99d221461013e5780634aa4a4fc1461016c578063843978881461018c57600080fd5b806302669b52146100cc57806315a0ea6a1461010957600080fd5b366100c757005b600080fd5b3480156100d857600080fd5b506001546100ec906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561011557600080fd5b5061012961012436600461130d565b610284565b60408051928352602083019190915201610100565b34801561014a57600080fd5b5061015e610159366004611354565b610518565b604051908152602001610100565b34801561017857600080fd5b506006546100ec906001600160a01b031681565b34801561019857600080fd5b506005546100ec906001600160a01b031681565b3480156101b857600080fd5b506100ec6101c7366004611412565b610680565b3480156101d857600080fd5b506003546100ec906001600160a01b031681565b3480156101f857600080fd5b506004546100ec906001600160a01b031681565b34801561021857600080fd5b506002546100ec906001600160a01b031681565b34801561023857600080fd5b5061015e610247366004611354565b61079a565b34801561025857600080fd5b5061015e6102673660046114be565b600760209081526000928352604080842090915290825290205481565b60015460009081906001600160a01b03163314610302576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f216c61756e63687061640000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b6001600160a01b038316600090815260076020908152604080832083805290915280822054600183529082205490918061033b8461090c565b9150915060008061034b8561090c565b909250905061035a8285611519565b97506103668184611519565b6001546040517f3df8a4680000000000000000000000000000000000000000000000000000000081526001600160a01b038c8116600483015292995060009290911690633df8a46890602401602060405180830381865afa1580156103cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103f39190611532565b6040517fa9059cbb000000000000000000000000000000000000000000000000000000008152336004820152602481018b90529091506001600160a01b038b169063a9059cbb906044016020604051808303816000875af115801561045c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610480919061154f565b506040517fa9059cbb000000000000000000000000000000000000000000000000000000008152336004820152602481018990526001600160a01b0382169063a9059cbb906044016020604051808303816000875af11580156104e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061050b919061154f565b5050505050505050915091565b600061052f6001600160a01b0387163330876109c6565b60035460405163095ea7b360e01b81526001600160a01b03918216600482015260001960248201529087169063095ea7b3906044016020604051808303816000875af1158015610583573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105a7919061154f565b5060035460408051610100810182526001600160a01b038981168252888116602083015262ffffff86168284015233606083015242608083015260a0820188905260c08201879052600060e083015291517f414bf389000000000000000000000000000000000000000000000000000000008152919092169163414bf3899161063391906004016115f3565b6020604051808303816000875af1158015610652573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106769190611602565b9695505050505050565b6001546000906001600160a01b031633146106f7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f216c61756e63687061640000000000000000000000000000000000000000000060448201526064016102f9565b60006107126001846040015161070d919061161b565b610a48565b9050600061072e846000015185602001518660a0015185610d29565b905061075984600001518560200151866040015187606001518860a001518961010001516000610e4d565b5061079284600001518560200151866060015187608001518860a001518961010001518a60e0015161078b919061165c565b6001610e4d565b509392505050565b60006107b16001600160a01b0387163330866109c6565b60035460405163095ea7b360e01b81526001600160a01b03918216600482015260001960248201529087169063095ea7b3906044016020604051808303816000875af1158015610805573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610829919061154f565b5060035460408051610100810182526001600160a01b038981168252888116602083015262ffffff86168284015233606083015242608083015260a0820188905260c08201879052600060e083015291517fdb3e2198000000000000000000000000000000000000000000000000000000008152919092169163db3e2198916108b591906004016115f3565b6020604051808303816000875af11580156108d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108f89190611602565b905061090386610fed565b95945050505050565b600480546040517f260e12b00000000000000000000000000000000000000000000000000000000081529182018390523060248301526fffffffffffffffffffffffffffffffff60448301819052606483015260009182916001600160a01b03169063260e12b0906084016080604051808303816000875af1158015610996573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ba919061166f565b50919590945092505050565b6040516001600160a01b038481166024830152838116604483015260648201839052610a429186918216906323b872dd906084015b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611097565b50505050565b60020b600060ff82901d80830118620d89e8811115610a8b57610a8b7f8b86327a0000000000000000000000000000000000000000000000000000000084611121565b7001fffcb933bd6fad37aa2d162d1a5940016001821602700100000000000000000000000000000000186002821615610ad4576ffff97272373d413259a46990580e213a0260801c5b6004821615610af3576ffff2e50f5f656932ef12357cf3c7fdcc0260801c5b6008821615610b12576fffe5caca7e10e4e61c3624eaa0941cd00260801c5b6010821615610b31576fffcb9843d60f6159c9db58835c9266440260801c5b6020821615610b50576fff973b41fa98c081472e6896dfb254c00260801c5b6040821615610b6f576fff2ea16466c96a3843ec78b326b528610260801c5b6080821615610b8e576ffe5dee046a99a2a811c461f1969c30530260801c5b610100821615610bae576ffcbe86c7900a88aedcffc83b479aa3a40260801c5b610200821615610bce576ff987a7253ac413176f2b074cf7815e540260801c5b610400821615610bee576ff3392b0822b70005940c7a398e4b70f30260801c5b610800821615610c0e576fe7159475a2c29b7443b29c7fa6e889d90260801c5b611000821615610c2e576fd097f3bdfd2022b8845ad8f792aa58250260801c5b612000821615610c4e576fa9f746462d870fdf8a65dc1f90e061e50260801c5b614000821615610c6e576f70d869a156d2a1b890bb3df62baf32f70260801c5b618000821615610c8e576f31be135f97d08fd981231505542fcfa60260801c5b62010000821615610caf576f09aa508b5b7a84e1c677de54f3e99bc90260801c5b62020000821615610ccf576e5d6af8dedb81196699c329225ee6040260801c5b62040000821615610cee576d2216e584f5fa1ea926041bedfe980260801c5b62080000821615610d0b576b048a170391f7dc42444e8fa20260801c5b6000841315610d1957600019045b63ffffffff0160201c9392505050565b6002546040517fa16712950000000000000000000000000000000000000000000000000000000081526001600160a01b038681166004830152858116602483015262ffffff85166044830152600092839291169063a1671295906064016020604051808303816000875af1158015610da5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dc99190611532565b6040517ff637731d0000000000000000000000000000000000000000000000000000000081526001600160a01b0385811660048301529193508392509082169063f637731d90602401600060405180830381600087803b158015610e2c57600080fd5b505af1158015610e40573d6000803e3d6000fd5b5050505050949350505050565b600080610e5e898989898989611132565b9050600460009054906101000a90046001600160a01b03166001600160a01b0316636518a0b36040518163ffffffff1660e01b8152600401602060405180830381865afa158015610eb3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ed79190611602565b600480546005546040517f87d8de3d0000000000000000000000000000000000000000000000000000000081526001600160a01b03918216938101939093526024830185905230604484018190526064840152600019608484015260c060a4840152600360c48401527f4c4c50000000000000000000000000000000000000000000000000000000000060e484015292945091909116906387d8de3d90610104016020604051808303816000875af1158015610f97573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fbb9190611602565b50506001600160a01b039097166000908152600760209081526040808320938352929052208690555093949350505050565b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa15801561104d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110719190611602565b90508060000361107f575050565b6110936001600160a01b03831633836112bf565b5050565b600080602060008451602086016000885af1806110ba576040513d6000823e3d81fd5b50506000513d915081156110d25780600114156110df565b6001600160a01b0384163b155b15610a42576040517f5274afe70000000000000000000000000000000000000000000000000000000081526001600160a01b03851660048201526024016102f9565b816000528060020b60045260246000fd5b60006111496001600160a01b0388163330856109c6565b60055460405163095ea7b360e01b81526001600160a01b039182166004820152602481018490529088169063095ea7b3906044016020604051808303816000875af115801561119c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111c0919061154f565b5060408051610160810182526001600160a01b03808a168252888116602083015262ffffff861682840152600288810b606084015287900b608083015260a08201859052600060c0830181905260e0830181905261010083018190525481166101208301524261014083015260055492517f883164560000000000000000000000000000000000000000000000000000000081529192169063883164569061126c9084906004016116a5565b6080604051808303816000875af115801561128b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112af9190611769565b50919a9950505050505050505050565b6040516001600160a01b038381166024830152604482018390526112f091859182169063a9059cbb906064016109fb565b505050565b6001600160a01b038116811461130a57600080fd5b50565b60006020828403121561131f57600080fd5b813561132a816112f5565b9392505050565b803561133c816112f5565b919050565b803562ffffff8116811461133c57600080fd5b600080600080600060a0868803121561136c57600080fd5b8535611377816112f5565b94506020860135611387816112f5565b935060408601359250606086013591506113a360808701611341565b90509295509295909350565b604051610120810167ffffffffffffffff811182821017156113fa577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405290565b8035600281900b811461133c57600080fd5b600061012082840312801561142657600080fd5b5061142f6113af565b61143883611331565b815261144660208401611331565b602082015261145760408401611400565b604082015261146860608401611400565b606082015261147960808401611400565b608082015261148a60a08401611341565b60a082015261149b60c08401611400565b60c082015260e08381013590820152610100928301359281019290925250919050565b600080604083850312156114d157600080fd5b82356114dc816112f5565b946020939093013593505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8082018082111561152c5761152c6114ea565b92915050565b60006020828403121561154457600080fd5b815161132a816112f5565b60006020828403121561156157600080fd5b8151801515811461132a57600080fd5b6001600160a01b0381511682526001600160a01b03602082015116602083015262ffffff604082015116604083015260608101516115ba60608401826001600160a01b03169052565b506080810151608083015260a081015160a083015260c081015160c083015260e08101516112f060e08401826001600160a01b03169052565b610100810161152c8284611571565b60006020828403121561161457600080fd5b5051919050565b600282810b9082900b037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8000008112627fffff8213171561152c5761152c6114ea565b8181038181111561152c5761152c6114ea565b6000806000806080858703121561168557600080fd5b505082516020840151604085015160609095015191969095509092509050565b81516001600160a01b03168152610160810160208301516116d160208401826001600160a01b03169052565b5060408301516116e8604084018262ffffff169052565b5060608301516116fd606084018260020b9052565b506080830151611712608084018260020b9052565b5060a083015160a083015260c083015160c083015260e083015160e08301526101008301516101008301526101208301516117596101208401826001600160a01b03169052565b5061014092830151919092015290565b6000806000806080858703121561177f57600080fd5b845160208601519094506fffffffffffffffffffffffffffffffff811681146117a757600080fd5b604086015160609096015194979096509250505056fea26469706673582212206a2690784f14af3d935c2212f0bb2ecd519502e887b5b6bbd457f84d7399135864736f6c634300081c0033",
  "deployedBytecode": "0x6080604052600436106100c05760003560e01c8063a4aa863411610074578063f375b5de1161004e578063f375b5de1461020c578063f584d5d01461022c578063ff64fb641461024c57600080fd5b8063a4aa8634146101ac578063c31c9c07146101cc578063d7b96d4e146101ec57600080fd5b806335f99d22116100a557806335f99d221461013e5780634aa4a4fc1461016c578063843978881461018c57600080fd5b806302669b52146100cc57806315a0ea6a1461010957600080fd5b366100c757005b600080fd5b3480156100d857600080fd5b506001546100ec906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561011557600080fd5b5061012961012436600461130d565b610284565b60408051928352602083019190915201610100565b34801561014a57600080fd5b5061015e610159366004611354565b610518565b604051908152602001610100565b34801561017857600080fd5b506006546100ec906001600160a01b031681565b34801561019857600080fd5b506005546100ec906001600160a01b031681565b3480156101b857600080fd5b506100ec6101c7366004611412565b610680565b3480156101d857600080fd5b506003546100ec906001600160a01b031681565b3480156101f857600080fd5b506004546100ec906001600160a01b031681565b34801561021857600080fd5b506002546100ec906001600160a01b031681565b34801561023857600080fd5b5061015e610247366004611354565b61079a565b34801561025857600080fd5b5061015e6102673660046114be565b600760209081526000928352604080842090915290825290205481565b60015460009081906001600160a01b03163314610302576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f216c61756e63687061640000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b6001600160a01b038316600090815260076020908152604080832083805290915280822054600183529082205490918061033b8461090c565b9150915060008061034b8561090c565b909250905061035a8285611519565b97506103668184611519565b6001546040517f3df8a4680000000000000000000000000000000000000000000000000000000081526001600160a01b038c8116600483015292995060009290911690633df8a46890602401602060405180830381865afa1580156103cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103f39190611532565b6040517fa9059cbb000000000000000000000000000000000000000000000000000000008152336004820152602481018b90529091506001600160a01b038b169063a9059cbb906044016020604051808303816000875af115801561045c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610480919061154f565b506040517fa9059cbb000000000000000000000000000000000000000000000000000000008152336004820152602481018990526001600160a01b0382169063a9059cbb906044016020604051808303816000875af11580156104e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061050b919061154f565b5050505050505050915091565b600061052f6001600160a01b0387163330876109c6565b60035460405163095ea7b360e01b81526001600160a01b03918216600482015260001960248201529087169063095ea7b3906044016020604051808303816000875af1158015610583573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105a7919061154f565b5060035460408051610100810182526001600160a01b038981168252888116602083015262ffffff86168284015233606083015242608083015260a0820188905260c08201879052600060e083015291517f414bf389000000000000000000000000000000000000000000000000000000008152919092169163414bf3899161063391906004016115f3565b6020604051808303816000875af1158015610652573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106769190611602565b9695505050505050565b6001546000906001600160a01b031633146106f7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f216c61756e63687061640000000000000000000000000000000000000000000060448201526064016102f9565b60006107126001846040015161070d919061161b565b610a48565b9050600061072e846000015185602001518660a0015185610d29565b905061075984600001518560200151866040015187606001518860a001518961010001516000610e4d565b5061079284600001518560200151866060015187608001518860a001518961010001518a60e0015161078b919061165c565b6001610e4d565b509392505050565b60006107b16001600160a01b0387163330866109c6565b60035460405163095ea7b360e01b81526001600160a01b03918216600482015260001960248201529087169063095ea7b3906044016020604051808303816000875af1158015610805573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610829919061154f565b5060035460408051610100810182526001600160a01b038981168252888116602083015262ffffff86168284015233606083015242608083015260a0820188905260c08201879052600060e083015291517fdb3e2198000000000000000000000000000000000000000000000000000000008152919092169163db3e2198916108b591906004016115f3565b6020604051808303816000875af11580156108d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108f89190611602565b905061090386610fed565b95945050505050565b600480546040517f260e12b00000000000000000000000000000000000000000000000000000000081529182018390523060248301526fffffffffffffffffffffffffffffffff60448301819052606483015260009182916001600160a01b03169063260e12b0906084016080604051808303816000875af1158015610996573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ba919061166f565b50919590945092505050565b6040516001600160a01b038481166024830152838116604483015260648201839052610a429186918216906323b872dd906084015b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611097565b50505050565b60020b600060ff82901d80830118620d89e8811115610a8b57610a8b7f8b86327a0000000000000000000000000000000000000000000000000000000084611121565b7001fffcb933bd6fad37aa2d162d1a5940016001821602700100000000000000000000000000000000186002821615610ad4576ffff97272373d413259a46990580e213a0260801c5b6004821615610af3576ffff2e50f5f656932ef12357cf3c7fdcc0260801c5b6008821615610b12576fffe5caca7e10e4e61c3624eaa0941cd00260801c5b6010821615610b31576fffcb9843d60f6159c9db58835c9266440260801c5b6020821615610b50576fff973b41fa98c081472e6896dfb254c00260801c5b6040821615610b6f576fff2ea16466c96a3843ec78b326b528610260801c5b6080821615610b8e576ffe5dee046a99a2a811c461f1969c30530260801c5b610100821615610bae576ffcbe86c7900a88aedcffc83b479aa3a40260801c5b610200821615610bce576ff987a7253ac413176f2b074cf7815e540260801c5b610400821615610bee576ff3392b0822b70005940c7a398e4b70f30260801c5b610800821615610c0e576fe7159475a2c29b7443b29c7fa6e889d90260801c5b611000821615610c2e576fd097f3bdfd2022b8845ad8f792aa58250260801c5b612000821615610c4e576fa9f746462d870fdf8a65dc1f90e061e50260801c5b614000821615610c6e576f70d869a156d2a1b890bb3df62baf32f70260801c5b618000821615610c8e576f31be135f97d08fd981231505542fcfa60260801c5b62010000821615610caf576f09aa508b5b7a84e1c677de54f3e99bc90260801c5b62020000821615610ccf576e5d6af8dedb81196699c329225ee6040260801c5b62040000821615610cee576d2216e584f5fa1ea926041bedfe980260801c5b62080000821615610d0b576b048a170391f7dc42444e8fa20260801c5b6000841315610d1957600019045b63ffffffff0160201c9392505050565b6002546040517fa16712950000000000000000000000000000000000000000000000000000000081526001600160a01b038681166004830152858116602483015262ffffff85166044830152600092839291169063a1671295906064016020604051808303816000875af1158015610da5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dc99190611532565b6040517ff637731d0000000000000000000000000000000000000000000000000000000081526001600160a01b0385811660048301529193508392509082169063f637731d90602401600060405180830381600087803b158015610e2c57600080fd5b505af1158015610e40573d6000803e3d6000fd5b5050505050949350505050565b600080610e5e898989898989611132565b9050600460009054906101000a90046001600160a01b03166001600160a01b0316636518a0b36040518163ffffffff1660e01b8152600401602060405180830381865afa158015610eb3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ed79190611602565b600480546005546040517f87d8de3d0000000000000000000000000000000000000000000000000000000081526001600160a01b03918216938101939093526024830185905230604484018190526064840152600019608484015260c060a4840152600360c48401527f4c4c50000000000000000000000000000000000000000000000000000000000060e484015292945091909116906387d8de3d90610104016020604051808303816000875af1158015610f97573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fbb9190611602565b50506001600160a01b039097166000908152600760209081526040808320938352929052208690555093949350505050565b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa15801561104d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110719190611602565b90508060000361107f575050565b6110936001600160a01b03831633836112bf565b5050565b600080602060008451602086016000885af1806110ba576040513d6000823e3d81fd5b50506000513d915081156110d25780600114156110df565b6001600160a01b0384163b155b15610a42576040517f5274afe70000000000000000000000000000000000000000000000000000000081526001600160a01b03851660048201526024016102f9565b816000528060020b60045260246000fd5b60006111496001600160a01b0388163330856109c6565b60055460405163095ea7b360e01b81526001600160a01b039182166004820152602481018490529088169063095ea7b3906044016020604051808303816000875af115801561119c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111c0919061154f565b5060408051610160810182526001600160a01b03808a168252888116602083015262ffffff861682840152600288810b606084015287900b608083015260a08201859052600060c0830181905260e0830181905261010083018190525481166101208301524261014083015260055492517f883164560000000000000000000000000000000000000000000000000000000081529192169063883164569061126c9084906004016116a5565b6080604051808303816000875af115801561128b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112af9190611769565b50919a9950505050505050505050565b6040516001600160a01b038381166024830152604482018390526112f091859182169063a9059cbb906064016109fb565b505050565b6001600160a01b038116811461130a57600080fd5b50565b60006020828403121561131f57600080fd5b813561132a816112f5565b9392505050565b803561133c816112f5565b919050565b803562ffffff8116811461133c57600080fd5b600080600080600060a0868803121561136c57600080fd5b8535611377816112f5565b94506020860135611387816112f5565b935060408601359250606086013591506113a360808701611341565b90509295509295909350565b604051610120810167ffffffffffffffff811182821017156113fa577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405290565b8035600281900b811461133c57600080fd5b600061012082840312801561142657600080fd5b5061142f6113af565b61143883611331565b815261144660208401611331565b602082015261145760408401611400565b604082015261146860608401611400565b606082015261147960808401611400565b608082015261148a60a08401611341565b60a082015261149b60c08401611400565b60c082015260e08381013590820152610100928301359281019290925250919050565b600080604083850312156114d157600080fd5b82356114dc816112f5565b946020939093013593505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8082018082111561152c5761152c6114ea565b92915050565b60006020828403121561154457600080fd5b815161132a816112f5565b60006020828403121561156157600080fd5b8151801515811461132a57600080fd5b6001600160a01b0381511682526001600160a01b03602082015116602083015262ffffff604082015116604083015260608101516115ba60608401826001600160a01b03169052565b506080810151608083015260a081015160a083015260c081015160c083015260e08101516112f060e08401826001600160a01b03169052565b610100810161152c8284611571565b60006020828403121561161457600080fd5b5051919050565b600282810b9082900b037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8000008112627fffff8213171561152c5761152c6114ea565b8181038181111561152c5761152c6114ea565b6000806000806080858703121561168557600080fd5b505082516020840151604085015160609095015191969095509092509050565b81516001600160a01b03168152610160810160208301516116d160208401826001600160a01b03169052565b5060408301516116e8604084018262ffffff169052565b5060608301516116fd606084018260020b9052565b506080830151611712608084018260020b9052565b5060a083015160a083015260c083015160c083015260e083015160e08301526101008301516101008301526101208301516117596101208401826001600160a01b03169052565b5061014092830151919092015290565b6000806000806080858703121561177f57600080fd5b845160208601519094506fffffffffffffffffffffffffffffffff811681146117a757600080fd5b604086015160609096015194979096509250505056fea26469706673582212206a2690784f14af3d935c2212f0bb2ecd519502e887b5b6bbd457f84d7399135864736f6c634300081c0033",
  "devdoc": {
    "errors": {
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC-20 token failed."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "addSingleSidedLiquidity((address,address,int24,int24,int24,uint24,int24,uint256,uint256))": {
        "details": "Provides liquidity across three ticks with different amounts",
        "returns": {
          "_0": "The address of the pool"
        }
      },
      "claimFees(address)": {
        "params": {
          "_token": "The token address to claim fees for"
        },
        "returns": {
          "fee0": "The amount of token0 fees to claim",
          "fee1": "The amount of token1 fees to claim"
        }
      },
      "swapWithExactInput(address,address,uint256,uint256,uint24)": {
        "params": {
          "_amountIn": "The amount of tokens to swap",
          "_minAmountOut": "The minimum amount of tokens to receive",
          "_tokenIn": "The token to swap",
          "_tokenOut": "The token to receive"
        },
        "returns": {
          "amountOut": "The amount of tokens received"
        }
      },
      "swapWithExactOutput(address,address,uint256,uint256,uint24)": {
        "params": {
          "_amountOut": "The amount of tokens to swap",
          "_maxAmountIn": "The maximum amount of tokens to receive",
          "_tokenIn": "The token to swap",
          "_tokenOut": "The token to receive"
        },
        "returns": {
          "amountIn": "The amount of tokens received"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addSingleSidedLiquidity((address,address,int24,int24,int24,uint24,int24,uint256,uint256))": {
        "notice": "Add single-sided liquidity to a concentrated pool"
      },
      "claimFees(address)": {
        "notice": "Claim accumulated fees from the pool"
      },
      "launchpad()": {
        "notice": "Returns the address of the Launchpad contract"
      },
      "swapWithExactInput(address,address,uint256,uint256,uint24)": {
        "notice": "Swap a token with exact input"
      },
      "swapWithExactOutput(address,address,uint256,uint256,uint24)": {
        "notice": "Swap a token with exact output"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 14705,
        "contract": "contracts/launchpad/clmm/adapters/PancakeAdapter.sol:PancakeAdapter",
        "label": "_me",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 14707,
        "contract": "contracts/launchpad/clmm/adapters/PancakeAdapter.sol:PancakeAdapter",
        "label": "launchpad",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 14710,
        "contract": "contracts/launchpad/clmm/adapters/PancakeAdapter.sol:PancakeAdapter",
        "label": "clPoolFactory",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IClPoolFactory)12246"
      },
      {
        "astId": 14713,
        "contract": "contracts/launchpad/clmm/adapters/PancakeAdapter.sol:PancakeAdapter",
        "label": "swapRouter",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(ICLSwapRouter)12006"
      },
      {
        "astId": 14715,
        "contract": "contracts/launchpad/clmm/adapters/PancakeAdapter.sol:PancakeAdapter",
        "label": "locker",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 14718,
        "contract": "contracts/launchpad/clmm/adapters/PancakeAdapter.sol:PancakeAdapter",
        "label": "nftPositionManager",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IERC721)3618"
      },
      {
        "astId": 14721,
        "contract": "contracts/launchpad/clmm/adapters/PancakeAdapter.sol:PancakeAdapter",
        "label": "WETH9",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(IWETH9)10853"
      },
      {
        "astId": 14728,
        "contract": "contracts/launchpad/clmm/adapters/PancakeAdapter.sol:PancakeAdapter",
        "label": "tokenToLockId",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_contract(IERC20)3066,t_mapping(t_uint256,t_uint256))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(ICLSwapRouter)12006": {
        "encoding": "inplace",
        "label": "contract ICLSwapRouter",
        "numberOfBytes": "20"
      },
      "t_contract(IClPoolFactory)12246": {
        "encoding": "inplace",
        "label": "contract IClPoolFactory",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)3066": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IERC721)3618": {
        "encoding": "inplace",
        "label": "contract IERC721",
        "numberOfBytes": "20"
      },
      "t_contract(IWETH9)10853": {
        "encoding": "inplace",
        "label": "contract IWETH9",
        "numberOfBytes": "20"
      },
      "t_mapping(t_contract(IERC20)3066,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_contract(IERC20)3066",
        "label": "mapping(contract IERC20 => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}