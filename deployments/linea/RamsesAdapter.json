{
  "address": "0x86f98e787b8FBb3C8E87Eb21b62e5E3dD043Ab72",
  "abi": [
    {
      "inputs": [],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitializing",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CL_POOL_FACTORY",
      "outputs": [
        {
          "internalType": "contract IClPoolFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LAUNCHPAD",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_tokenBase",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_tokenQuote",
          "type": "address"
        },
        {
          "internalType": "uint24",
          "name": "_fee",
          "type": "uint24"
        },
        {
          "internalType": "int24",
          "name": "_tick0",
          "type": "int24"
        },
        {
          "internalType": "int24",
          "name": "_tick1",
          "type": "int24"
        },
        {
          "internalType": "int24",
          "name": "_tick2",
          "type": "int24"
        }
      ],
      "name": "addSingleSidedLiquidity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "claimFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "fee0",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fee1",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "graduated",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_launchpad",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_clPoolFactory",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "launchParams",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "tokenBase",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "tokenQuote",
          "type": "address"
        },
        {
          "internalType": "contract IClPool",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "uint24",
          "name": "fee",
          "type": "uint24"
        },
        {
          "internalType": "int24",
          "name": "tick0",
          "type": "int24"
        },
        {
          "internalType": "int24",
          "name": "tick1",
          "type": "int24"
        },
        {
          "internalType": "int24",
          "name": "tick2",
          "type": "int24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "launchedTokens",
      "outputs": [
        {
          "internalType": "bool",
          "name": "launched",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount0",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount1",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "ramsesV2MintCallback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x4fbf62edecb6c65c3a872626ea4c878ba7327c64f43f71c0e1681a5f683c3feb",
  "receipt": {
    "to": null,
    "from": "0x8ccf462f969F0aa790d556614f165a605716763e",
    "contractAddress": "0x86f98e787b8FBb3C8E87Eb21b62e5E3dD043Ab72",
    "transactionIndex": 0,
    "gasUsed": "1447313",
    "logsBloom": "0x
    "blockHash": "0x2f88e6a0175386ad280838097dc2fabafe07aaa816aa2108c1334bea8d4279cb",
    "transactionHash": "0x4fbf62edecb6c65c3a872626ea4c878ba7327c64f43f71c0e1681a5f683c3feb",
    "logs": [],
    "blockNumber": 17073581,
    "cumulativeGasUsed": "1447313",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "ace1de3962b9cfa6db647121f9033e9c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CL_POOL_FACTORY\",\"outputs\":[{\"internalType\":\"contract IClPoolFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LAUNCHPAD\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_tokenBase\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_tokenQuote\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"_fee\",\"type\":\"uint24\"},{\"internalType\":\"int24\",\"name\":\"_tick0\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"_tick1\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"_tick2\",\"type\":\"int24\"}],\"name\":\"addSingleSidedLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"claimFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fee0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"graduated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_launchpad\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_clPoolFactory\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"launchParams\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenBase\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"tokenQuote\",\"type\":\"address\"},{\"internalType\":\"contract IClPool\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"int24\",\"name\":\"tick0\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tick1\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tick2\",\"type\":\"int24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"launchedTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"launched\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"ramsesV2MintCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"addSingleSidedLiquidity(address,address,uint24,int24,int24,int24)\":{\"details\":\"Provides liquidity across three ticks with different amounts\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addSingleSidedLiquidity(address,address,uint24,int24,int24,int24)\":{\"notice\":\"Add single-sided liquidity to a concentrated pool\"},\"claimFees(address)\":{\"notice\":\"Claim accumulated fees from the pool\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/launchpad/clmm/dexes/RamsesAdapter.sol\":\"RamsesAdapter\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\"},\"@uniswap/v4-core/src/libraries/BitMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @title BitMath\\n/// @dev This library provides functionality for computing bit properties of an unsigned integer\\n/// @author Solady (https://github.com/Vectorized/solady/blob/8200a70e8dc2a77ecb074fc2e99a2a0d36547522/src/utils/LibBit.sol)\\nlibrary BitMath {\\n    /// @notice Returns the index of the most significant bit of the number,\\n    ///     where the least significant bit is at index 0 and the most significant bit is at index 255\\n    /// @param x the value for which to compute the most significant bit, must be greater than 0\\n    /// @return r the index of the most significant bit\\n    function mostSignificantBit(uint256 x) internal pure returns (uint8 r) {\\n        require(x > 0);\\n\\n        assembly (\\\"memory-safe\\\") {\\n            r := shl(7, lt(0xffffffffffffffffffffffffffffffff, x))\\n            r := or(r, shl(6, lt(0xffffffffffffffff, shr(r, x))))\\n            r := or(r, shl(5, lt(0xffffffff, shr(r, x))))\\n            r := or(r, shl(4, lt(0xffff, shr(r, x))))\\n            r := or(r, shl(3, lt(0xff, shr(r, x))))\\n            // forgefmt: disable-next-item\\n            r := or(r, byte(and(0x1f, shr(shr(r, x), 0x8421084210842108cc6318c6db6d54be)),\\n                0x0706060506020500060203020504000106050205030304010505030400000000))\\n        }\\n    }\\n\\n    /// @notice Returns the index of the least significant bit of the number,\\n    ///     where the least significant bit is at index 0 and the most significant bit is at index 255\\n    /// @param x the value for which to compute the least significant bit, must be greater than 0\\n    /// @return r the index of the least significant bit\\n    function leastSignificantBit(uint256 x) internal pure returns (uint8 r) {\\n        require(x > 0);\\n\\n        assembly (\\\"memory-safe\\\") {\\n            // Isolate the least significant bit.\\n            x := and(x, sub(0, x))\\n            // For the upper 3 bits of the result, use a De Bruijn-like lookup.\\n            // Credit to adhusson: https://blog.adhusson.com/cheap-find-first-set-evm/\\n            // forgefmt: disable-next-item\\n            r := shl(5, shr(252, shl(shl(2, shr(250, mul(x,\\n                0xb6db6db6ddddddddd34d34d349249249210842108c6318c639ce739cffffffff))),\\n                0x8040405543005266443200005020610674053026020000107506200176117077)))\\n            // For the lower 5 bits of the result, use a De Bruijn lookup.\\n            // forgefmt: disable-next-item\\n            r := or(r, byte(and(div(0xd76453e0, shr(r, x)), 0x1f),\\n                0x001f0d1e100c1d070f090b19131c1706010e11080a1a141802121b1503160405))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b9be4f5c4fd3e80cbc9631a65244a2eb2be250b6b7f128a2035080e18aee8d\",\"license\":\"MIT\"},\"@uniswap/v4-core/src/libraries/CustomRevert.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @title Library for reverting with custom errors efficiently\\n/// @notice Contains functions for reverting with custom errors with different argument types efficiently\\n/// @dev To use this library, declare `using CustomRevert for bytes4;` and replace `revert CustomError()` with\\n/// `CustomError.selector.revertWith()`\\n/// @dev The functions may tamper with the free memory pointer but it is fine since the call context is exited immediately\\nlibrary CustomRevert {\\n    /// @dev ERC-7751 error for wrapping bubbled up reverts\\n    error WrappedError(address target, bytes4 selector, bytes reason, bytes details);\\n\\n    /// @dev Reverts with the selector of a custom error in the scratch space\\n    function revertWith(bytes4 selector) internal pure {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0, selector)\\n            revert(0, 0x04)\\n        }\\n    }\\n\\n    /// @dev Reverts with a custom error with an address argument in the scratch space\\n    function revertWith(bytes4 selector, address addr) internal pure {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0, selector)\\n            mstore(0x04, and(addr, 0xffffffffffffffffffffffffffffffffffffffff))\\n            revert(0, 0x24)\\n        }\\n    }\\n\\n    /// @dev Reverts with a custom error with an int24 argument in the scratch space\\n    function revertWith(bytes4 selector, int24 value) internal pure {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0, selector)\\n            mstore(0x04, signextend(2, value))\\n            revert(0, 0x24)\\n        }\\n    }\\n\\n    /// @dev Reverts with a custom error with a uint160 argument in the scratch space\\n    function revertWith(bytes4 selector, uint160 value) internal pure {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0, selector)\\n            mstore(0x04, and(value, 0xffffffffffffffffffffffffffffffffffffffff))\\n            revert(0, 0x24)\\n        }\\n    }\\n\\n    /// @dev Reverts with a custom error with two int24 arguments\\n    function revertWith(bytes4 selector, int24 value1, int24 value2) internal pure {\\n        assembly (\\\"memory-safe\\\") {\\n            let fmp := mload(0x40)\\n            mstore(fmp, selector)\\n            mstore(add(fmp, 0x04), signextend(2, value1))\\n            mstore(add(fmp, 0x24), signextend(2, value2))\\n            revert(fmp, 0x44)\\n        }\\n    }\\n\\n    /// @dev Reverts with a custom error with two uint160 arguments\\n    function revertWith(bytes4 selector, uint160 value1, uint160 value2) internal pure {\\n        assembly (\\\"memory-safe\\\") {\\n            let fmp := mload(0x40)\\n            mstore(fmp, selector)\\n            mstore(add(fmp, 0x04), and(value1, 0xffffffffffffffffffffffffffffffffffffffff))\\n            mstore(add(fmp, 0x24), and(value2, 0xffffffffffffffffffffffffffffffffffffffff))\\n            revert(fmp, 0x44)\\n        }\\n    }\\n\\n    /// @dev Reverts with a custom error with two address arguments\\n    function revertWith(bytes4 selector, address value1, address value2) internal pure {\\n        assembly (\\\"memory-safe\\\") {\\n            let fmp := mload(0x40)\\n            mstore(fmp, selector)\\n            mstore(add(fmp, 0x04), and(value1, 0xffffffffffffffffffffffffffffffffffffffff))\\n            mstore(add(fmp, 0x24), and(value2, 0xffffffffffffffffffffffffffffffffffffffff))\\n            revert(fmp, 0x44)\\n        }\\n    }\\n\\n    /// @notice bubble up the revert message returned by a call and revert with a wrapped ERC-7751 error\\n    /// @dev this method can be vulnerable to revert data bombs\\n    function bubbleUpAndRevertWith(\\n        address revertingContract,\\n        bytes4 revertingFunctionSelector,\\n        bytes4 additionalContext\\n    ) internal pure {\\n        bytes4 wrappedErrorSelector = WrappedError.selector;\\n        assembly (\\\"memory-safe\\\") {\\n            // Ensure the size of the revert data is a multiple of 32 bytes\\n            let encodedDataSize := mul(div(add(returndatasize(), 31), 32), 32)\\n\\n            let fmp := mload(0x40)\\n\\n            // Encode wrapped error selector, address, function selector, offset, additional context, size, revert reason\\n            mstore(fmp, wrappedErrorSelector)\\n            mstore(add(fmp, 0x04), and(revertingContract, 0xffffffffffffffffffffffffffffffffffffffff))\\n            mstore(\\n                add(fmp, 0x24),\\n                and(revertingFunctionSelector, 0xffffffff00000000000000000000000000000000000000000000000000000000)\\n            )\\n            // offset revert reason\\n            mstore(add(fmp, 0x44), 0x80)\\n            // offset additional context\\n            mstore(add(fmp, 0x64), add(0xa0, encodedDataSize))\\n            // size revert reason\\n            mstore(add(fmp, 0x84), returndatasize())\\n            // revert reason\\n            returndatacopy(add(fmp, 0xa4), 0, returndatasize())\\n            // size additional context\\n            mstore(add(fmp, add(0xa4, encodedDataSize)), 0x04)\\n            // additional context\\n            mstore(\\n                add(fmp, add(0xc4, encodedDataSize)),\\n                and(additionalContext, 0xffffffff00000000000000000000000000000000000000000000000000000000)\\n            )\\n            revert(fmp, add(0xe4, encodedDataSize))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x111ed3031b6990c80a93ae35dde6b6ac0b7e6af471388fdd7461e91edda9b7de\",\"license\":\"MIT\"},\"@uniswap/v4-core/src/libraries/FixedPoint96.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @title FixedPoint96\\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\\n/// @dev Used in SqrtPriceMath.sol\\nlibrary FixedPoint96 {\\n    uint8 internal constant RESOLUTION = 96;\\n    uint256 internal constant Q96 = 0x1000000000000000000000000;\\n}\\n\",\"keccak256\":\"0xef5c3fd41aee26bb12aa1c32873cfee88e67eddfe7c2b32283786265ac669741\",\"license\":\"MIT\"},\"@uniswap/v4-core/src/libraries/FullMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @title Contains 512-bit math functions\\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\\n/// @dev Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\\nlibrary FullMath {\\n    /// @notice Calculates floor(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n    function mulDiv(uint256 a, uint256 b, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = a * b\\n            // Compute the product mod 2**256 and mod 2**256 - 1\\n            // then use the Chinese Remainder Theorem to reconstruct\\n            // the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2**256 + prod0\\n            uint256 prod0 = a * b; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly (\\\"memory-safe\\\") {\\n                let mm := mulmod(a, b, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Make sure the result is less than 2**256.\\n            // Also prevents denominator == 0\\n            require(denominator > prod1);\\n\\n            // Handle non-overflow cases, 256 by 256 division\\n            if (prod1 == 0) {\\n                assembly (\\\"memory-safe\\\") {\\n                    result := div(prod0, denominator)\\n                }\\n                return result;\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0]\\n            // Compute remainder using mulmod\\n            uint256 remainder;\\n            assembly (\\\"memory-safe\\\") {\\n                remainder := mulmod(a, b, denominator)\\n            }\\n            // Subtract 256 bit number from 512 bit number\\n            assembly (\\\"memory-safe\\\") {\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator\\n            // Compute largest power of two divisor of denominator.\\n            // Always >= 1.\\n            uint256 twos = (0 - denominator) & denominator;\\n            // Divide denominator by power of two\\n            assembly (\\\"memory-safe\\\") {\\n                denominator := div(denominator, twos)\\n            }\\n\\n            // Divide [prod1 prod0] by the factors of two\\n            assembly (\\\"memory-safe\\\") {\\n                prod0 := div(prod0, twos)\\n            }\\n            // Shift in bits from prod1 into prod0. For this we need\\n            // to flip `twos` such that it is 2**256 / twos.\\n            // If twos is zero, then it becomes one\\n            assembly (\\\"memory-safe\\\") {\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2**256\\n            // Now that denominator is an odd number, it has an inverse\\n            // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\n            // Compute the inverse by starting with a seed that is correct\\n            // correct for four bits. That is, denominator * inv = 1 mod 2**4\\n            uint256 inv = (3 * denominator) ^ 2;\\n            // Now use Newton-Raphson iteration to improve the precision.\\n            // Thanks to Hensel's lifting lemma, this also works in modular\\n            // arithmetic, doubling the correct bits in each step.\\n            inv *= 2 - denominator * inv; // inverse mod 2**8\\n            inv *= 2 - denominator * inv; // inverse mod 2**16\\n            inv *= 2 - denominator * inv; // inverse mod 2**32\\n            inv *= 2 - denominator * inv; // inverse mod 2**64\\n            inv *= 2 - denominator * inv; // inverse mod 2**128\\n            inv *= 2 - denominator * inv; // inverse mod 2**256\\n\\n            // Because the division is now exact we can divide by multiplying\\n            // with the modular inverse of denominator. This will give us the\\n            // correct result modulo 2**256. Since the preconditions guarantee\\n            // that the outcome is less than 2**256, this is the final result.\\n            // We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inv;\\n            return result;\\n        }\\n    }\\n\\n    /// @notice Calculates ceil(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    function mulDivRoundingUp(uint256 a, uint256 b, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            result = mulDiv(a, b, denominator);\\n            if (mulmod(a, b, denominator) != 0) {\\n                require(++result > 0);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4fc73a00817193fd3cac1cc03d8167d21af97d75f1815a070ee31a90c702b4c2\",\"license\":\"MIT\"},\"@uniswap/v4-core/src/libraries/TickMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {BitMath} from \\\"./BitMath.sol\\\";\\nimport {CustomRevert} from \\\"./CustomRevert.sol\\\";\\n\\n/// @title Math library for computing sqrt prices from ticks and vice versa\\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\\n/// prices between 2**-128 and 2**128\\nlibrary TickMath {\\n    using CustomRevert for bytes4;\\n\\n    /// @notice Thrown when the tick passed to #getSqrtPriceAtTick is not between MIN_TICK and MAX_TICK\\n    error InvalidTick(int24 tick);\\n    /// @notice Thrown when the price passed to #getTickAtSqrtPrice does not correspond to a price between MIN_TICK and MAX_TICK\\n    error InvalidSqrtPrice(uint160 sqrtPriceX96);\\n\\n    /// @dev The minimum tick that may be passed to #getSqrtPriceAtTick computed from log base 1.0001 of 2**-128\\n    /// @dev If ever MIN_TICK and MAX_TICK are not centered around 0, the absTick logic in getSqrtPriceAtTick cannot be used\\n    int24 internal constant MIN_TICK = -887272;\\n    /// @dev The maximum tick that may be passed to #getSqrtPriceAtTick computed from log base 1.0001 of 2**128\\n    /// @dev If ever MIN_TICK and MAX_TICK are not centered around 0, the absTick logic in getSqrtPriceAtTick cannot be used\\n    int24 internal constant MAX_TICK = 887272;\\n\\n    /// @dev The minimum tick spacing value drawn from the range of type int16 that is greater than 0, i.e. min from the range [1, 32767]\\n    int24 internal constant MIN_TICK_SPACING = 1;\\n    /// @dev The maximum tick spacing value drawn from the range of type int16, i.e. max from the range [1, 32767]\\n    int24 internal constant MAX_TICK_SPACING = type(int16).max;\\n\\n    /// @dev The minimum value that can be returned from #getSqrtPriceAtTick. Equivalent to getSqrtPriceAtTick(MIN_TICK)\\n    uint160 internal constant MIN_SQRT_PRICE = 4295128739;\\n    /// @dev The maximum value that can be returned from #getSqrtPriceAtTick. Equivalent to getSqrtPriceAtTick(MAX_TICK)\\n    uint160 internal constant MAX_SQRT_PRICE = 1461446703485210103287273052203988822378723970342;\\n    /// @dev A threshold used for optimized bounds check, equals `MAX_SQRT_PRICE - MIN_SQRT_PRICE - 1`\\n    uint160 internal constant MAX_SQRT_PRICE_MINUS_MIN_SQRT_PRICE_MINUS_ONE =\\n        1461446703485210103287273052203988822378723970342 - 4295128739 - 1;\\n\\n    /// @notice Given a tickSpacing, compute the maximum usable tick\\n    function maxUsableTick(int24 tickSpacing) internal pure returns (int24) {\\n        unchecked {\\n            return (MAX_TICK / tickSpacing) * tickSpacing;\\n        }\\n    }\\n\\n    /// @notice Given a tickSpacing, compute the minimum usable tick\\n    function minUsableTick(int24 tickSpacing) internal pure returns (int24) {\\n        unchecked {\\n            return (MIN_TICK / tickSpacing) * tickSpacing;\\n        }\\n    }\\n\\n    /// @notice Calculates sqrt(1.0001^tick) * 2^96\\n    /// @dev Throws if |tick| > max tick\\n    /// @param tick The input tick for the above formula\\n    /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the price of the two assets (currency1/currency0)\\n    /// at the given tick\\n    function getSqrtPriceAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {\\n        unchecked {\\n            uint256 absTick;\\n            assembly (\\\"memory-safe\\\") {\\n                tick := signextend(2, tick)\\n                // mask = 0 if tick >= 0 else -1 (all 1s)\\n                let mask := sar(255, tick)\\n                // if tick >= 0, |tick| = tick = 0 ^ tick\\n                // if tick < 0, |tick| = ~~|tick| = ~(-|tick| - 1) = ~(tick - 1) = (-1) ^ (tick - 1)\\n                // either way, |tick| = mask ^ (tick + mask)\\n                absTick := xor(mask, add(mask, tick))\\n            }\\n\\n            if (absTick > uint256(int256(MAX_TICK))) InvalidTick.selector.revertWith(tick);\\n\\n            // The tick is decomposed into bits, and for each bit with index i that is set, the product of 1/sqrt(1.0001^(2^i))\\n            // is calculated (using Q128.128). The constants used for this calculation are rounded to the nearest integer\\n\\n            // Equivalent to:\\n            //     price = absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000;\\n            //     or price = int(2**128 / sqrt(1.0001)) if (absTick & 0x1) else 1 << 128\\n            uint256 price;\\n            assembly (\\\"memory-safe\\\") {\\n                price := xor(shl(128, 1), mul(xor(shl(128, 1), 0xfffcb933bd6fad37aa2d162d1a594001), and(absTick, 0x1)))\\n            }\\n            if (absTick & 0x2 != 0) price = (price * 0xfff97272373d413259a46990580e213a) >> 128;\\n            if (absTick & 0x4 != 0) price = (price * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\\n            if (absTick & 0x8 != 0) price = (price * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\\n            if (absTick & 0x10 != 0) price = (price * 0xffcb9843d60f6159c9db58835c926644) >> 128;\\n            if (absTick & 0x20 != 0) price = (price * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\\n            if (absTick & 0x40 != 0) price = (price * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\\n            if (absTick & 0x80 != 0) price = (price * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\\n            if (absTick & 0x100 != 0) price = (price * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\\n            if (absTick & 0x200 != 0) price = (price * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\\n            if (absTick & 0x400 != 0) price = (price * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\\n            if (absTick & 0x800 != 0) price = (price * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\\n            if (absTick & 0x1000 != 0) price = (price * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\\n            if (absTick & 0x2000 != 0) price = (price * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\\n            if (absTick & 0x4000 != 0) price = (price * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\\n            if (absTick & 0x8000 != 0) price = (price * 0x31be135f97d08fd981231505542fcfa6) >> 128;\\n            if (absTick & 0x10000 != 0) price = (price * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\\n            if (absTick & 0x20000 != 0) price = (price * 0x5d6af8dedb81196699c329225ee604) >> 128;\\n            if (absTick & 0x40000 != 0) price = (price * 0x2216e584f5fa1ea926041bedfe98) >> 128;\\n            if (absTick & 0x80000 != 0) price = (price * 0x48a170391f7dc42444e8fa2) >> 128;\\n\\n            assembly (\\\"memory-safe\\\") {\\n                // if (tick > 0) price = type(uint256).max / price;\\n                if sgt(tick, 0) { price := div(not(0), price) }\\n\\n                // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\\n                // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\\n                // we round up in the division so getTickAtSqrtPrice of the output price is always consistent\\n                // `sub(shl(32, 1), 1)` is `type(uint32).max`\\n                // `price + type(uint32).max` will not overflow because `price` fits in 192 bits\\n                sqrtPriceX96 := shr(32, add(price, sub(shl(32, 1), 1)))\\n            }\\n        }\\n    }\\n\\n    /// @notice Calculates the greatest tick value such that getSqrtPriceAtTick(tick) <= sqrtPriceX96\\n    /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_PRICE, as MIN_SQRT_PRICE is the lowest value getSqrtPriceAtTick may\\n    /// ever return.\\n    /// @param sqrtPriceX96 The sqrt price for which to compute the tick as a Q64.96\\n    /// @return tick The greatest tick for which the getSqrtPriceAtTick(tick) is less than or equal to the input sqrtPriceX96\\n    function getTickAtSqrtPrice(uint160 sqrtPriceX96) internal pure returns (int24 tick) {\\n        unchecked {\\n            // Equivalent: if (sqrtPriceX96 < MIN_SQRT_PRICE || sqrtPriceX96 >= MAX_SQRT_PRICE) revert InvalidSqrtPrice();\\n            // second inequality must be >= because the price can never reach the price at the max tick\\n            // if sqrtPriceX96 < MIN_SQRT_PRICE, the `sub` underflows and `gt` is true\\n            // if sqrtPriceX96 >= MAX_SQRT_PRICE, sqrtPriceX96 - MIN_SQRT_PRICE > MAX_SQRT_PRICE - MIN_SQRT_PRICE - 1\\n            if ((sqrtPriceX96 - MIN_SQRT_PRICE) > MAX_SQRT_PRICE_MINUS_MIN_SQRT_PRICE_MINUS_ONE) {\\n                InvalidSqrtPrice.selector.revertWith(sqrtPriceX96);\\n            }\\n\\n            uint256 price = uint256(sqrtPriceX96) << 32;\\n\\n            uint256 r = price;\\n            uint256 msb = BitMath.mostSignificantBit(r);\\n\\n            if (msb >= 128) r = price >> (msb - 127);\\n            else r = price << (127 - msb);\\n\\n            int256 log_2 = (int256(msb) - 128) << 64;\\n\\n            assembly (\\\"memory-safe\\\") {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(63, f))\\n                r := shr(f, r)\\n            }\\n            assembly (\\\"memory-safe\\\") {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(62, f))\\n                r := shr(f, r)\\n            }\\n            assembly (\\\"memory-safe\\\") {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(61, f))\\n                r := shr(f, r)\\n            }\\n            assembly (\\\"memory-safe\\\") {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(60, f))\\n                r := shr(f, r)\\n            }\\n            assembly (\\\"memory-safe\\\") {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(59, f))\\n                r := shr(f, r)\\n            }\\n            assembly (\\\"memory-safe\\\") {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(58, f))\\n                r := shr(f, r)\\n            }\\n            assembly (\\\"memory-safe\\\") {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(57, f))\\n                r := shr(f, r)\\n            }\\n            assembly (\\\"memory-safe\\\") {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(56, f))\\n                r := shr(f, r)\\n            }\\n            assembly (\\\"memory-safe\\\") {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(55, f))\\n                r := shr(f, r)\\n            }\\n            assembly (\\\"memory-safe\\\") {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(54, f))\\n                r := shr(f, r)\\n            }\\n            assembly (\\\"memory-safe\\\") {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(53, f))\\n                r := shr(f, r)\\n            }\\n            assembly (\\\"memory-safe\\\") {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(52, f))\\n                r := shr(f, r)\\n            }\\n            assembly (\\\"memory-safe\\\") {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(51, f))\\n                r := shr(f, r)\\n            }\\n            assembly (\\\"memory-safe\\\") {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(50, f))\\n            }\\n\\n            int256 log_sqrt10001 = log_2 * 255738958999603826347141; // Q22.128 number\\n\\n            // Magic number represents the ceiling of the maximum value of the error when approximating log_sqrt10001(x)\\n            int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\\n\\n            // Magic number represents the minimum value of the error when approximating log_sqrt10001(x), when\\n            // sqrtPrice is from the range (2^-64, 2^64). This is safe as MIN_SQRT_PRICE is more than 2^-64. If MIN_SQRT_PRICE\\n            // is changed, this may need to be changed too\\n            int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\\n\\n            tick = tickLow == tickHi ? tickLow : getSqrtPriceAtTick(tickHi) <= sqrtPriceX96 ? tickHi : tickLow;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4e1a11e154eb06106cb1c4598f06cca5f5ca16eaa33494ba2f0e74981123eca8\",\"license\":\"MIT\"},\"@uniswap/v4-core/test/utils/LiquidityAmounts.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\nimport \\\"../../src/libraries/FullMath.sol\\\";\\nimport \\\"../../src/libraries/FixedPoint96.sol\\\";\\n\\n/// @title Liquidity amount functions\\n/// @notice Provides functions for computing liquidity amounts from token amounts and prices\\nlibrary LiquidityAmounts {\\n    /// @notice Downcasts uint256 to uint128\\n    /// @param x The uint258 to be downcasted\\n    /// @return y The passed value, downcasted to uint128\\n    function toUint128(uint256 x) private pure returns (uint128 y) {\\n        require((y = uint128(x)) == x, \\\"liquidity overflow\\\");\\n    }\\n\\n    /// @notice Computes the amount of liquidity received for a given amount of token0 and price range\\n    /// @dev Calculates amount0 * (sqrt(upper) * sqrt(lower)) / (sqrt(upper) - sqrt(lower))\\n    /// @param sqrtPriceAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtPriceBX96 A sqrt price representing the second tick boundary\\n    /// @param amount0 The amount0 being sent in\\n    /// @return liquidity The amount of returned liquidity\\n    function getLiquidityForAmount0(uint160 sqrtPriceAX96, uint160 sqrtPriceBX96, uint256 amount0)\\n        internal\\n        pure\\n        returns (uint128 liquidity)\\n    {\\n        if (sqrtPriceAX96 > sqrtPriceBX96) (sqrtPriceAX96, sqrtPriceBX96) = (sqrtPriceBX96, sqrtPriceAX96);\\n        uint256 intermediate = FullMath.mulDiv(sqrtPriceAX96, sqrtPriceBX96, FixedPoint96.Q96);\\n        return toUint128(FullMath.mulDiv(amount0, intermediate, sqrtPriceBX96 - sqrtPriceAX96));\\n    }\\n\\n    /// @notice Computes the amount of liquidity received for a given amount of token1 and price range\\n    /// @dev Calculates amount1 / (sqrt(upper) - sqrt(lower)).\\n    /// @param sqrtPriceAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtPriceBX96 A sqrt price representing the second tick boundary\\n    /// @param amount1 The amount1 being sent in\\n    /// @return liquidity The amount of returned liquidity\\n    function getLiquidityForAmount1(uint160 sqrtPriceAX96, uint160 sqrtPriceBX96, uint256 amount1)\\n        internal\\n        pure\\n        returns (uint128 liquidity)\\n    {\\n        if (sqrtPriceAX96 > sqrtPriceBX96) (sqrtPriceAX96, sqrtPriceBX96) = (sqrtPriceBX96, sqrtPriceAX96);\\n        return toUint128(FullMath.mulDiv(amount1, FixedPoint96.Q96, sqrtPriceBX96 - sqrtPriceAX96));\\n    }\\n\\n    /// @notice Computes the maximum amount of liquidity received for a given amount of token0, token1, the current\\n    /// pool prices and the prices at the tick boundaries\\n    /// @param sqrtPriceX96 A sqrt price representing the current pool prices\\n    /// @param sqrtPriceAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtPriceBX96 A sqrt price representing the second tick boundary\\n    /// @param amount0 The amount of token0 being sent in\\n    /// @param amount1 The amount of token1 being sent in\\n    /// @return liquidity The maximum amount of liquidity received\\n    function getLiquidityForAmounts(\\n        uint160 sqrtPriceX96,\\n        uint160 sqrtPriceAX96,\\n        uint160 sqrtPriceBX96,\\n        uint256 amount0,\\n        uint256 amount1\\n    ) internal pure returns (uint128 liquidity) {\\n        if (sqrtPriceAX96 > sqrtPriceBX96) (sqrtPriceAX96, sqrtPriceBX96) = (sqrtPriceBX96, sqrtPriceAX96);\\n\\n        if (sqrtPriceX96 <= sqrtPriceAX96) {\\n            liquidity = getLiquidityForAmount0(sqrtPriceAX96, sqrtPriceBX96, amount0);\\n        } else if (sqrtPriceX96 < sqrtPriceBX96) {\\n            uint128 liquidity0 = getLiquidityForAmount0(sqrtPriceX96, sqrtPriceBX96, amount0);\\n            uint128 liquidity1 = getLiquidityForAmount1(sqrtPriceAX96, sqrtPriceX96, amount1);\\n\\n            liquidity = liquidity0 < liquidity1 ? liquidity0 : liquidity1;\\n        } else {\\n            liquidity = getLiquidityForAmount1(sqrtPriceAX96, sqrtPriceBX96, amount1);\\n        }\\n    }\\n\\n    /// @notice Computes the amount of token0 for a given amount of liquidity and a price range\\n    /// @param sqrtPriceAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtPriceBX96 A sqrt price representing the second tick boundary\\n    /// @param liquidity The liquidity being valued\\n    /// @return amount0 The amount of token0\\n    function getAmount0ForLiquidity(uint160 sqrtPriceAX96, uint160 sqrtPriceBX96, uint128 liquidity)\\n        internal\\n        pure\\n        returns (uint256 amount0)\\n    {\\n        if (sqrtPriceAX96 > sqrtPriceBX96) (sqrtPriceAX96, sqrtPriceBX96) = (sqrtPriceBX96, sqrtPriceAX96);\\n\\n        return FullMath.mulDiv(\\n            uint256(liquidity) << FixedPoint96.RESOLUTION, sqrtPriceBX96 - sqrtPriceAX96, sqrtPriceBX96\\n        ) / sqrtPriceAX96;\\n    }\\n\\n    /// @notice Computes the amount of token1 for a given amount of liquidity and a price range\\n    /// @param sqrtPriceAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtPriceBX96 A sqrt price representing the second tick boundary\\n    /// @param liquidity The liquidity being valued\\n    /// @return amount1 The amount of token1\\n    function getAmount1ForLiquidity(uint160 sqrtPriceAX96, uint160 sqrtPriceBX96, uint128 liquidity)\\n        internal\\n        pure\\n        returns (uint256 amount1)\\n    {\\n        if (sqrtPriceAX96 > sqrtPriceBX96) (sqrtPriceAX96, sqrtPriceBX96) = (sqrtPriceBX96, sqrtPriceAX96);\\n\\n        return FullMath.mulDiv(liquidity, sqrtPriceBX96 - sqrtPriceAX96, FixedPoint96.Q96);\\n    }\\n\\n    /// @notice Computes the token0 and token1 value for a given amount of liquidity, the current\\n    /// pool prices and the prices at the tick boundaries\\n    /// @param sqrtPriceX96 A sqrt price representing the current pool prices\\n    /// @param sqrtPriceAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtPriceBX96 A sqrt price representing the second tick boundary\\n    /// @param liquidity The liquidity being valued\\n    /// @return amount0 The amount of token0\\n    /// @return amount1 The amount of token1\\n    function getAmountsForLiquidity(\\n        uint160 sqrtPriceX96,\\n        uint160 sqrtPriceAX96,\\n        uint160 sqrtPriceBX96,\\n        uint128 liquidity\\n    ) internal pure returns (uint256 amount0, uint256 amount1) {\\n        if (sqrtPriceAX96 > sqrtPriceBX96) (sqrtPriceAX96, sqrtPriceBX96) = (sqrtPriceBX96, sqrtPriceAX96);\\n\\n        if (sqrtPriceX96 <= sqrtPriceAX96) {\\n            amount0 = getAmount0ForLiquidity(sqrtPriceAX96, sqrtPriceBX96, liquidity);\\n        } else if (sqrtPriceX96 < sqrtPriceBX96) {\\n            amount0 = getAmount0ForLiquidity(sqrtPriceX96, sqrtPriceBX96, liquidity);\\n            amount1 = getAmount1ForLiquidity(sqrtPriceAX96, sqrtPriceX96, liquidity);\\n        } else {\\n            amount1 = getAmount1ForLiquidity(sqrtPriceAX96, sqrtPriceBX96, liquidity);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3ec40b1ddf34a1b33fe3934a2f1e4f66dbcf4378a4c672d0d6ce845ccf8bcae2\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/ICLMMAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\n// \\u2588\\u2588\\u2588\\u2557   \\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2557  \\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\n// \\u2588\\u2588\\u2554\\u2588\\u2588\\u2588\\u2588\\u2554\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2551 \\u255a\\u2550\\u255d \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\n// \\u255a\\u2550\\u255d     \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\n\\n// Website: https://maha.xyz\\n// Discord: https://discord.gg/mahadao\\n// Twitter: https://twitter.com/mahaxyz_\\n\\npragma solidity ^0.8.0;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @title Concentrated Liquidity Market Maker Adapter Interface\\n/// @notice Interface for interacting with concentrated liquidity pools\\n/// @dev Implements single-sided liquidity provision and fee claiming\\ninterface ICLMMAdapter {\\n  /// @notice Add single-sided liquidity to a concentrated pool\\n  /// @dev Provides liquidity across three ticks with different amounts\\n  function addSingleSidedLiquidity(\\n    IERC20 _tokenBase,\\n    IERC20 _tokenQuote,\\n    uint24 _fee,\\n    int24 _tick0,\\n    int24 _tick1,\\n    int24 _tick2\\n  ) external;\\n\\n  function LAUNCHPAD() external view returns (address);\\n\\n  function launchedTokens(IERC20 _token) external view returns (bool launched);\\n\\n  /// @notice Claim accumulated fees from the pool\\n  function claimFees(address _token) external returns (uint256 fee0, uint256 fee1);\\n\\n  /// @notice Check if a token has graduated\\n  /// @param _token The token address to check\\n  /// @return true if the token has graduated, false otherwise\\n  function graduated(address _token) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4cf9dcbcd4f610bbd39738f54973dbb5cb2f783d952a06ee81840f4be7f59039\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/thirdparty/IClPool.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\n// \\u2588\\u2588\\u2588\\u2557   \\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2557  \\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\n// \\u2588\\u2588\\u2554\\u2588\\u2588\\u2588\\u2588\\u2554\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2551 \\u255a\\u2550\\u255d \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\n// \\u255a\\u2550\\u255d     \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\n\\n// Website: https://maha.xyz\\n// Discord: https://discord.gg/mahadao\\n// Twitter: https://twitter.com/mahaxyz\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./pool/IClPoolActions.sol\\\";\\nimport \\\"./pool/IClPoolDerivedState.sol\\\";\\nimport \\\"./pool/IClPoolImmutables.sol\\\";\\nimport \\\"./pool/IClPoolOwnerActions.sol\\\";\\nimport \\\"./pool/IClPoolState.sol\\\";\\n\\n/// @title The interface for a CL V2 Pool\\n/// @notice A CL pool facilitates swapping and automated market making between any two assets that strictly conform\\n/// to the ERC20 specification\\n/// @dev The pool interface is broken up into many smaller pieces\\ninterface IClPool is IClPoolImmutables, IClPoolState, IClPoolDerivedState, IClPoolActions, IClPoolOwnerActions {\\n  /// @notice Initializes a pool with parameters provided\\n  function initialize(\\n    address _factory,\\n    address _nfpManager,\\n    address _veRam,\\n    address _voter,\\n    address _token0,\\n    address _token1,\\n    uint24 _fee,\\n    int24 _tickSpacing\\n  ) external;\\n\\n  function _advancePeriod() external;\\n}\\n\",\"keccak256\":\"0xdfa287b7b3bea69b9e5b6807b9e2a737ccd292f0b58a460acfe70a3cb0ce283b\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/thirdparty/IClPoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\n// \\u2588\\u2588\\u2588\\u2557   \\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2557  \\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\n// \\u2588\\u2588\\u2554\\u2588\\u2588\\u2588\\u2588\\u2554\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2551 \\u255a\\u2550\\u255d \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\n// \\u255a\\u2550\\u255d     \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\n\\n// Website: https://maha.xyz\\n// Discord: https://discord.gg/mahadao\\n// Twitter: https://twitter.com/mahaxyz\\n\\npragma solidity ^0.8.0;\\npragma abicoder v2;\\n\\n/// @title The interface for the CL Factory\\n/// @notice The CL Factory facilitates creation of CL pools and control over the protocol fees\\ninterface IClPoolFactory {\\n  /// @notice Emitted when the owner of the factory is changed\\n  /// @param oldOwner The owner before the owner was changed\\n  /// @param newOwner The owner after the owner was changed\\n  event OwnerChanged(address indexed oldOwner, address indexed newOwner);\\n\\n  /// @notice Emitted when a pool is created\\n  /// @param token0 The first token of the pool by address sort order\\n  /// @param token1 The second token of the pool by address sort order\\n  /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\\n  /// @param tickSpacing The minimum number of ticks between initialized ticks\\n  /// @param pool The address of the created pool\\n  event PoolCreated(\\n    address indexed token0, address indexed token1, uint24 indexed fee, int24 tickSpacing, address pool\\n  );\\n\\n  /// @notice Emitted when a new fee amount is enabled for pool creation via the factory\\n  /// @param fee The enabled fee, denominated in hundredths of a bip\\n  /// @param tickSpacing The minimum number of ticks between initialized ticks for pools created with the given fee\\n  event FeeAmountEnabled(uint24 indexed fee, int24 indexed tickSpacing);\\n\\n  /// @notice Emitted when pairs implementation is changed\\n  /// @param oldImplementation The previous implementation\\n  /// @param newImplementation The new implementation\\n  event ImplementationChanged(address indexed oldImplementation, address indexed newImplementation);\\n\\n  /// @notice Emitted when the fee collector is changed\\n  /// @param oldFeeCollector The previous implementation\\n  /// @param newFeeCollector The new implementation\\n  event FeeCollectorChanged(address indexed oldFeeCollector, address indexed newFeeCollector);\\n\\n  /// @notice Emitted when the protocol fee is changed\\n  /// @param feeProtocol0Old The previous value of the token0 protocol fee\\n  /// @param feeProtocol1Old The previous value of the token1 protocol fee\\n  /// @param feeProtocol0New The updated value of the token0 protocol fee\\n  /// @param feeProtocol1New The updated value of the token1 protocol fee\\n  event SetFeeProtocol(uint8 feeProtocol0Old, uint8 feeProtocol1Old, uint8 feeProtocol0New, uint8 feeProtocol1New);\\n\\n  /// @notice Emitted when the protocol fee is changed\\n  /// @param pool The pool address\\n  /// @param feeProtocol0Old The previous value of the token0 protocol fee\\n  /// @param feeProtocol1Old The previous value of the token1 protocol fee\\n  /// @param feeProtocol0New The updated value of the token0 protocol fee\\n  /// @param feeProtocol1New The updated value of the token1 protocol fee\\n  event SetPoolFeeProtocol(\\n    address pool, uint8 feeProtocol0Old, uint8 feeProtocol1Old, uint8 feeProtocol0New, uint8 feeProtocol1New\\n  );\\n\\n  /// @notice Emitted when the feeSetter of the factory is changed\\n  /// @param oldSetter The feeSetter before the setter was changed\\n  /// @param newSetter The feeSetter after the setter was changed\\n  event FeeSetterChanged(address indexed oldSetter, address indexed newSetter);\\n\\n  /// @notice Returns the current owner of the factory\\n  /// @dev Can be changed by the current owner via setOwner\\n  /// @return The address of the factory owner\\n  function owner() external view returns (address);\\n\\n  /// @notice Returns the CL NFP Manager\\n  function nfpManager() external view returns (address);\\n\\n  /// @notice Returns the votingEscrow address\\n  function votingEscrow() external view returns (address);\\n\\n  /// @notice Returns Voter address\\n  function voter() external view returns (address);\\n\\n  /// @notice Returns the tick spacing for a given fee amount, if enabled, or 0 if not enabled\\n  /// @dev A fee amount can never be removed, so this value should be hard coded or cached in the calling context\\n  /// @param fee The enabled fee, denominated in hundredths of a bip. Returns 0 in case of unenabled fee\\n  /// @return The tick spacing\\n  function feeAmountTickSpacing(uint24 fee) external view returns (int24);\\n\\n  /// @notice Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist\\n  /// @dev tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\\n  /// @param tokenA The contract address of either token0 or token1\\n  /// @param tokenB The contract address of the other token\\n  /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\\n  /// @return pool The pool address\\n  function getPool(address tokenA, address tokenB, uint24 fee) external view returns (address pool);\\n\\n  /// @notice Returns the address of the fee collector contract\\n  /// @dev Fee collector decides where the protocol fees go (fee distributor, treasury, etc.)\\n  function feeCollector() external view returns (address);\\n\\n  /// @notice Creates a pool for the given two tokens and fee\\n  /// @param tokenA One of the two tokens in the desired pool\\n  /// @param tokenB The other of the two tokens in the desired pool\\n  /// @param fee The desired fee for the pool\\n  /// @param sqrtPriceX96 initial sqrtPriceX96 of the pool\\n  /// @dev tokenA and tokenB may be passed in either order: token0/token1 or token1/token0. tickSpacing is retrieved\\n  /// from the fee. The call will revert if the pool already exists, the fee is invalid, or the token arguments\\n  /// are invalid.\\n  /// @return pool The address of the newly created pool\\n  function createPool(address tokenA, address tokenB, uint24 fee, uint160 sqrtPriceX96) external returns (address pool);\\n\\n  /// @notice Updates the owner of the factory\\n  /// @dev Must be called by the current owner\\n  /// @param _owner The new owner of the factory\\n  function setOwner(address _owner) external;\\n\\n  /// @notice Enables a fee amount with the given tickSpacing\\n  /// @dev Fee amounts may never be removed once enabled\\n  /// @param fee The fee amount to enable, denominated in hundredths of a bip (i.e. 1e-6)\\n  /// @param tickSpacing The spacing between ticks to be enforced for all pools created with the given fee amount\\n  function enableFeeAmount(uint24 fee, int24 tickSpacing) external;\\n\\n  /// @notice returns the default protocol fee.\\n  function feeProtocol() external view returns (uint8);\\n\\n  /// @notice returns the protocol fee for both tokens of a pool.\\n  function poolFeeProtocol(address pool) external view returns (uint8);\\n\\n  /// @notice Sets the default protocol's % share of the fees\\n  /// @param _feeProtocol new default protocol fee for token0 and token1\\n  function setFeeProtocol(uint8 _feeProtocol) external;\\n\\n  /// @notice Sets the fee collector address\\n  /// @param _feeCollector the fee collector address\\n  function setFeeCollector(address _feeCollector) external;\\n\\n  function setFeeSetter(address _newFeeSetter) external;\\n\\n  function setFee(address _pool, uint24 _fee) external;\\n\\n  /// @notice Sets the default protocol's % share of the fees\\n  /// @param pool the pool address\\n  /// @param feeProtocol new protocol fee for the pool for token0 and token1\\n  function setPoolFeeProtocol(address pool, uint8 feeProtocol) external;\\n}\\n\",\"keccak256\":\"0xf710b56914591c4ba628ded397b982022693749dada7997fec27c99abf2ba04d\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/thirdparty/pool/IClPoolActions.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Permissionless pool actions\\n/// @notice Contains pool methods that can be called by anyone\\ninterface IClPoolActions {\\n  /// @notice Sets the initial price for the pool\\n  /// @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\\n  /// @param sqrtPriceX96 the initial sqrt price of the pool as a Q64.96\\n  function initialize(uint160 sqrtPriceX96) external;\\n\\n  /// @notice Adds liquidity for the given recipient/tickLower/tickUpper position at index 0\\n  /// @dev The caller of this method receives a callback in the form of IRamsesV2MintCallback#ramsesV2MintCallback\\n  /// in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\\n  /// on tickLower, tickUpper, the amount of liquidity, and the current price.\\n  /// @param recipient The address for which the liquidity will be created\\n  /// @param tickLower The lower tick of the position in which to add liquidity\\n  /// @param tickUpper The upper tick of the position in which to add liquidity\\n  /// @param amount The amount of liquidity to mint\\n  /// @param data Any data that should be passed through to the callback\\n  /// @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the\\n  /// callback\\n  /// @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the\\n  /// callback\\n  function mint(address recipient, int24 tickLower, int24 tickUpper, uint128 amount, bytes calldata data)\\n    external\\n    returns (uint256 amount0, uint256 amount1);\\n\\n  /// @notice Adds liquidity for the given recipient/tickLower/tickUpper position\\n  /// @dev The caller of this method receives a callback in the form of IRamsesV2MintCallback#ramsesV2MintCallback\\n  /// in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\\n  /// on tickLower, tickUpper, the amount of liquidity, and the current price.\\n  /// @param recipient The address for which the liquidity will be created\\n  /// @param index The index for which the liquidity will be created\\n  /// @param tickLower The lower tick of the position in which to add liquidity\\n  /// @param tickUpper The upper tick of the position in which to add liquidity\\n  /// @param amount The amount of liquidity to mint\\n  /// @param veNFTTokenId The veNFT tokenId to attach to the position\\n  /// @param data Any data that should be passed through to the callback\\n  /// @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the\\n  /// callback\\n  /// @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the\\n  /// callback\\n  function mint(\\n    address recipient,\\n    uint256 index,\\n    int24 tickLower,\\n    int24 tickUpper,\\n    uint128 amount,\\n    uint256 veNFTTokenId,\\n    bytes calldata data\\n  ) external returns (uint256 amount0, uint256 amount1);\\n\\n  /// @notice Collects tokens owed to a position\\n  /// @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\\n  /// Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\\n  /// amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\\n  /// actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\\n  /// @param recipient The address which should receive the fees collected\\n  /// @param tickLower The lower tick of the position for which to collect fees\\n  /// @param tickUpper The upper tick of the position for which to collect fees\\n  /// @param amount0Requested How much token0 should be withdrawn from the fees owed\\n  /// @param amount1Requested How much token1 should be withdrawn from the fees owed\\n  /// @return amount0 The amount of fees collected in token0\\n  /// @return amount1 The amount of fees collected in token1\\n  function collect(\\n    address recipient,\\n    int24 tickLower,\\n    int24 tickUpper,\\n    uint128 amount0Requested,\\n    uint128 amount1Requested\\n  ) external returns (uint128 amount0, uint128 amount1);\\n\\n  /// @notice Collects tokens owed to a position\\n  /// @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\\n  /// Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\\n  /// amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\\n  /// actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\\n  /// @param recipient The address which should receive the fees collected\\n  /// @param index The index of the position to be collected\\n  /// @param tickLower The lower tick of the position for which to collect fees\\n  /// @param tickUpper The upper tick of the position for which to collect fees\\n  /// @param amount0Requested How much token0 should be withdrawn from the fees owed\\n  /// @param amount1Requested How much token1 should be withdrawn from the fees owed\\n  /// @return amount0 The amount of fees collected in token0\\n  /// @return amount1 The amount of fees collected in token1\\n  function collect(\\n    address recipient,\\n    uint256 index,\\n    int24 tickLower,\\n    int24 tickUpper,\\n    uint128 amount0Requested,\\n    uint128 amount1Requested\\n  ) external returns (uint128 amount0, uint128 amount1);\\n\\n  /// @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position at index 0\\n  /// @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\\n  /// @dev Fees must be collected separately via a call to #collect\\n  /// @param tickLower The lower tick of the position for which to burn liquidity\\n  /// @param tickUpper The upper tick of the position for which to burn liquidity\\n  /// @param amount How much liquidity to burn\\n  /// @return amount0 The amount of token0 sent to the recipient\\n  /// @return amount1 The amount of token1 sent to the recipient\\n  function burn(int24 tickLower, int24 tickUpper, uint128 amount) external returns (uint256 amount0, uint256 amount1);\\n\\n  /// @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\\n  /// @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\\n  /// @dev Fees must be collected separately via a call to #collect\\n  /// @param index The index for which the liquidity will be burned\\n  /// @param tickLower The lower tick of the position for which to burn liquidity\\n  /// @param tickUpper The upper tick of the position for which to burn liquidity\\n  /// @param amount How much liquidity to burn\\n  /// @return amount0 The amount of token0 sent to the recipient\\n  /// @return amount1 The amount of token1 sent to the recipient\\n  function burn(uint256 index, int24 tickLower, int24 tickUpper, uint128 amount)\\n    external\\n    returns (uint256 amount0, uint256 amount1);\\n\\n  /// @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\\n  /// @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\\n  /// @dev Fees must be collected separately via a call to #collect\\n  /// @param index The index for which the liquidity will be burned\\n  /// @param tickLower The lower tick of the position for which to burn liquidity\\n  /// @param tickUpper The upper tick of the position for which to burn liquidity\\n  /// @param amount How much liquidity to burn\\n  /// @param veNFTTokenId The veNFT Token Id to attach\\n  /// @return amount0 The amount of token0 sent to the recipient\\n  /// @return amount1 The amount of token1 sent to the recipient\\n  function burn(uint256 index, int24 tickLower, int24 tickUpper, uint128 amount, uint256 veNFTTokenId)\\n    external\\n    returns (uint256 amount0, uint256 amount1);\\n\\n  /// @notice Swap token0 for token1, or token1 for token0\\n  /// @dev The caller of this method receives a callback in the form of IRamsesV2SwapCallback#ramsesV2SwapCallback\\n  /// @param recipient The address to receive the output of the swap\\n  /// @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\\n  /// @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or\\n  /// exact output (negative)\\n  /// @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\\n  /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\\n  /// @param data Any data to be passed through to the callback\\n  /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\\n  /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\\n  function swap(\\n    address recipient,\\n    bool zeroForOne,\\n    int256 amountSpecified,\\n    uint160 sqrtPriceLimitX96,\\n    bytes calldata data\\n  ) external returns (int256 amount0, int256 amount1);\\n\\n  /// @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\\n  /// @dev The caller of this method receives a callback in the form of IRamsesV2FlashCallback#ramsesV2FlashCallback\\n  /// @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\\n  /// with 0 amount{0,1} and sending the donation amount(s) from the callback\\n  /// @param recipient The address which will receive the token0 and token1 amounts\\n  /// @param amount0 The amount of token0 to send\\n  /// @param amount1 The amount of token1 to send\\n  /// @param data Any data to be passed through to the callback\\n  function flash(address recipient, uint256 amount0, uint256 amount1, bytes calldata data) external;\\n\\n  /// @notice Increase the maximum number of price and liquidity observations that this pool will store\\n  /// @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\\n  /// the input observationCardinalityNext.\\n  /// @param observationCardinalityNext The desired minimum number of observations for the pool to store\\n  function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;\\n}\\n\",\"keccak256\":\"0xd31b65342866b39d682783c7733c9b5660529e353b5b8b5a91bc921c2fb8d181\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/thirdparty/pool/IClPoolDerivedState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that is not stored\\n/// @notice Contains view functions to provide information about the pool that is computed rather than stored on the\\n/// blockchain. The functions here may have variable gas costs.\\ninterface IClPoolDerivedState {\\n  /// @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block\\n  /// timestamp\\n  /// @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one\\n  /// representing\\n  /// the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted\\n  /// average tick,\\n  /// you must call it with secondsAgos = [3600, 0].\\n  /// @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\\n  /// log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\\n  /// @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\\n  /// @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\\n  /// @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each\\n  /// `secondsAgos` from the current block timestamp\\n  /// @return secondsPerBoostedLiquidityPeriodX128s Cumulative seconds per boosted liquidity-in-range value as of each\\n  /// `secondsAgos` from the current block timestamp\\n  function observe(uint32[] calldata secondsAgos)\\n    external\\n    view\\n    returns (\\n      int56[] memory tickCumulatives,\\n      uint160[] memory secondsPerLiquidityCumulativeX128s,\\n      uint160[] memory secondsPerBoostedLiquidityPeriodX128s\\n    );\\n\\n  /// @notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\\n  /// @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\\n  /// I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\\n  /// snapshot is taken and the second snapshot is taken. Boosted data is only valid if it's within the same period\\n  /// @param tickLower The lower tick of the range\\n  /// @param tickUpper The upper tick of the range\\n  /// @return tickCumulativeInside The snapshot of the tick accumulator for the range\\n  /// @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range\\n  /// @return secondsPerBoostedLiquidityInsideX128 The snapshot of seconds per boosted liquidity for the range\\n  /// @return secondsInside The snapshot of seconds per liquidity for the range\\n  function snapshotCumulativesInside(int24 tickLower, int24 tickUpper)\\n    external\\n    view\\n    returns (\\n      int56 tickCumulativeInside,\\n      uint160 secondsPerLiquidityInsideX128,\\n      uint160 secondsPerBoostedLiquidityInsideX128,\\n      uint32 secondsInside\\n    );\\n\\n  /// @notice Returns the seconds per liquidity and seconds inside a tick range for a period\\n  /// @param tickLower The lower tick of the range\\n  /// @param tickUpper The upper tick of the range\\n  /// @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range\\n  /// @return secondsPerBoostedLiquidityInsideX128 The snapshot of seconds per boosted liquidity for the range\\n  function periodCumulativesInside(uint32 period, int24 tickLower, int24 tickUpper)\\n    external\\n    view\\n    returns (uint160 secondsPerLiquidityInsideX128, uint160 secondsPerBoostedLiquidityInsideX128);\\n}\\n\",\"keccak256\":\"0x90da27291895822f99b3c6522b87f980df67a88417c1e1ae61923259108580b0\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/thirdparty/pool/IClPoolImmutables.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that never changes\\n/// @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values\\ninterface IClPoolImmutables {\\n  /// @notice The contract that deployed the pool, which must adhere to the IClPoolFactory interface\\n  /// @return The contract address\\n  function factory() external view returns (address);\\n\\n  /// @notice The contract that manages CL NFPs, which must adhere to the INonfungiblePositionManager interface\\n  /// @return The contract address\\n  function nfpManager() external view returns (address);\\n\\n  /// @notice The contract that manages veNFTs, which must adhere to the IVotingEscrow interface\\n  /// @return The contract address\\n  function votingEscrow() external view returns (address);\\n\\n  /// @notice The contract that manages RA votes, which must adhere to the IVoter interface\\n  /// @return The contract address\\n  function voter() external view returns (address);\\n\\n  /// @notice The first of the two tokens of the pool, sorted by address\\n  /// @return The token contract address\\n  function token0() external view returns (address);\\n\\n  /// @notice The second of the two tokens of the pool, sorted by address\\n  /// @return The token contract address\\n  function token1() external view returns (address);\\n\\n  /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\\n  /// @return The fee\\n  function fee() external view returns (uint24);\\n\\n  /// @notice The pool tick spacing\\n  /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\\n  /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\\n  /// This value is an int24 to avoid casting even though it is always positive.\\n  /// @return The tick spacing\\n  function tickSpacing() external view returns (int24);\\n\\n  /// @notice The maximum amount of position liquidity that can use any tick in the range\\n  /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\\n  /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\\n  /// @return The max amount of liquidity per tick\\n  function maxLiquidityPerTick() external view returns (uint128);\\n\\n  /// @notice returns the current fee set for the pool\\n  function currentFee() external view returns (uint24);\\n}\\n\",\"keccak256\":\"0x3d6f8ff1fa2bd08a6f10e096c572b97da277b260c62338aedba1be7b5deeb381\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/thirdparty/pool/IClPoolOwnerActions.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Permissioned pool actions\\n/// @notice Contains pool methods that may only be called by the factory owner\\ninterface IClPoolOwnerActions {\\n  /// @notice Set the protocol's % share of the fees\\n  /// @dev Fees start at 50%, with 5% increments\\n  function setFeeProtocol() external;\\n\\n  /// @notice Collect the protocol fee accrued to the pool\\n  /// @param recipient The address to which collected protocol fees should be sent\\n  /// @param amount0Requested The maximum amount of token0 to send, can be 0 to collect fees in only token1\\n  /// @param amount1Requested The maximum amount of token1 to send, can be 0 to collect fees in only token0\\n  /// @return amount0 The protocol fee collected in token0\\n  /// @return amount1 The protocol fee collected in token1\\n  function collectProtocol(address recipient, uint128 amount0Requested, uint128 amount1Requested)\\n    external\\n    returns (uint128 amount0, uint128 amount1);\\n\\n  function setFee(uint24 _fee) external;\\n}\\n\",\"keccak256\":\"0x8d775146c6bef96fbd75839106d7beb73ee88dc2d5fa8099a126437406c5d99e\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/thirdparty/pool/IClPoolState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that can change\\n/// @notice These methods compose the pool's state, and can change with any frequency including multiple times\\n/// per transaction\\ninterface IClPoolState {\\n  /// @notice reads arbitrary storage slots and returns the bytes\\n  /// @param slots The slots to read from\\n  /// @return returnData The data read from the slots\\n  function readStorage(bytes32[] calldata slots) external view returns (bytes32[] memory returnData);\\n\\n  /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\\n  /// when accessed externally.\\n  /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\\n  /// tick The current tick of the pool, i.e. according to the last tick transition that was run.\\n  /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\\n  /// boundary.\\n  /// observationIndex The index of the last oracle observation that was written,\\n  /// observationCardinality The current maximum number of observations stored in the pool,\\n  /// observationCardinalityNext The next maximum number of observations, to be updated when the observation.\\n  /// feeProtocol The protocol fee for both tokens of the pool.\\n  /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\\n  /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\\n  /// unlocked Whether the pool is currently locked to reentrancy\\n  function slot0()\\n    external\\n    view\\n    returns (\\n      uint160 sqrtPriceX96,\\n      int24 tick,\\n      uint16 observationIndex,\\n      uint16 observationCardinality,\\n      uint16 observationCardinalityNext,\\n      uint8 feeProtocol,\\n      bool unlocked\\n    );\\n\\n  /// @notice Returns the last tick of a given period\\n  /// @param period The period in question\\n  /// @return previousPeriod The period before current period\\n  /// @dev this is because there might be periods without trades\\n  ///  startTick The start tick of the period\\n  ///  lastTick The last tick of the period, if the period is finished\\n  ///  endSecondsPerLiquidityPeriodX128 Seconds per liquidity at period's end\\n  ///  endSecondsPerBoostedLiquidityPeriodX128 Seconds per boosted liquidity at period's end\\n  function periods(uint256 period)\\n    external\\n    view\\n    returns (\\n      uint32 previousPeriod,\\n      int24 startTick,\\n      int24 lastTick,\\n      uint160 endSecondsPerLiquidityCumulativeX128,\\n      uint160 endSecondsPerBoostedLiquidityCumulativeX128,\\n      uint32 boostedInRange\\n    );\\n\\n  /// @notice The last period where a trade or liquidity change happened\\n  function lastPeriod() external view returns (uint256);\\n\\n  /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the\\n  /// pool\\n  /// @dev This value can overflow the uint256\\n  function feeGrowthGlobal0X128() external view returns (uint256);\\n\\n  /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the\\n  /// pool\\n  /// @dev This value can overflow the uint256\\n  function feeGrowthGlobal1X128() external view returns (uint256);\\n\\n  /// @notice The amounts of token0 and token1 that are owed to the protocol\\n  /// @dev Protocol fees will never exceed uint128 max in either token\\n  function protocolFees() external view returns (uint128 token0, uint128 token1);\\n\\n  /// @notice The currently in range liquidity available to the pool\\n  /// @dev This value has no relationship to the total liquidity across all ticks\\n  function liquidity() external view returns (uint128);\\n\\n  /// @notice The currently in range derived liquidity available to the pool\\n  /// @dev This value has no relationship to the total liquidity across all ticks\\n  function boostedLiquidity() external view returns (uint128);\\n\\n  /// @notice Get the boost information for a specific position at a period\\n  /// @return boostAmount the amount of boost this position has for this period,\\n  /// veNFTAmount the amount of veNFTs attached to this position for this period,\\n  /// secondsDebtX96 used to account for changes in the deposit amount during the period\\n  /// boostedSecondsDebtX96 used to account for changes in the boostAmount and veNFT locked during the period,\\n  function boostInfos(uint256 period, bytes32 key)\\n    external\\n    view\\n    returns (uint128 boostAmount, int128 veNFTAmount, int256 secondsDebtX96, int256 boostedSecondsDebtX96);\\n\\n  /// @notice Look up information about a specific tick in the pool\\n  /// @param tick The tick to look up\\n  /// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\\n  /// tick upper,\\n  /// liquidityNet how much liquidity changes when the pool price crosses the tick,\\n  /// feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\\n  /// feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\\n  /// tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\\n  /// secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current\\n  /// tick,\\n  /// secondsOutside the seconds spent on the other side of the tick from the current tick,\\n  /// initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to\\n  /// false.\\n  /// Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\\n  /// In addition, these values are only relative and must be used only in comparison to previous snapshots for\\n  /// a specific position.\\n  function ticks(int24 tick)\\n    external\\n    view\\n    returns (\\n      uint128 liquidityGross,\\n      int128 liquidityNet,\\n      uint128 boostedLiquidityGross,\\n      int128 boostedLiquidityNet,\\n      uint256 feeGrowthOutside0X128,\\n      uint256 feeGrowthOutside1X128,\\n      int56 tickCumulativeOutside,\\n      uint160 secondsPerLiquidityOutsideX128,\\n      uint32 secondsOutside,\\n      bool initialized\\n    );\\n\\n  /// @notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information\\n  function tickBitmap(int16 wordPosition) external view returns (uint256);\\n\\n  /// @notice Returns the information about a position by the position's key\\n  /// @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\\n  /// @return liquidity The amount of liquidity in the position,\\n  /// @return feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\\n  /// @return feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\\n  /// @return tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\\n  /// @return tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\\n  /// @return attachedVeNFTId the veNFT tokenId attached to the position\\n  function positions(bytes32 key)\\n    external\\n    view\\n    returns (\\n      uint128 liquidity,\\n      uint256 feeGrowthInside0LastX128,\\n      uint256 feeGrowthInside1LastX128,\\n      uint128 tokensOwed0,\\n      uint128 tokensOwed1,\\n      uint256 attachedVeNFTId\\n    );\\n\\n  /// @notice Returns a period's total boost amount and total veNFT attached\\n  /// @param period Period timestamp\\n  /// @return totalBoostAmount The total amount of boost this period has,\\n  /// @return totalVeNFTAmount The total amount of veNFTs attached to this period\\n  function boostInfos(uint256 period) external view returns (uint128 totalBoostAmount, int128 totalVeNFTAmount);\\n\\n  /// @notice Get the period seconds debt of a specific position\\n  /// @param period the period number\\n  /// @param recipient recipient address\\n  /// @param index position index\\n  /// @param tickLower lower bound of range\\n  /// @param tickUpper upper bound of range\\n  /// @return secondsDebtX96 seconds the position was not in range for the period\\n  /// @return boostedSecondsDebtX96 boosted seconds the period\\n  function positionPeriodDebt(uint256 period, address recipient, uint256 index, int24 tickLower, int24 tickUpper)\\n    external\\n    view\\n    returns (int256 secondsDebtX96, int256 boostedSecondsDebtX96);\\n\\n  /// @notice get the period seconds in range of a specific position\\n  /// @param period the period number\\n  /// @param owner owner address\\n  /// @param index position index\\n  /// @param tickLower lower bound of range\\n  /// @param tickUpper upper bound of range\\n  /// @return periodSecondsInsideX96 seconds the position was not in range for the period\\n  /// @return periodBoostedSecondsInsideX96 boosted seconds the period\\n  function positionPeriodSecondsInRange(uint256 period, address owner, uint256 index, int24 tickLower, int24 tickUpper)\\n    external\\n    view\\n    returns (uint256 periodSecondsInsideX96, uint256 periodBoostedSecondsInsideX96);\\n\\n  /// @notice Returns data about a specific observation index\\n  /// @param index The element of the observations array to fetch\\n  /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\\n  /// ago, rather than at a specific index in the array.\\n  /// @return blockTimestamp The timestamp of the observation,\\n  /// @return tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation\\n  /// timestamp,\\n  /// @return secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the\\n  /// observation timestamp,\\n  /// @return initialized whether the observation has been initialized and the values are safe to use\\n  function observations(uint256 index)\\n    external\\n    view\\n    returns (\\n      uint32 blockTimestamp,\\n      int56 tickCumulative,\\n      uint160 secondsPerLiquidityCumulativeX128,\\n      bool initialized,\\n      uint160 secondsPerBoostedLiquidityPeriodX128\\n    );\\n}\\n\",\"keccak256\":\"0x8e7343f3ee7ca2fdeeeae6d14b0e4b3993cc06820aef5a92bc21882bf6ebb652\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/thirdparty/pool/IRamsesV2MintCallback.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\n// \\u2588\\u2588\\u2588\\u2557   \\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2557  \\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\n// \\u2588\\u2588\\u2554\\u2588\\u2588\\u2588\\u2588\\u2554\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2551 \\u255a\\u2550\\u255d \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\n// \\u255a\\u2550\\u255d     \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\n\\n// Website: https://maha.xyz\\n// Discord: https://discord.gg/mahadao\\n// Twitter: https://twitter.com/mahaxyz\\n\\npragma solidity ^0.8.0;\\n\\n/// @title Callback for IClPoolActions#mint\\n/// @notice Any contract that calls IClPoolActions#mint must implement this interface\\ninterface IRamsesV2MintCallback {\\n  /// @notice Called to `msg.sender` after minting liquidity to a position from IClPool#mint.\\n  /// @dev In the implementation you must pay the pool tokens owed for the minted liquidity.\\n  /// The caller of this method must be checked to be a ClPool deployed by the canonical ClPoolFactory.\\n  /// @param amount0Owed The amount of token0 due to the pool for the minted liquidity\\n  /// @param amount1Owed The amount of token1 due to the pool for the minted liquidity\\n  /// @param data Any data passed through by the caller via the IClPoolActions#mint call\\n  function ramsesV2MintCallback(uint256 amount0Owed, uint256 amount1Owed, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0xe0d176fdc7d349f493855ff2a1f516275e9b0b71949df75ee50ea44b36811854\",\"license\":\"BUSL-1.1\"},\"contracts/launchpad/clmm/dexes/RamsesAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\n// \\u2588\\u2588\\u2588\\u2557   \\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2557  \\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\n// \\u2588\\u2588\\u2554\\u2588\\u2588\\u2588\\u2588\\u2554\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2551 \\u255a\\u2550\\u255d \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\n// \\u255a\\u2550\\u255d    \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\n\\n// Website: https://maha.xyz\\n// Discord: https://discord.gg/mahadao\\n// Twitter: https://twitter.com/mahaxyz_\\n\\npragma solidity ^0.8.0;\\n\\nimport {Initializable} from \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {ICLMMAdapter} from \\\"contracts/interfaces/ICLMMAdapter.sol\\\";\\n\\nimport {IClPool} from \\\"contracts/interfaces/thirdparty/IClPool.sol\\\";\\nimport {IClPoolFactory} from \\\"contracts/interfaces/thirdparty/IClPoolFactory.sol\\\";\\nimport {IRamsesV2MintCallback} from \\\"contracts/interfaces/thirdparty/pool/IRamsesV2MintCallback.sol\\\";\\n\\nimport {TickMath} from \\\"@uniswap/v4-core/src/libraries/TickMath.sol\\\";\\nimport {LiquidityAmounts} from \\\"@uniswap/v4-core/test/utils/LiquidityAmounts.sol\\\";\\n\\ncontract RamsesAdapter is ICLMMAdapter, IRamsesV2MintCallback, Initializable {\\n  IClPoolFactory public CL_POOL_FACTORY;\\n  address public LAUNCHPAD;\\n  mapping(IERC20 token => LaunchTokenParams params) public launchParams;\\n\\n  address private me;\\n  IClPool private transientClPool;\\n\\n  struct LaunchTokenParams {\\n    IERC20 tokenBase;\\n    IERC20 tokenQuote;\\n    IClPool pool;\\n    uint24 fee;\\n    int24 tick0;\\n    int24 tick1;\\n    int24 tick2;\\n  }\\n\\n  function initialize(address _launchpad, address _clPoolFactory) external initializer {\\n    LAUNCHPAD = _launchpad;\\n    CL_POOL_FACTORY = IClPoolFactory(_clPoolFactory);\\n    me = address(this);\\n  }\\n\\n  function launchedTokens(IERC20 _token) external view returns (bool launched) {\\n    launched = launchParams[_token].pool != IClPool(address(0));\\n  }\\n\\n  function addSingleSidedLiquidity(\\n    IERC20 _tokenBase,\\n    IERC20 _tokenQuote,\\n    uint24 _fee,\\n    int24 _tick0,\\n    int24 _tick1,\\n    int24 _tick2\\n  ) external {\\n    require(msg.sender == LAUNCHPAD, \\\"!launchpad\\\");\\n    require(launchParams[_tokenBase].pool == IClPool(address(0)), \\\"!launched\\\");\\n\\n    uint160 sqrtPriceX96Launch = TickMath.getSqrtPriceAtTick(_tick0 - 1);\\n    uint160 sqrtPriceX960 = TickMath.getSqrtPriceAtTick(_tick0);\\n    uint160 sqrtPriceX961 = TickMath.getSqrtPriceAtTick(_tick1);\\n    uint160 sqrtPriceX962 = TickMath.getSqrtPriceAtTick(_tick2);\\n\\n    uint256 amountBaseBeforeTick = 600_000_000 ether;\\n    uint256 amountBaseAfterTick = 400_000_000 ether;\\n\\n    IClPool pool =\\n      IClPool(CL_POOL_FACTORY.createPool(address(_tokenBase), address(_tokenQuote), _fee, sqrtPriceX96Launch));\\n    launchParams[_tokenBase] = LaunchTokenParams({\\n      tokenBase: _tokenBase,\\n      tokenQuote: _tokenQuote,\\n      pool: pool,\\n      fee: _fee,\\n      tick0: _tick0,\\n      tick1: _tick1,\\n      tick2: _tick2\\n    });\\n\\n    transientClPool = pool;\\n\\n    // calculate the liquidity for the various tick ranges\\n    // add liquidity to the various tick ranges\\n\\n    if (address(_tokenBase) == transientClPool.token0()) {\\n      uint128 liquidityBeforeTick0 =\\n        LiquidityAmounts.getLiquidityForAmount0(sqrtPriceX960, sqrtPriceX961, amountBaseBeforeTick);\\n      uint128 liquidityBeforeTick1 =\\n        LiquidityAmounts.getLiquidityForAmount0(sqrtPriceX961, sqrtPriceX962, amountBaseAfterTick);\\n\\n      pool.mint(me, _tick0, _tick1, liquidityBeforeTick0, \\\"\\\");\\n      pool.mint(me, _tick1, _tick2, liquidityBeforeTick1, \\\"\\\");\\n    } else {\\n      uint128 liquidityBeforeTick0 =\\n        LiquidityAmounts.getLiquidityForAmount1(sqrtPriceX961, sqrtPriceX960, amountBaseBeforeTick);\\n      uint128 liquidityBeforeTick1 =\\n        LiquidityAmounts.getLiquidityForAmount1(sqrtPriceX962, sqrtPriceX961, amountBaseAfterTick);\\n\\n      pool.mint(me, _tick1, _tick0, liquidityBeforeTick0, \\\"\\\");\\n      pool.mint(me, _tick2, _tick1, liquidityBeforeTick1, \\\"\\\");\\n    }\\n\\n    transientClPool = IClPool(address(0));\\n  }\\n\\n  function claimFees(address _token) external returns (uint256 fee0, uint256 fee1) {\\n    require(msg.sender == LAUNCHPAD, \\\"!launchpad\\\");\\n    LaunchTokenParams memory params = launchParams[IERC20(_token)];\\n    require(params.pool != IClPool(address(0)), \\\"!launched\\\");\\n\\n    (uint256 fee00, uint256 fee01) =\\n      params.pool.collect(me, params.tick0, params.tick1, type(uint128).max, type(uint128).max);\\n    (uint256 fee10, uint256 fee11) =\\n      params.pool.collect(me, params.tick1, params.tick2, type(uint128).max, type(uint128).max);\\n\\n    fee0 = fee00 + fee10;\\n    fee1 = fee01 + fee11;\\n\\n    IERC20(params.pool.token0()).transfer(msg.sender, fee0);\\n    IERC20(params.pool.token1()).transfer(msg.sender, fee1);\\n  }\\n\\n  function ramsesV2MintCallback(uint256 amount0, uint256 amount1, bytes calldata) external {\\n    require(msg.sender == address(transientClPool), \\\"!clPool\\\");\\n    if (address(transientClPool) == address(0)) return;\\n\\n    // todo add validation that only token needs to be sent; not quote token\\n    if (amount0 > 0) IERC20(transientClPool.token0()).transferFrom(LAUNCHPAD, msg.sender, amount0);\\n    if (amount1 > 0) IERC20(transientClPool.token1()).transferFrom(LAUNCHPAD, msg.sender, amount1);\\n  }\\n\\n  function graduated(address) external pure returns (bool) {\\n    return false;\\n  }\\n}\\n\",\"keccak256\":\"0x321d3affe7aa5382954140e6503dcf23b88e13ee9feca64e285607f4884bcf30\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x6080604052348015600f57600080fd5b506119488061001f6000396000f3fe608060405234801561001057600080fd5b50600436106100a35760003560e01c806351431d4f116100765780637e91334d1161005b5780637e91334d146101f85780639b083ec91461020b578063bfeab6e51461022f57600080fd5b806351431d4f146101ba57806357032fac146101e557600080fd5b806315a0ea6a146100a85780632b76a557146100d55780633e48f41714610192578063485cc955146101a7575b600080fd5b6100bb6100b636600461166c565b610261565b604080519283526020830191909152015b60405180910390f35b6101406100e336600461166c565b600260208190526000918252604090912080546001820154918301546001600160a01b0391821693928216929181169162ffffff600160a01b83041691600160b81b8104820b91600160d01b8204810b91600160e81b9004900b87565b604080516001600160a01b0398891681529688166020880152969094169585019590955262ffffff9091166060840152600290810b608084015292830b60a083015290910b60c082015260e0016100cc565b6101a56101a0366004611689565b6106af565b005b6101a56101b536600461170c565b610930565b6001546101cd906001600160a01b031681565b6040516001600160a01b0390911681526020016100cc565b6000546101cd906001600160a01b031681565b6101a5610206366004611757565b610aad565b61021f61021936600461166c565b50600090565b60405190151581526020016100cc565b61021f61023d36600461166c565b6001600160a01b039081166000908152600260208190526040909120015416151590565b60015460009081906001600160a01b031633146102b25760405162461bcd60e51b815260206004820152600a602482015269085b185d5b98da1c185960b21b60448201526064015b60405180910390fd5b6001600160a01b03808416600090815260026020818152604092839020835160e081018552815486168152600182015486169281019290925282015493841692810183905262ffffff600160a01b8504166060820152600160b81b8404820b6080820152600160d01b8404820b60a0820152600160e81b909304900b60c083015261036b5760405162461bcd60e51b8152602060048201526009602482015268085b185d5b98da195960ba1b60448201526064016102a9565b604081810151600354608084015160a085015193516309e3d67b60e31b81526001600160a01b039283166004820152600291820b602482015293900b60448401526001600160801b0360648401819052608484015260009283929190911690634f1eb3d89060a40160408051808303816000875af11580156103f1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061041591906117f0565b60408581015160035460a088015160c089015193516309e3d67b60e31b81526001600160a01b039283166004820152600291820b602482015293900b60448401526001600160801b036064840181905260848401819052948516965092909316935060009283921690634f1eb3d89060a40160408051808303816000875af11580156104a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c991906117f0565b6001600160801b0391821693501690506104e38285611852565b96506104ef8184611852565b955084604001516001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015610533573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610557919061186b565b60405163a9059cbb60e01b8152336004820152602481018990526001600160a01b03919091169063a9059cbb906044016020604051808303816000875af11580156105a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ca9190611888565b5084604001516001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa15801561060d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610631919061186b565b60405163a9059cbb60e01b8152336004820152602481018890526001600160a01b03919091169063a9059cbb906044016020604051808303816000875af1158015610680573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106a49190611888565b505050505050915091565b6004546001600160a01b031633146107095760405162461bcd60e51b815260206004820152600760248201527f21636c506f6f6c0000000000000000000000000000000000000000000000000060448201526064016102a9565b6004546001600160a01b03161561092a5783156108225760048054604080517f0dfe168100000000000000000000000000000000000000000000000000000000815290516001600160a01b0390921692630dfe16819282820192602092908290030181865afa158015610780573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a4919061186b565b6001546040516323b872dd60e01b81526001600160a01b039182166004820152336024820152604481018790529116906323b872dd906064016020604051808303816000875af11580156107fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108209190611888565b505b821561092a5760048054604080517fd21220a700000000000000000000000000000000000000000000000000000000815290516001600160a01b039092169263d21220a79282820192602092908290030181865afa158015610888573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ac919061186b565b6001546040516323b872dd60e01b81526001600160a01b039182166004820152336024820152604481018690529116906323b872dd906064016020604051808303816000875af1158015610904573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109289190611888565b505b50505050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00805468010000000000000000810460ff16159067ffffffffffffffff1660008115801561097b5750825b905060008267ffffffffffffffff1660011480156109985750303b155b9050811580156109a6575080155b156109dd576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b845467ffffffffffffffff191660011785558315610a1157845468ff00000000000000001916680100000000000000001785555b600180546001600160a01b03808a1673ffffffffffffffffffffffffffffffffffffffff1992831617909255600080549289169282169290921790915560038054909116301790558315610aa457845468ff000000000000000019168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b50505050505050565b6001546001600160a01b03163314610af45760405162461bcd60e51b815260206004820152600a602482015269085b185d5b98da1c185960b21b60448201526064016102a9565b6001600160a01b03868116600090815260026020819052604090912001541615610b4c5760405162461bcd60e51b8152602060048201526009602482015268085b185d5b98da195960ba1b60448201526064016102a9565b6000610b61610b5c6001866118aa565b61119d565b90506000610b6e8561119d565b90506000610b7b8561119d565b90506000610b888561119d565b600080546040517f8e909e510000000000000000000000000000000000000000000000000000000081526001600160a01b038e811660048301528d8116602483015262ffffff8d16604483015288811660648301529394506b01f04ef12cb04cf158000000936b014adf4b7320334b9000000093921690638e909e51906084016020604051808303816000875af1158015610c27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c4b919061186b565b90506040518060e001604052808e6001600160a01b031681526020018d6001600160a01b03168152602001826001600160a01b031681526020018c62ffffff1681526020018b60020b81526020018a60020b81526020018960020b815250600260008f6001600160a01b03166001600160a01b0316815260200190815260200160002060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060208201518160010160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060408201518160020160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060608201518160020160146101000a81548162ffffff021916908362ffffff16021790555060808201518160020160176101000a81548162ffffff021916908360020b62ffffff16021790555060a082015181600201601a6101000a81548162ffffff021916908360020b62ffffff16021790555060c082015181600201601d6101000a81548162ffffff021916908360020b62ffffff16021790555090505080600460006101000a8154816001600160a01b0302191690836001600160a01b03160217905550600460009054906101000a90046001600160a01b03166001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e93919061186b565b6001600160a01b03168d6001600160a01b031603611010576000610eb887878661147e565b90506000610ec787878661147e565b600354604051633c8a7d8d60e01b81526001600160a01b03918216600482015260028f810b60248301528e900b60448201526001600160801b038516606482015260a06084820152600060a4820152919250841690633c8a7d8d9060c40160408051808303816000875af1158015610f43573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f6791906118cf565b5050600354604051633c8a7d8d60e01b81526001600160a01b03918216600482015260028d810b60248301528c900b60448201526001600160801b038316606482015260a06084820152600060a482015290841690633c8a7d8d9060c40160408051808303816000875af1158015610fe3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061100791906118cf565b50505050611171565b600061101d8688866114fc565b9050600061102c8688866114fc565b600354604051633c8a7d8d60e01b81526001600160a01b03918216600482015260028e810b60248301528f900b60448201526001600160801b038516606482015260a06084820152600060a4820152919250841690633c8a7d8d9060c40160408051808303816000875af11580156110a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110cc91906118cf565b5050600354604051633c8a7d8d60e01b81526001600160a01b03918216600482015260028c810b60248301528d900b60448201526001600160801b038316606482015260a06084820152600060a482015290841690633c8a7d8d9060c40160408051808303816000875af1158015611148573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061116c91906118cf565b505050505b50506004805473ffffffffffffffffffffffffffffffffffffffff191690555050505050505050505050565b60020b600060ff82901d80830118620d89e88111156111e0576111e07f8b86327a0000000000000000000000000000000000000000000000000000000084611543565b7001fffcb933bd6fad37aa2d162d1a5940016001821602700100000000000000000000000000000000186002821615611229576ffff97272373d413259a46990580e213a0260801c5b6004821615611248576ffff2e50f5f656932ef12357cf3c7fdcc0260801c5b6008821615611267576fffe5caca7e10e4e61c3624eaa0941cd00260801c5b6010821615611286576fffcb9843d60f6159c9db58835c9266440260801c5b60208216156112a5576fff973b41fa98c081472e6896dfb254c00260801c5b60408216156112c4576fff2ea16466c96a3843ec78b326b528610260801c5b60808216156112e3576ffe5dee046a99a2a811c461f1969c30530260801c5b610100821615611303576ffcbe86c7900a88aedcffc83b479aa3a40260801c5b610200821615611323576ff987a7253ac413176f2b074cf7815e540260801c5b610400821615611343576ff3392b0822b70005940c7a398e4b70f30260801c5b610800821615611363576fe7159475a2c29b7443b29c7fa6e889d90260801c5b611000821615611383576fd097f3bdfd2022b8845ad8f792aa58250260801c5b6120008216156113a3576fa9f746462d870fdf8a65dc1f90e061e50260801c5b6140008216156113c3576f70d869a156d2a1b890bb3df62baf32f70260801c5b6180008216156113e3576f31be135f97d08fd981231505542fcfa60260801c5b62010000821615611404576f09aa508b5b7a84e1c677de54f3e99bc90260801c5b62020000821615611424576e5d6af8dedb81196699c329225ee6040260801c5b62040000821615611443576d2216e584f5fa1ea926041bedfe980260801c5b62080000821615611460576b048a170391f7dc42444e8fa20260801c5b600084131561146e57600019045b63ffffffff0160201c9392505050565b6000826001600160a01b0316846001600160a01b0316111561149e579192915b60006114ca856001600160a01b0316856001600160a01b03166c01000000000000000000000000611554565b90506114f16114ec84836114de89896118f3565b6001600160a01b0316611554565b6115f6565b9150505b9392505050565b6000826001600160a01b0316846001600160a01b0316111561151c579192915b61153b6114ec836c010000000000000000000000006114de88886118f3565b949350505050565b816000528060020b60045260246000fd5b6000838302816000198587098281108382030391505080841161157657600080fd5b80600003611589575082900490506114f5565b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150509392505050565b806001600160801b038116811461164f5760405162461bcd60e51b815260206004820152601260248201527f6c6971756964697479206f766572666c6f77000000000000000000000000000060448201526064016102a9565b919050565b6001600160a01b038116811461166957600080fd5b50565b60006020828403121561167e57600080fd5b81356114f581611654565b6000806000806060858703121561169f57600080fd5b8435935060208501359250604085013567ffffffffffffffff8111156116c457600080fd5b8501601f810187136116d557600080fd5b803567ffffffffffffffff8111156116ec57600080fd5b8760208284010111156116fe57600080fd5b949793965060200194505050565b6000806040838503121561171f57600080fd5b823561172a81611654565b9150602083013561173a81611654565b809150509250929050565b8035600281900b811461164f57600080fd5b60008060008060008060c0878903121561177057600080fd5b863561177b81611654565b9550602087013561178b81611654565b9450604087013562ffffff811681146117a357600080fd5b93506117b160608801611745565b92506117bf60808801611745565b91506117cd60a08801611745565b90509295509295509295565b80516001600160801b038116811461164f57600080fd5b6000806040838503121561180357600080fd5b61180c836117d9565b915061181a602084016117d9565b90509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8082018082111561186557611865611823565b92915050565b60006020828403121561187d57600080fd5b81516114f581611654565b60006020828403121561189a57600080fd5b815180151581146114f557600080fd5b600282810b9082900b03627fffff198112627fffff8213171561186557611865611823565b600080604083850312156118e257600080fd5b505080516020909101519092909150565b6001600160a01b0382811682821603908111156118655761186561182356fea2646970667358221220080134fff1732ead100926174e905a66dbe70d4882d5fffa8dcdd84f1b60390964736f6c634300081c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100a35760003560e01c806351431d4f116100765780637e91334d1161005b5780637e91334d146101f85780639b083ec91461020b578063bfeab6e51461022f57600080fd5b806351431d4f146101ba57806357032fac146101e557600080fd5b806315a0ea6a146100a85780632b76a557146100d55780633e48f41714610192578063485cc955146101a7575b600080fd5b6100bb6100b636600461166c565b610261565b604080519283526020830191909152015b60405180910390f35b6101406100e336600461166c565b600260208190526000918252604090912080546001820154918301546001600160a01b0391821693928216929181169162ffffff600160a01b83041691600160b81b8104820b91600160d01b8204810b91600160e81b9004900b87565b604080516001600160a01b0398891681529688166020880152969094169585019590955262ffffff9091166060840152600290810b608084015292830b60a083015290910b60c082015260e0016100cc565b6101a56101a0366004611689565b6106af565b005b6101a56101b536600461170c565b610930565b6001546101cd906001600160a01b031681565b6040516001600160a01b0390911681526020016100cc565b6000546101cd906001600160a01b031681565b6101a5610206366004611757565b610aad565b61021f61021936600461166c565b50600090565b60405190151581526020016100cc565b61021f61023d36600461166c565b6001600160a01b039081166000908152600260208190526040909120015416151590565b60015460009081906001600160a01b031633146102b25760405162461bcd60e51b815260206004820152600a602482015269085b185d5b98da1c185960b21b60448201526064015b60405180910390fd5b6001600160a01b03808416600090815260026020818152604092839020835160e081018552815486168152600182015486169281019290925282015493841692810183905262ffffff600160a01b8504166060820152600160b81b8404820b6080820152600160d01b8404820b60a0820152600160e81b909304900b60c083015261036b5760405162461bcd60e51b8152602060048201526009602482015268085b185d5b98da195960ba1b60448201526064016102a9565b604081810151600354608084015160a085015193516309e3d67b60e31b81526001600160a01b039283166004820152600291820b602482015293900b60448401526001600160801b0360648401819052608484015260009283929190911690634f1eb3d89060a40160408051808303816000875af11580156103f1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061041591906117f0565b60408581015160035460a088015160c089015193516309e3d67b60e31b81526001600160a01b039283166004820152600291820b602482015293900b60448401526001600160801b036064840181905260848401819052948516965092909316935060009283921690634f1eb3d89060a40160408051808303816000875af11580156104a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c991906117f0565b6001600160801b0391821693501690506104e38285611852565b96506104ef8184611852565b955084604001516001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015610533573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610557919061186b565b60405163a9059cbb60e01b8152336004820152602481018990526001600160a01b03919091169063a9059cbb906044016020604051808303816000875af11580156105a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ca9190611888565b5084604001516001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa15801561060d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610631919061186b565b60405163a9059cbb60e01b8152336004820152602481018890526001600160a01b03919091169063a9059cbb906044016020604051808303816000875af1158015610680573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106a49190611888565b505050505050915091565b6004546001600160a01b031633146107095760405162461bcd60e51b815260206004820152600760248201527f21636c506f6f6c0000000000000000000000000000000000000000000000000060448201526064016102a9565b6004546001600160a01b03161561092a5783156108225760048054604080517f0dfe168100000000000000000000000000000000000000000000000000000000815290516001600160a01b0390921692630dfe16819282820192602092908290030181865afa158015610780573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a4919061186b565b6001546040516323b872dd60e01b81526001600160a01b039182166004820152336024820152604481018790529116906323b872dd906064016020604051808303816000875af11580156107fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108209190611888565b505b821561092a5760048054604080517fd21220a700000000000000000000000000000000000000000000000000000000815290516001600160a01b039092169263d21220a79282820192602092908290030181865afa158015610888573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ac919061186b565b6001546040516323b872dd60e01b81526001600160a01b039182166004820152336024820152604481018690529116906323b872dd906064016020604051808303816000875af1158015610904573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109289190611888565b505b50505050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00805468010000000000000000810460ff16159067ffffffffffffffff1660008115801561097b5750825b905060008267ffffffffffffffff1660011480156109985750303b155b9050811580156109a6575080155b156109dd576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b845467ffffffffffffffff191660011785558315610a1157845468ff00000000000000001916680100000000000000001785555b600180546001600160a01b03808a1673ffffffffffffffffffffffffffffffffffffffff1992831617909255600080549289169282169290921790915560038054909116301790558315610aa457845468ff000000000000000019168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b50505050505050565b6001546001600160a01b03163314610af45760405162461bcd60e51b815260206004820152600a602482015269085b185d5b98da1c185960b21b60448201526064016102a9565b6001600160a01b03868116600090815260026020819052604090912001541615610b4c5760405162461bcd60e51b8152602060048201526009602482015268085b185d5b98da195960ba1b60448201526064016102a9565b6000610b61610b5c6001866118aa565b61119d565b90506000610b6e8561119d565b90506000610b7b8561119d565b90506000610b888561119d565b600080546040517f8e909e510000000000000000000000000000000000000000000000000000000081526001600160a01b038e811660048301528d8116602483015262ffffff8d16604483015288811660648301529394506b01f04ef12cb04cf158000000936b014adf4b7320334b9000000093921690638e909e51906084016020604051808303816000875af1158015610c27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c4b919061186b565b90506040518060e001604052808e6001600160a01b031681526020018d6001600160a01b03168152602001826001600160a01b031681526020018c62ffffff1681526020018b60020b81526020018a60020b81526020018960020b815250600260008f6001600160a01b03166001600160a01b0316815260200190815260200160002060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060208201518160010160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060408201518160020160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060608201518160020160146101000a81548162ffffff021916908362ffffff16021790555060808201518160020160176101000a81548162ffffff021916908360020b62ffffff16021790555060a082015181600201601a6101000a81548162ffffff021916908360020b62ffffff16021790555060c082015181600201601d6101000a81548162ffffff021916908360020b62ffffff16021790555090505080600460006101000a8154816001600160a01b0302191690836001600160a01b03160217905550600460009054906101000a90046001600160a01b03166001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e93919061186b565b6001600160a01b03168d6001600160a01b031603611010576000610eb887878661147e565b90506000610ec787878661147e565b600354604051633c8a7d8d60e01b81526001600160a01b03918216600482015260028f810b60248301528e900b60448201526001600160801b038516606482015260a06084820152600060a4820152919250841690633c8a7d8d9060c40160408051808303816000875af1158015610f43573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f6791906118cf565b5050600354604051633c8a7d8d60e01b81526001600160a01b03918216600482015260028d810b60248301528c900b60448201526001600160801b038316606482015260a06084820152600060a482015290841690633c8a7d8d9060c40160408051808303816000875af1158015610fe3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061100791906118cf565b50505050611171565b600061101d8688866114fc565b9050600061102c8688866114fc565b600354604051633c8a7d8d60e01b81526001600160a01b03918216600482015260028e810b60248301528f900b60448201526001600160801b038516606482015260a06084820152600060a4820152919250841690633c8a7d8d9060c40160408051808303816000875af11580156110a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110cc91906118cf565b5050600354604051633c8a7d8d60e01b81526001600160a01b03918216600482015260028c810b60248301528d900b60448201526001600160801b038316606482015260a06084820152600060a482015290841690633c8a7d8d9060c40160408051808303816000875af1158015611148573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061116c91906118cf565b505050505b50506004805473ffffffffffffffffffffffffffffffffffffffff191690555050505050505050505050565b60020b600060ff82901d80830118620d89e88111156111e0576111e07f8b86327a0000000000000000000000000000000000000000000000000000000084611543565b7001fffcb933bd6fad37aa2d162d1a5940016001821602700100000000000000000000000000000000186002821615611229576ffff97272373d413259a46990580e213a0260801c5b6004821615611248576ffff2e50f5f656932ef12357cf3c7fdcc0260801c5b6008821615611267576fffe5caca7e10e4e61c3624eaa0941cd00260801c5b6010821615611286576fffcb9843d60f6159c9db58835c9266440260801c5b60208216156112a5576fff973b41fa98c081472e6896dfb254c00260801c5b60408216156112c4576fff2ea16466c96a3843ec78b326b528610260801c5b60808216156112e3576ffe5dee046a99a2a811c461f1969c30530260801c5b610100821615611303576ffcbe86c7900a88aedcffc83b479aa3a40260801c5b610200821615611323576ff987a7253ac413176f2b074cf7815e540260801c5b610400821615611343576ff3392b0822b70005940c7a398e4b70f30260801c5b610800821615611363576fe7159475a2c29b7443b29c7fa6e889d90260801c5b611000821615611383576fd097f3bdfd2022b8845ad8f792aa58250260801c5b6120008216156113a3576fa9f746462d870fdf8a65dc1f90e061e50260801c5b6140008216156113c3576f70d869a156d2a1b890bb3df62baf32f70260801c5b6180008216156113e3576f31be135f97d08fd981231505542fcfa60260801c5b62010000821615611404576f09aa508b5b7a84e1c677de54f3e99bc90260801c5b62020000821615611424576e5d6af8dedb81196699c329225ee6040260801c5b62040000821615611443576d2216e584f5fa1ea926041bedfe980260801c5b62080000821615611460576b048a170391f7dc42444e8fa20260801c5b600084131561146e57600019045b63ffffffff0160201c9392505050565b6000826001600160a01b0316846001600160a01b0316111561149e579192915b60006114ca856001600160a01b0316856001600160a01b03166c01000000000000000000000000611554565b90506114f16114ec84836114de89896118f3565b6001600160a01b0316611554565b6115f6565b9150505b9392505050565b6000826001600160a01b0316846001600160a01b0316111561151c579192915b61153b6114ec836c010000000000000000000000006114de88886118f3565b949350505050565b816000528060020b60045260246000fd5b6000838302816000198587098281108382030391505080841161157657600080fd5b80600003611589575082900490506114f5565b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150509392505050565b806001600160801b038116811461164f5760405162461bcd60e51b815260206004820152601260248201527f6c6971756964697479206f766572666c6f77000000000000000000000000000060448201526064016102a9565b919050565b6001600160a01b038116811461166957600080fd5b50565b60006020828403121561167e57600080fd5b81356114f581611654565b6000806000806060858703121561169f57600080fd5b8435935060208501359250604085013567ffffffffffffffff8111156116c457600080fd5b8501601f810187136116d557600080fd5b803567ffffffffffffffff8111156116ec57600080fd5b8760208284010111156116fe57600080fd5b949793965060200194505050565b6000806040838503121561171f57600080fd5b823561172a81611654565b9150602083013561173a81611654565b809150509250929050565b8035600281900b811461164f57600080fd5b60008060008060008060c0878903121561177057600080fd5b863561177b81611654565b9550602087013561178b81611654565b9450604087013562ffffff811681146117a357600080fd5b93506117b160608801611745565b92506117bf60808801611745565b91506117cd60a08801611745565b90509295509295509295565b80516001600160801b038116811461164f57600080fd5b6000806040838503121561180357600080fd5b61180c836117d9565b915061181a602084016117d9565b90509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8082018082111561186557611865611823565b92915050565b60006020828403121561187d57600080fd5b81516114f581611654565b60006020828403121561189a57600080fd5b815180151581146114f557600080fd5b600282810b9082900b03627fffff198112627fffff8213171561186557611865611823565b600080604083850312156118e257600080fd5b505080516020909101519092909150565b6001600160a01b0382811682821603908111156118655761186561182356fea2646970667358221220080134fff1732ead100926174e905a66dbe70d4882d5fffa8dcdd84f1b60390964736f6c634300081c0033",
  "devdoc": {
    "errors": {
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ]
    },
    "events": {
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      }
    },
    "kind": "dev",
    "methods": {
      "addSingleSidedLiquidity(address,address,uint24,int24,int24,int24)": {
        "details": "Provides liquidity across three ticks with different amounts"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addSingleSidedLiquidity(address,address,uint24,int24,int24,int24)": {
        "notice": "Add single-sided liquidity to a concentrated pool"
      },
      "claimFees(address)": {
        "notice": "Claim accumulated fees from the pool"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 17958,
        "contract": "contracts/launchpad/clmm/dexes/RamsesAdapter.sol:RamsesAdapter",
        "label": "CL_POOL_FACTORY",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IClPoolFactory)16899"
      },
      {
        "astId": 17960,
        "contract": "contracts/launchpad/clmm/dexes/RamsesAdapter.sol:RamsesAdapter",
        "label": "LAUNCHPAD",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 17966,
        "contract": "contracts/launchpad/clmm/dexes/RamsesAdapter.sol:RamsesAdapter",
        "label": "launchParams",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_contract(IERC20)3670,t_struct(LaunchTokenParams)17989_storage)"
      },
      {
        "astId": 17968,
        "contract": "contracts/launchpad/clmm/dexes/RamsesAdapter.sol:RamsesAdapter",
        "label": "me",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 17971,
        "contract": "contracts/launchpad/clmm/dexes/RamsesAdapter.sol:RamsesAdapter",
        "label": "transientClPool",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IClPool)16698"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IClPool)16698": {
        "encoding": "inplace",
        "label": "contract IClPool",
        "numberOfBytes": "20"
      },
      "t_contract(IClPoolFactory)16899": {
        "encoding": "inplace",
        "label": "contract IClPoolFactory",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)3670": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_int24": {
        "encoding": "inplace",
        "label": "int24",
        "numberOfBytes": "3"
      },
      "t_mapping(t_contract(IERC20)3670,t_struct(LaunchTokenParams)17989_storage)": {
        "encoding": "mapping",
        "key": "t_contract(IERC20)3670",
        "label": "mapping(contract IERC20 => struct RamsesAdapter.LaunchTokenParams)",
        "numberOfBytes": "32",
        "value": "t_struct(LaunchTokenParams)17989_storage"
      },
      "t_struct(LaunchTokenParams)17989_storage": {
        "encoding": "inplace",
        "label": "struct RamsesAdapter.LaunchTokenParams",
        "members": [
          {
            "astId": 17974,
            "contract": "contracts/launchpad/clmm/dexes/RamsesAdapter.sol:RamsesAdapter",
            "label": "tokenBase",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IERC20)3670"
          },
          {
            "astId": 17977,
            "contract": "contracts/launchpad/clmm/dexes/RamsesAdapter.sol:RamsesAdapter",
            "label": "tokenQuote",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(IERC20)3670"
          },
          {
            "astId": 17980,
            "contract": "contracts/launchpad/clmm/dexes/RamsesAdapter.sol:RamsesAdapter",
            "label": "pool",
            "offset": 0,
            "slot": "2",
            "type": "t_contract(IClPool)16698"
          },
          {
            "astId": 17982,
            "contract": "contracts/launchpad/clmm/dexes/RamsesAdapter.sol:RamsesAdapter",
            "label": "fee",
            "offset": 20,
            "slot": "2",
            "type": "t_uint24"
          },
          {
            "astId": 17984,
            "contract": "contracts/launchpad/clmm/dexes/RamsesAdapter.sol:RamsesAdapter",
            "label": "tick0",
            "offset": 23,
            "slot": "2",
            "type": "t_int24"
          },
          {
            "astId": 17986,
            "contract": "contracts/launchpad/clmm/dexes/RamsesAdapter.sol:RamsesAdapter",
            "label": "tick1",
            "offset": 26,
            "slot": "2",
            "type": "t_int24"
          },
          {
            "astId": 17988,
            "contract": "contracts/launchpad/clmm/dexes/RamsesAdapter.sol:RamsesAdapter",
            "label": "tick2",
            "offset": 29,
            "slot": "2",
            "type": "t_int24"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint24": {
        "encoding": "inplace",
        "label": "uint24",
        "numberOfBytes": "3"
      }
    }
  }
}